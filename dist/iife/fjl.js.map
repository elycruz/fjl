{"version":3,"file":"fjl.js","sources":["../../src/functionOps/curry.js","../../src/utils/utils.js","../../src/uncurried/jsPlatform/objectUncurried.js","../../src/uncurried/objectOps/typeOf.js","../../src/uncurried/objectOps/is.js","../../src/uncurried/objectOps/assignDeep.js","../../src/uncurried/jsPlatform/functionUncurried.js","../../src/uncurried/functionOps/apply.js","../../src/uncurried/objectOps/of.js","../../src/uncurried/jsPlatform/listUncurried.js","../../src/uncurried/jsPlatform/arrayUncurried.js","../../src/uncurried/functionOps/negate.js","../../src/uncurried/functionOps/call.js","../../src/uncurried/functionOps/compose.js","../../src/uncurried/functionOps/curry.js","../../src/uncurried/functionOps/curry_.js","../../src/uncurried/functionOps/id.js","../../src/uncurried/functionOps/functionOpsUncurried.js","../../src/booleanOps/is.js","../../src/booleanOps/booleanOps.js","../../src/uncurried/objectOps/prop.js","../../src/objectOps/typeOf.js","../../src/uncurried/objectOps/instanceOf.js","../../src/objectOps/instanceOf.js","../../src/objectOps/is.js","../../src/functionOps/apply.js","../../src/objectOps/of.js","../../src/uncurried/listOps/listOpsUncurriedAggregation.js","../../src/uncurried/listOps/map.js","../../src/uncurried/listOps/listOpsUncurriedUtils.js","../../src/uncurried/listOps/listOpsUncurried.js","../../src/uncurried/objectOps/setTheoryOps.js","../../src/objectOps/objectOps.js","../../src/functionOps/call.js","../../src/listOps/listOps.js","../../src/functionOps/compose.js","../../src/functionOps/negateP.js","../../src/functionOps/id.js","../../src/functionOps/flip.js","../../src/functionOps/until.js","../../src/functionOps/functionOps.js","../../src/numberOps/numberOps.js","../../src/uncurried/jsPlatform/stringUnCurried.js","../../src/jsPlatform/string.js","../../src/stringOps/stringOps.js","../../generated-for-src/version.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf functionOps\r\n * @description Different curry implementations for modern javascript currying.\r\n * @todo Make code here more minimal (reuse small parts here).\r\n * @todo separate curry_ (and it's variants) into a separate file/module.\r\n */\r\n\r\n/**\r\n * PlaceHolder (__) constructor.\r\n * @constructor PlaceHolder\r\n * @private\r\n */\r\nconst PlaceHolder = function PlaceHolder() {},\r\n\r\n    /**\r\n     * Placeholder instance.\r\n     * @type {PlaceHolder}\r\n     * @private\r\n     */\r\n    placeHolderInstance = new PlaceHolder();\r\n\r\n/**\r\n * Curries a function based on it's defined arity (argument's arrayOps expected length).\r\n * @function module:functionOps.curry\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\r\nexport function curry (fn, ...argsToCurry) {\r\n    return (...args) => {\r\n        const concatedArgs = argsToCurry.concat(args);\r\n        return concatedArgs.length < fn.length ?\r\n            curry.apply(null, [fn].concat(concatedArgs)) :\r\n            fn.apply(null, concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Checks to see if value is a `PlaceHolder`.\r\n * @function isPlaceHolder\r\n * @param instance {*}\r\n * @returns {boolean}\r\n * @private\r\n */\r\nfunction isPlaceHolder (instance) {\r\n    return instance instanceof PlaceHolder;\r\n}\r\n\r\n/**\r\n * Replaces `placeholder` values in `listOps`.\r\n * @function replacePlaceHolder\r\n * @param array {Array} - Array to replace placeholders in.\r\n * @param args {Array} - Args from to choose from to replace placeholders.\r\n * @returns {Array|*} - Returns passed in `listOps` with placeholders replaced by values in `args`.\r\n * @private\r\n */\r\nfunction replacePlaceHolders (array, args) {\r\n    let out = array.map(element => {\r\n        if (!isPlaceHolder(element)) {\r\n            return element;\r\n        }\r\n        else if (args.length > 0) {\r\n            return args.shift();\r\n        }\r\n        return element;\r\n    });\r\n    return args.length > 0 ? out.concat(args) : out;\r\n}\r\n\r\n/**\r\n * Curries passed in functionOps up to given arguments length (can enforce arity via placeholder values (`__`)).\r\n * @function module:functionOps.curry_\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\r\nexport function curry_ (fn, ...argsToCurry) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(argsToCurry, args),\r\n            placeHolders = concatedArgs.filter(isPlaceHolder),\r\n            canBeCalled = placeHolders.length === 0 &&\r\n                concatedArgs.length >= fn.length;\r\n        return canBeCalled ? fn.apply(null, concatedArgs) :\r\n            curry_.apply(null, [fn].concat(concatedArgs));\r\n    };\r\n}\r\n\r\n/**\r\n * Curries a functionOps up to given arity also enforces arity via placeholder values (`__`).\r\n * @function module:functionOps.curryN_\r\n * @param executeArity {Number}\r\n * @param fn {Function}\r\n * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\r\n * @returns {Function} - Passed in functionOps wrapped in a functionOps for currying.\r\n */\r\nexport function curryN_ (executeArity, fn, ...curriedArgs) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(curriedArgs, args),\r\n            placeHolders = concatedArgs.filter(isPlaceHolder),\r\n            canBeCalled = (concatedArgs.length - placeHolders.length >= executeArity) || !executeArity;\r\n        return !canBeCalled ? curryN_.apply(null, [executeArity, fn].concat(concatedArgs)) :\r\n            fn.apply(null, concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Curries a functionOps up to a given arity.\r\n * @function module:functionOps.curryN\r\n * @param executeArity {Number}\r\n * @param fn {Function}\r\n * @param curriedArgs {...*}\r\n * @returns {Function}\r\n */\r\nexport function curryN (executeArity, fn, ...curriedArgs) {\r\n    return (...args) => {\r\n        let concatedArgs = curriedArgs.concat(args),\r\n            canBeCalled = (concatedArgs.length >= executeArity) || !executeArity;\r\n        return !canBeCalled ? curryN.apply(null, [executeArity, fn].concat(concatedArgs)) :\r\n            fn.apply(null, concatedArgs);\r\n    };\r\n}\r\n\r\nexport let\r\n\r\n    /**\r\n     * Place holder object (frozen) used by curry.\r\n     * @memberOf functionOps\r\n     * @type {PlaceHolder}\r\n     */\r\n    __ = Object.freeze ? Object.freeze(placeHolderInstance) : placeHolderInstance,\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 2 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 2 or more args).\r\n     * @function module:functionOps.curry2_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2_ = fn => curryN_(2, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 3 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 3 or more args).\r\n     * @function module:functionOps.curry3_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3_ = fn => curryN_(3, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 4 (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 4 or more args).\r\n     * @function module:functionOps.curry4_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4_ = fn => curryN_(4, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 5  (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 5 or more args).\r\n     * @function module:functionOps.curry5_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5_ = fn => curryN_(5, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 2 (won't call functionOps until 2 or more args).\r\n     * @function module:functionOps.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 3 (won't call functionOps until 3 or more args).\r\n     * @function module:functionOps.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 4 (won't call functionOps until 4 or more args).\r\n     * @function module:functionOps.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 5 (won't call functionOps until 5 or more args).\r\n     * @function module:functionOps.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n\r\nimport {curry, curry2} from   '../functionOps/curry';\r\n\r\nexport const\r\n\r\n    fPureTakesOne = name => (arg, f) => f[name](arg),\r\n\r\n    fPureTakes2 = name => (arg1, arg2, f) => f[name](arg1, arg2),\r\n\r\n    fPureTakesOneOrMore = name => (f, ...args) => f[name](...args),\r\n\r\n    fPureTakesOne_ = name => curry((arg, f) => f[name](arg)),\r\n\r\n    fPureTakes2_ = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    fPureTakesOneOrMore_ = name => curry2((f, ...args) => f[name](...args))\r\n;\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n * Defines some of the platform methods for objects (the ones used within `fjl`) uncurried for use\r\n * throughout the library.  @note Doesn't include all methods for objects just the ones used in\r\n *  the library.\r\n * @todo change all files named '*UnCurried' to '*Uncurried'.\r\n */\r\n\r\nimport {fPureTakesOne} from   '../../utils/utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived objectOps.\r\n     * @function module:jsPlatform.objectOpsUncurried.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = (instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor,\r\n\r\n    /**\r\n     * @function module:jsPlatform.objectOpsUncurried.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:jsPlatform.objectOpsUncurried.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * @function module:jsPlatform.objectOpsUncurried.hasOwnProperty\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `toString`.\r\n     */\r\n    toString = x => x.toString(),\r\n\r\n    /**\r\n     * Gets own enumerable keys of passed in object (`Object.keys`).\r\n     * @function module:jsPlatform.objectOpsUncurried.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    keys = obj => Object.keys(obj),\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:jsPlatform.objectOpsUncurried.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() =>\r\n        Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            (obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0))();\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined',\r\n    _undefined = 'undefined';\r\n\r\n/**\r\n * Returns the class name of an object from it's class stringOps.\r\n * @note Returns 'NaN' if value `isNaN` and value type is 'Number'.\r\n * @function module:fjl.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name property if not null or undefined (in which case a\r\n *  name representing those types is returned ('Null' and or 'Undefined' (es6 compliant))).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (typeof value === _undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @module is\r\n * @todo remove `isset`, `isEmpty` and `notEmptyAndOfType`\r\n */\r\n\r\nimport {typeOf} from './typeOf';\r\n\r\nimport {instanceOf, length, keys, hasOwnProperty} from '../jsPlatform/objectUncurried';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether a value is a functionOps or not.\r\n     * @function module:is.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = value => instanceOf(Function, value),\r\n\r\n    /**\r\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\r\n     * be a named constructor/functionOps-instance;  E.g.,\r\n     * ```\r\n     *  functionOps SomeName () {} // or\r\n     *  var SomeName = functionOps SomeName () {} // or\r\n     *  class SomeName {}\r\n     * ```\r\n     * @function module:fjl.isType\r\n     * @param type {Function|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = (type, obj) => typeOf(obj) === (isFunction(type) ? type.name : type),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:is.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test(x.toString().substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a booleanOps depicting whether a value is callable or not.\r\n     * @function module:is.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an arrayOps.\r\n     * @function module:is.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    isArray = value => isType(Array, value),\r\n\r\n    /**\r\n     * Checks whether value is an objectOps or not.\r\n     * @function module:is.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = value => isType(_Object, value),\r\n\r\n    /**\r\n     * Checks if value is a booleanOps.\r\n     * @function module:is.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = value => isType(_Boolean, value),\r\n\r\n    /**\r\n     * Checks if value is a valid numberOps (also checks if isNaN so that you don't have to).\r\n     * @function module:is.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = value => isType(_Number, value),\r\n\r\n    /**\r\n     * Checks whether value is a stringOps or not.\r\n     * @function module:is.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = value => isType(_String, value),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:is.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = value => isType(_Map, value),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:is.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = value => isType(_Set, value),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:is.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap = value => isType(_WeakMap, value),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:is.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = value => isType(_WeakSet, value),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:is.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = value => isType(_Undefined, value),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:is.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = value => isType(_Null, value),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:is.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = value => isType(_Symbol, value),\r\n\r\n    /**\r\n     * @tentative\r\n     */\r\n    isPromise = value => isType('Promise', value),\r\n\r\n    /**\r\n     * Checks if given `x` is one of the four\r\n     * \"usable\" immutable JS primitives; I.e.,\r\n     *  One of [String, Boolean, Number, Symbol]\r\n     * @function module:is.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return [_String, _Number, _Boolean, _Symbol]\r\n            .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => length(x) === 0,\r\n\r\n    /**\r\n     * Checks if objectOps has own properties/enumerable-props or not.\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in argument is empty.\r\n     * @function module:is.empty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        let typeOfValue = typeOf(value),\r\n            retVal;\r\n\r\n        if (!value) { // '', 0, `null`, `undefined` or `false` then is empty\r\n            retVal = true;\r\n        }\r\n        else if (typeOfValue === _Array || typeOfValue === _Function) {\r\n            retVal = isEmptyList(value);\r\n        }\r\n        else if (typeOfValue === _Number && value !== 0) {\r\n            retVal = false;\r\n        }\r\n        else if (typeOfValue === _Object) {\r\n            retVal = isEmptyObject(value);\r\n        }\r\n        else if (hasOwnProperty('size', value)) {\r\n            retVal = isEmptyCollection(value);\r\n        }\r\n        else {\r\n            retVal = !value;\r\n        }\r\n        return retVal;\r\n    },\r\n\r\n    /**\r\n     * Returns true if an element is not empty and is of type.\r\n     * @function module:is.notEmptyAndOfType\r\n     * @param type {String|Function} - Type to check against (stringOps name or actual constructor).\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    notEmptyAndOfType = (type, value) => !isEmpty(value) && isType(type, value),\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null.\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => !isNull(x) && !isUndefined(x);\r\n","\r\nimport {isObject} from './is';\r\n\r\nimport {keys, hasOwnProperty} from '../jsPlatform/objectUncurried';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one.\r\n     * @function module:jsPlatform.objectOpsUncurried.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = (obj0, ...objs) =>\r\n        objs.reduce((topAgg, obj) =>\r\n                keys(obj).reduce((agg, key) => {\r\n                    let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                    // If property is not writable move to next item in collection\r\n                    if (hasOwnProperty(key, agg) && propDescription &&\r\n                        !(propDescription.get && propDescription.set) &&\r\n                        !propDescription.writable) {\r\n                        return agg;\r\n                    }\r\n                    if (isObject(agg[key]) && isObject(obj[key])) {\r\n                        assignDeep(agg[key], obj[key]);\r\n                    }\r\n                    else { agg[key] = obj[key]; }\r\n                    return agg;\r\n                }, topAgg)\r\n            , obj0);\r\n","/**\r\n * Created by elydelacruz on 9/7/2017.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` functionOps (takes no context).\r\n     * @function module:jsPlatform.functionOps.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = (fn, args) => fn.apply(null, args),\r\n\r\n    /**\r\n     * Functional `call` functionOps (takes no context).\r\n     * @function module:fnOperators.call\r\n     * @param fn {Function}\r\n     * @param args ...{*}\r\n     * @returns {*}\r\n     */\r\n    call = (fn, ...args) => apply(fn, args);\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n\r\n/**\r\n * Functional `apply` functionOps (takes no context).\r\n * @function module:functionOps.apply\r\n * @param fn {Function}\r\n * @param args {*}\r\n * @returns {*}\r\n */\r\nexport {apply} from '../jsPlatform/functionUncurried';\r\n","import {isFunction, isUsableImmutablePrimitive, isset} from './is';\r\nimport {hasOwnProperty} from '../jsPlatform/objectUncurried';\r\nimport {apply} from   '../functionOps/apply';\r\n\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length` and `toString`)\r\n *      on both strings and arrays.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from   '../../utils/utils';\r\n\r\n// export {length, toString} from './objectOpsUnCurried';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @function module:jsPlatform.listOpsUncurried.concat\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * @function module:jsPlatform.listOpsUncurried.slice\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:jsPlatform.listOpsUncurried.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:jsPlatform.listOpsUncurried.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:jsPlatform.listOpsUncurried.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n * @module jsPlatform:arrayOpsUncurried\r\n * @todo updated doc blocks to list correct/updated module name.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from   '../../utils/utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Array.prototype.reverse generator (generates a functionOps that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, []),\r\n\r\n    /**\r\n     * Maps a functionOps to functor (listOps etc.).\r\n     * @function module:arrayOpsUncurried.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (listOps etc.) with passed in functionOps.\r\n     * @function module:arrayOpsUncurried.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (listOps etc.) with passed in functionOps.\r\n     * @function module:arrayOpsUncurried.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (listOps etc.) from the right with passed in functionOps.\r\n     * @function module:arrayOpsUncurried.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of objectOps you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in objectOps doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in objectOps doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in objectOps doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an listOps (shimmed if not exists).\r\n     * @function module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","/**\r\n * @module negate\r\n */\r\n\r\nimport {apply} from './apply';\r\n\r\nimport {reverse} from '../jsPlatform/arrayUncurried';\r\n\r\nexport const\r\n\r\n    negateF = fn => (a, b) => !fn(a, b),\r\n\r\n    negateF3 = fn => (a, b, c) => !fn(a, b, c),\r\n\r\n    negateF4 = fn => (a, b, c, d) => !fn(a, b, c, d),\r\n\r\n    negateF5 = fn => (a, b, c, d, e) => !fn(a, b, c, d, e),\r\n\r\n    /**\r\n     * Negates a javascript-'generic' predicate; `Function<element, index, list>`.\r\n     * @function module:functionOps.negateP\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateP = negateF3,\r\n\r\n    /**\r\n     * Returns a new function which is the dual of `fn` (or the negated version of `fn`).\r\n     * @function module:functionOps.negateFMany\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFMany = fn => (...args) => !apply(fn, reverse(args));\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n\r\n/**\r\n * Functional `call` functionOps (takes no context).\r\n * @function module:functionOps.call\r\n * @param fn {Function}\r\n * @param args {*}\r\n * @returns {*}\r\n */\r\nexport {call} from '../jsPlatform/functionUncurried';\r\n","import {reduceRight} from '../jsPlatform/arrayUncurried';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the functionOps on the left of itself.\r\n * @function module:fjl.compose\r\n * @type {Function}\r\n * @param args {...Function}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) => arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @module curry\r\n * @description Curry strict and curry arbitrarily functions `curry` and `curryN`.\r\n */\r\n\r\nimport {apply} from './apply';\r\n\r\nimport {append, length} from   '../listOps/listOpsUncurried';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Curries a functionOps based on it's defined arity (argument's arrayOps expected length).\r\n     * @function curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => {\r\n        return (...args) => {\r\n            const concatedArgs = append(argsToCurry, args);\r\n            return length(concatedArgs) < length(fn) ?\r\n                apply(curry, append([fn], concatedArgs)) :\r\n                apply(fn, concatedArgs);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Curries a functionOps up to a given arity.\r\n     * @function curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param curriedArgs {...*}\r\n     * @returns {Function}\r\n     */\r\n    curryN = (executeArity, fn, ...curriedArgs) => {\r\n        return (...args) => {\r\n            let concatedArgs = append(curriedArgs, args),\r\n                canBeCalled = (length(concatedArgs) >= executeArity) || !executeArity;\r\n            return !canBeCalled ? apply(curryN, append([executeArity, fn], concatedArgs)) :\r\n                apply(fn, concatedArgs);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 2 (won't call functionOps until 2 or more args).\r\n     * @function curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 3 (won't call functionOps until 3 or more args).\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 4 (won't call functionOps until 4 or more args).\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 5 (won't call functionOps until 5 or more args).\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @file fjl-curry/src/curry.js\r\n * @module curry {{curry: Function, curryN: Function, curry2: Function, curry3: Function, curry4: Function, curry5: Function, curry_: Function, curryN_: Function, curry2_: Function, curry3_: Function, curry4_: Function, curry5_: Function}}\r\n * @description Different curry implementations for modern javascript currying.\r\n * @todo Make code here more minimal (reuse small parts here).\r\n */\r\n\r\nimport {apply} from './apply';\r\n\r\nimport {append, map, filter, length} from   '../listOps/listOpsUncurried';\r\n\r\n/**\r\n * PlaceHolder (__) constructor.\r\n * @constructor PlaceHolder\r\n * @private\r\n */\r\nconst PlaceHolder = function PlaceHolder() {},\r\n\r\n    /**\r\n     * Placeholder instance.\r\n     * @type {PlaceHolder}\r\n     */\r\n    placeHolderInstance = new PlaceHolder();\r\n\r\n/**\r\n * Checks to see if value is a `PlaceHolder`.\r\n * @function isPlaceHolder\r\n * @param instance {*}\r\n * @returns {boolean}\r\n */\r\nfunction isPlaceHolder (instance) {\r\n    return instance instanceof PlaceHolder;\r\n}\r\n\r\n/**\r\n * Replaces `placeholder` values in `listOps`.\r\n * @function replacePlaceHolder\r\n * @param array {Array} - Array to replace placeholders in.\r\n * @param args {Array} - Args from to choose from to replace placeholders.\r\n * @returns {Array|*} - Returns passed in `listOps` with placeholders replaced by values in `args`.\r\n */\r\nfunction replacePlaceHolders (array, args) {\r\n    let out = map(element => {\r\n            if (!isPlaceHolder(element)) { return element; }\r\n            else if (length(args)) { return args.shift(); }\r\n            return element;\r\n        }, array);\r\n    return length(args) ? append(out, args) : out;\r\n}\r\n\r\n/**\r\n * Curries passed in functionOps up to given arguments length (can enforce arity via placeholder values (`__`)).\r\n * @function curry_\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\r\nexport function curry_ (fn, ...argsToCurry) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(argsToCurry, args),\r\n            placeHolders = filter(isPlaceHolder, concatedArgs),\r\n            canBeCalled = length(placeHolders) === 0 &&\r\n                length(concatedArgs) >= length(fn);\r\n        return canBeCalled ? apply(fn, concatedArgs) :\r\n            apply(curry_, append([fn], concatedArgs));\r\n    };\r\n}\r\n\r\n/**\r\n * Curries a functionOps up to given arity also enforces arity via placeholder values (`__`).\r\n * @function curryN_\r\n * @param executeArity {Number}\r\n * @param fn {Function}\r\n * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\r\n * @returns {Function} - Passed in functionOps wrapped in a functionOps for currying.\r\n */\r\nexport function curryN_ (executeArity, fn, ...curriedArgs) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(curriedArgs, args),\r\n            placeHolders = filter(isPlaceHolder, concatedArgs),\r\n            canBeCalled = (length(concatedArgs) - length(placeHolders) >= executeArity) || !executeArity;\r\n        return !canBeCalled ?\r\n            apply(curryN_, append([executeArity, fn], concatedArgs)) :\r\n            apply(fn, concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Place holder object (frozen) used by curry.\r\n * @type {PlaceHolder}\r\n */\r\nexport let __ = Object.freeze ? Object.freeze(placeHolderInstance) : placeHolderInstance,\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 2 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 2 or more args).\r\n     * @function curry2_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2_ = fn => curryN_(2, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 3 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 3 or more args).\r\n     * @function curry3_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3_ = fn => curryN_(3, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 4 (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 4 or more args).\r\n     * @function curry4_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4_ = fn => curryN_(4, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 5  (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 5 or more args).\r\n     * @function curry5_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5_ = fn => curryN_(5, fn)\r\n\r\n;\r\n","/**\r\n * @module id\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","/**\r\n * @module functionOpsUncurried\r\n */\r\nexport * from './apply';\r\nexport * from './call';\r\nexport * from './compose';\r\nexport * from './curry';\r\nexport * from './curry_';\r\nexport * from './flip';\r\nexport * from './id';\r\nexport * from './negate';\r\nexport * from './until';\r\n","export const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:booleanOps.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:booleanOps.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value;\r\n","/**\r\n * Created by elyde on 7/15/2017.\r\n * @module booleanOps\r\n */\r\n\r\nimport {curry2} from  '../functionOps/curry';\r\n\r\nexport {isTruthy, isFalsy} from './is';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:booleanOps.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:booleanOps.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false,\r\n\r\n    /**\r\n     * Returns whether both values are truthy or not.\r\n     * @function module:booleanOps.bAnd\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {Boolean}\r\n     */\r\n    bAnd = curry2((a, b) => a && b),\r\n\r\n    /**\r\n     * Returns whether one of the two passed in values\r\n     *  are truthy or not.\r\n     * @function module:booleanOps.bOr\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {Boolean}\r\n     */\r\n    bOr = curry2((a, b) => a || b),\r\n\r\n    /**\r\n     * Returns whether passed in value is truthy or not.\r\n     * @function module:booleanOps.bNot\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    bNot = x => !x,\r\n\r\n    /**\r\n     * Returns `true` - Makes code more readable in places.\r\n     * @tentative\r\n     * @function module:booleanOps.otherwise\r\n     * @returns {Boolean} - Always true\r\n     */\r\n    bOtherwise = alwaysTrue,\r\n\r\n    /**\r\n     * Returns whether both values passed in are equal or not.\r\n     * @function module:booleanOps.bEqual\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {Boolean}\r\n     */\r\n    bEqual = curry2((a, b) => a === b);\r\n","/**\r\n *\r\n */\r\n\r\nexport const prop = (name, obj) => obj[name];\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined',\r\n    _undefined = 'undefined';\r\n\r\n/**\r\n * Returns the class name of an object from it's class stringOps.\r\n * @note Returns 'NaN' if value `isNaN` and value type is 'Number'.\r\n * @function module:fjl.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name property if not null or undefined (in which case a\r\n *  name representing those types is returned ('Null' and or 'Undefined' (es6 compliant))).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (typeof value === _undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n\r\n/**\r\n * Functional, uncurried 'instanceof'.\r\n * @returns {Boolean}\r\n */\r\nexport {instanceOf} from '../jsPlatform/objectUncurried';\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n\r\nimport {curry} from   '../functionOps/curry';\r\n\r\nimport {instanceOf as pureInstanceOf} from '../uncurried/objectOps/instanceOf';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived objectOps.\r\n     * @instanceConstructor {Function|Class}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = curry(pureInstanceOf);\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @module is\r\n * @todo remove `isset`, `isEmpty` and `notEmptyAndOfType`\r\n */\r\nimport {curry} from   '../functionOps/curry';\r\nimport {typeOf} from './typeOf';\r\nimport {instanceOf} from './instanceOf';\r\nimport {length, keys, hasOwnProperty} from '../uncurried/jsPlatform/objectUncurried';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether a value is a functionOps or not.\r\n     * @function module:is.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = instanceOf(Function),\r\n\r\n    /**\r\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\r\n     * be a named constructor/functionOps-instance;  E.g.,\r\n     * ```\r\n     *  functionOps SomeName () {} // or\r\n     *  var SomeName = functionOps SomeName () {} // or\r\n     *  class SomeName {}\r\n     * ```\r\n     * @function module:fjl.isType\r\n     * @param Type {Function|String} - Constructor or constructor name\r\n     * @param value {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry((type, obj) => typeOf(obj) === (isFunction(type) ? type.name : type)),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:is.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test(x.toString().substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a booleanOps depicting whether a value is callable or not.\r\n     * @function module:is.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an arrayOps.\r\n     * @function module:is.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    isArray = isType(Array),\r\n\r\n    /**\r\n     * Checks whether value is an objectOps or not.\r\n     * @function module:is.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = isType(_Object),\r\n\r\n    /**\r\n     * Checks if value is a booleanOps.\r\n     * @function module:is.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = isType(_Boolean),\r\n\r\n    /**\r\n     * Checks if value is a valid numberOps (also checks if isNaN so that you don't have to).\r\n     * @function module:is.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = isType(_Number),\r\n\r\n    /**\r\n     * Checks whether value is a stringOps or not.\r\n     * @function module:is.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = isType(_String),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:is.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = isType(_Map),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:is.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = isType(_Set),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:is.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap = isType(_WeakMap),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:is.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = isType(_WeakSet),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:is.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = isType(_Undefined),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:is.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = isType(_Null),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:is.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = isType(_Symbol),\r\n\r\n    /**\r\n     * @tentative\r\n     */\r\n    isPromise = isType('Promise'),\r\n\r\n    /**\r\n     * Checks if given `x` is one of the four\r\n     * \"usable\" immutable JS primitives; I.e.,\r\n     *  One of [String, Boolean, Number, Symbol]\r\n     * @function module:is.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return [_String, _Number, _Boolean, _Symbol]\r\n            .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => length(x) === 0,\r\n\r\n    /**\r\n     * Checks if objectOps has own properties/enumerable-props or not.\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in argument is empty.\r\n     * @function module:is.empty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        let typeOfValue = typeOf(value),\r\n            retVal;\r\n\r\n        if (!value) { // '', 0, `null`, `undefined` or `false` then is empty\r\n            retVal = true;\r\n        }\r\n        else if (typeOfValue === _Array || typeOfValue === _Function) {\r\n            retVal = isEmptyList(value);\r\n        }\r\n        else if (typeOfValue === _Number && value !== 0) {\r\n            retVal = false;\r\n        }\r\n        else if (typeOfValue === _Object) {\r\n            retVal = isEmptyObject(value);\r\n        }\r\n        else if (hasOwnProperty('size', value)) {\r\n            retVal = isEmptyCollection(value);\r\n        }\r\n        else {\r\n            retVal = !value;\r\n        }\r\n        return retVal;\r\n    },\r\n\r\n    /**\r\n     * Returns true if an element is not empty and is of type.\r\n     * @function module:is.notEmptyAndOfType\r\n     * @param type {String|Function} - Type to check against (stringOps name or actual constructor).\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    notEmptyAndOfType = curry((type, value) => !isEmpty(value) && isType(type, value)),\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null.\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => !isNull(x) && !isUndefined(x);\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n * @memberOf functionOps\r\n */\r\nimport {curry} from './curry';\r\n\r\nimport {apply as pureApply} from '../uncurried/jsPlatform/functionUncurried';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` functionOps (takes no context).\r\n     * @function module:functionOps.apply\r\n     * @param fn {Function}\r\n     * @param args {*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry(pureApply);\r\n","import {isFunction, isUsableImmutablePrimitive, isset} from './is';\r\nimport {hasOwnProperty} from '../uncurried/jsPlatform/objectUncurried';\r\nimport {apply} from   '../functionOps/apply';\r\n\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","import {typeOf} from  '../objectOps/objectOpsUncurried';\r\n\r\nexport const\r\n\r\n    aggregateStr = (agg, item) => agg + item,\r\n\r\n    aggregateArr = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    },\r\n\r\n    aggregateObj = (agg, item, ind) => {\r\n        agg[ind] = item;\r\n        return agg;\r\n    },\r\n\r\n    aggregatorByType = x => {\r\n        switch (typeOf(x)) {\r\n            case 'String': return aggregateStr;\r\n            case 'Array': return aggregateArr;\r\n            case 'Object':\r\n            default: return aggregateObj;\r\n        }\r\n    };\r\n","import {of} from   '../../objectOps/of';\r\n\r\nimport {aggregatorByType}   from './listOpsUncurriedAggregation';\r\n\r\nimport {length}              from '../jsPlatform/objectUncurried';\r\n\r\n/**\r\n * @function module:listOps.map\r\n * @param fn {Function} - Function to map on functor item(s).\r\n * @param xs {Array|String|*} - Functor.\r\n * @returns {Array|String|*} - Functor type that is passed in.\r\n */\r\nexport const map = (fn, xs) => {\r\n    let ind = 0,\r\n        limit = length(xs),\r\n        out = of(xs),\r\n        aggregate = aggregatorByType(xs);\r\n    if (!limit) { return out; }\r\n    for (; ind < limit; ind += 1) {\r\n        out = aggregate(out, fn(xs[ind], ind, xs), ind, xs);\r\n    }\r\n    return out;\r\n};\r\n","/**\r\n * Array operators module.\r\n * @module listOpsUtils\r\n */\r\nimport {apply}              from '../jsPlatform/functionUncurried';  // un-curried version\r\nimport {slice}              from '../jsPlatform/listUncurried';      // un-curried version good for both strings and arrays\r\nimport {length}             from '../jsPlatform/objectUncurried';\r\nimport {alwaysFalse}        from   '../../booleanOps/booleanOps';\r\nimport {map}                from './map';\r\n\r\nexport * from './listOpsUncurriedAggregation';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @param startInd {Number}\r\n     * @param arr {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = (startInd, arr) => slice(startInd, length(arr), arr),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @module module:listOpsUncurried.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = (toInd, xs) => slice(0, toInd, xs),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    copy = xs => sliceFrom(0, xs),\r\n\r\n    genericAscOrdering = (a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = (...lists) => length(lists) ? map(length, lists) : [],\r\n\r\n    lengthsToSmallest = (...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : copy(list), lists);\r\n    },\r\n\r\n    reduceUntil = (pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    reduceRightUntil = (pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    reduce = (operation, agg, arr) =>\r\n        reduceUntil(\r\n            alwaysFalse,            // predicate\r\n            operation,              // operation\r\n            agg,                    // aggregator\r\n            arr),                   // list\r\n\r\n    reduceRight = (operation, agg, arr) =>\r\n        reduceRightUntil(\r\n            alwaysFalse,            // predicate\r\n            operation,              // operation\r\n            agg,                    // aggregator\r\n            arr),                   // list\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:listOps.lastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:listOps.findIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = (pred, arr) => {\r\n        let ind = -1,\r\n            predicateFulfilled = false;\r\n        const limit = length(arr);\r\n        while (ind < limit && !predicateFulfilled) {\r\n            predicateFulfilled = pred(arr[++ind], ind, arr);\r\n        }\r\n        return ind;\r\n    },\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:listOps.findIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = (pred, arr) => {\r\n        const limit = length(arr);\r\n        let ind = limit,\r\n            predicateFulfilled = false;\r\n        for (; ind >= 0 && !predicateFulfilled; --ind) {\r\n            predicateFulfilled = pred(arr[ind], ind, arr);\r\n        }\r\n        return ind;\r\n    },\r\n\r\n    /**\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = (pred, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) { return undefined; }\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * @function module:listOps.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = (pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    }\r\n;\r\n","/**\r\n * 'Uncurried' list operators.\r\n * @module listOpsUncurried\r\n * @todo decide whether to throw errors where functions cannot function without a specific type or to return undefined (and also determine which cases are ok for just returning undefined).\r\n * @todo code unperformant shorthand in `listOps`\r\n * @todo rename monoid functions to normal functions since we are not really defining methods for monoids here.\r\n */\r\nimport {\r\n    concat as listAppend,\r\n    indexOf, slice, includes\r\n} from '../jsPlatform/listUncurried';\r\nimport {apply} from '../jsPlatform/functionUncurried';\r\nimport {negateF} from '../functionOps/negate';\r\nimport {negateP} from '../functionOps/functionOpsUncurried';\r\nimport {isTruthy, isFalsy} from '../../booleanOps/booleanOps';\r\nimport {isString, prop, of, length} from '../objectOps/objectOpsUncurried';\r\nimport {map} from './map';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    lengthsToSmallest, aggregateArr, aggregatorByType,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, copy, genericAscOrdering\r\n} from './listOpsUncurriedUtils';\r\n\r\n// Exported imports\r\nexport {length, map};\r\n\r\n// Exported internals\r\nexport const\r\n\r\n    /**\r\n     * Append two lists, i.e.,\r\n     * ```\r\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\r\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\r\n     * ```\r\n     * If the first list is not finite, the result is the first list.\r\n     * @haskellType `append :: List a => a -> a -> a`\r\n     * @function module:listOpsUncurried.append\r\n     * @param xs1 {Array|String|*} - list or list like.\r\n     * @param xs2 {Array|String|*} - list or list like.\r\n     * @returns {Array|String|*} - Same type as list like passed in.\r\n     */\r\n    append = listAppend,\r\n\r\n    /**\r\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\r\n     * @haskellType `appendMany :: List a => a -> [a] -> a\r\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\r\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\r\n     * @function module:listOpsUncurried.appendMany\r\n     * @param args ...{Array|String|*} - Lists or lists likes.\r\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\r\n     */\r\n    appendMany = (...args) => {\r\n        if (length(args)) { return apply(listAppend, args); }\r\n        throw new Error('`appendMany` requires at least one arg.');\r\n    },\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:listOpsUncurried.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:listOpsUncurried.last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:listOpsUncurried.tail\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:listOpsUncurried.init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:listOpsUncurried.uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    uncons = xs => {\r\n        if (!xs) {\r\n            return;\r\n        }\r\n        if (length(xs) === 0) {\r\n            return undefined;\r\n        }\r\n        return [head(xs), tail(xs)];\r\n    },\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:listOpsUncurried.unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    unconsr = xs => {\r\n        if (!xs) {\r\n            return;\r\n        }\r\n        if (length(xs) === 0) {\r\n            return undefined;\r\n        }\r\n        return [init(xs), last(xs)];\r\n    },\r\n\r\n    /**\r\n     * Returns whether a list is empty or not.\r\n     * @note not to be mistaken with module:objectOps.isEmpty;\r\n     *  `objectOps.isEmpty` Checks any passed in type for empty;\r\n     *  `listOps.isEmpty` only checks if length on passed in\r\n     *  value is not truthy.\r\n     *  In typed languages this would be all we\r\n     *  need do due to assuming that only lists make it into our\r\n     *  function but in javascript this is loose and in order\r\n     *  to the function to perform well under load and\r\n     *  for it to follow the specification we are not allowed\r\n     *  to type check in it.\r\n     * @note Will keep it like this for now.\r\n     * @function module:listOpsUncurried.isEmpty\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = x => !length(x),\r\n\r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:listOpsUncurried.concat\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    concat = xs => {\r\n        if (!length(xs)) { return copy(xs); }\r\n        return isString(xs) ? xs : apply(appendMany, xs);\r\n    },\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:listOpsUncurried.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    concatMap = (fn, foldableOfA) => concat(map(fn, foldableOfA)),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:listOpsUncurried.reverse\r\n     * @param x {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    reverse = x => {\r\n        const aggregator = aggregatorByType(x);\r\n        return reduceRight(\r\n            (agg, item, ind) => aggregator(agg, item, ind),\r\n            of(x), x\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:listOpsUncurried.intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array|String|*} - List.\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersperse = (between, arr) => {\r\n        const limit = length(arr),\r\n            lastInd = limit - 1,\r\n            aggregator = of(arr),\r\n            aggregatorOp = aggregatorByType(arr);\r\n        if (!limit) {\r\n            return aggregator;\r\n        }\r\n        return foldl((agg, item, ind) => {\r\n            return ind === lastInd ?\r\n                aggregatorOp(agg, item) :\r\n                aggregatorOp(\r\n                    aggregatorOp(agg, item),\r\n                    between\r\n                );\r\n        }, aggregator, arr);\r\n    },\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:listOpsUncurried.intercalate\r\n     * @param xs {Array|String|*}\r\n     * @param xss {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intercalate = (xs, xss) => concat(intersperse(xs, xss)),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @todo upgrade this function to support lists of strings.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:listOpsUncurried.transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return of(xss);\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return filter(x => length(x), outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:listOpsUncurried.subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    subsequences = xs => {\r\n        const len = Math.pow(2, length(xs)),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            const entry = [];\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    permutations = xs => [xs],\r\n\r\n    foldl = reduce,\r\n\r\n    foldr = reduceRight,\r\n\r\n    foldl1 = (op, xs) => {\r\n        const parts = uncons(xs);\r\n        if (!parts) {\r\n            return of(xs);\r\n        }\r\n        return reduce(op, parts[0], parts[1]);\r\n    },\r\n\r\n    foldr1 = (op, xs) => {\r\n        const parts = unconsr(xs);\r\n        if (!parts) {\r\n            return of(xs);\r\n        }\r\n        return reduceRight(op, parts[1], parts[0]);\r\n    },\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOpsUncurried.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = (op, zero, xs) => {\r\n        const list = sliceFrom(0, xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = of(xs),\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    },\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOpsUncurried.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = (op, zero, xs) => {\r\n        const list = sliceFrom(0, xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = of(xs),\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    },\r\n\r\n    /**\r\n     * Iterate on value (`x`) with `op` up to `limit`.\r\n     * @function module:listOpsUncurried.iterate\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = (limit, op, x) => {\r\n        let ind = 0,\r\n            out = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out = op(out, ind);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times\r\n     * @function module:listOpsUncurried.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    repeat = (limit, x) =>\r\n        iterate(limit, agg => {\r\n            agg.push(x);\r\n            return agg;\r\n        }, []),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:listOpsUncurried.replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    replicate = repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:listOpsUncurried.cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    cycle = (limit, xs) => concat(replicate(limit, xs)),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:listOpsUncurried.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = (op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:listOpsUncurried.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:listOpsUncurried.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:listOpsUncurried.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = (x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    },\r\n\r\n    /**\r\n     * @function module:listOpsUncurried.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = (value, xs) => findIndices(x => x === value, xs),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:listOpsUncurried.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = (limit, list) => sliceTo(limit, list),\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:listOpsUncurried.take\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = (count, list) => sliceFrom(count, list),\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:listOpsUncurried.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String|*} - functor (list or string) to split.\r\n     * @returns {Array} - Array of whatever type `x` was when passed in\r\n     */\r\n    splitAt = (ind, list) => [\r\n        sliceTo(ind, list),\r\n        sliceFrom(ind, list)\r\n    ],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:listOpsUncurried.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = (pred, list) => {\r\n        let zero = of(list);\r\n        const operation = aggregatorByType(list);\r\n        return reduceUntil(\r\n            negateP(pred),  // predicate\r\n            operation,      // operation\r\n            zero,           // aggregator\r\n            list\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:listOpsUncurried.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = (pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    },\r\n\r\n    /**\r\n     * @function module:listOpsUncurried.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = (pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhereRight((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            sliceTo(splitPoint + 1, list);\r\n    },\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @function module:listOpsUncurried.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array|String|*} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    span = (pred, list) => {\r\n        const splitPoint = findIndexWhere(negateP(pred), list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    },\r\n\r\n    breakOnList = (pred, list) => {\r\n        const splitPoint = findIndexWhere(pred, list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    },\r\n\r\n    /**\r\n     * @function module:listOpsUncurried.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    at = prop,\r\n\r\n    /**\r\n     * @function module:listOpsUncurried.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    find = findWhere,\r\n\r\n    filter = (pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            aggregator = aggregatorByType(xs),\r\n            out = of(xs);\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out = aggregator(out, xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\r\n     * @function module:listOpsUncurried.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = (pred, list) => {\r\n        if (!length(list)) {\r\n            return [of(list), of(list)];\r\n        }\r\n        return [filter(pred, list), filter(negateP(pred), list)];\r\n    },\r\n\r\n    elem = includes,\r\n\r\n    notElem = negateF(includes),\r\n\r\n    lookup = at,\r\n\r\n    isPrefixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    isSuffixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    isInfixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    isSubsequenceOf = (xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:listOpsUncurried.group\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    group = xs => groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:listOpsUncurried.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {*}\r\n     */\r\n    groupBy = (equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return sliceFrom(0, xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    },\r\n\r\n    inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg = aggregateArr(agg, sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => init(list), xs),\r\n\r\n    tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg = aggregateArr(agg, slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => tail(list), xs),\r\n\r\n    stripPrefix = (prefix, list) =>\r\n        isPrefixOf(prefix, list) ?\r\n            splitAt(length(prefix), list)[1] :\r\n            sliceFrom(0, list),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:listOpsUncurried.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = (arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return of(arr1);\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    },\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:listOpsUncurried.zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    zipN = (...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, filter(length, lists)),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:listOpsUncurried.zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip3 = zipN,\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:listOpsUncurried.zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip4 = zipN,\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:listOpsUncurried.zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip5 = zipN,\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:listOpsUncurried.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = (op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return of(xs1);\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    },\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:listOpsUncurried.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = (op, ...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, apply(op, map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:listOpsUncurried.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = zipWithN,\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:listOpsUncurried.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = zipWithN,\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:listOpsUncurried.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @param xs5 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = zipWithN,\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:listOpsUncurried.unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    unzip = arr =>\r\n        foldl((agg, item) => {\r\n            agg[0].push(item[0]);\r\n            agg[1].push(item[1]);\r\n            return agg;\r\n        }, [[], []], arr),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:listOpsUncurried.unzip\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    any = (p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    all = (p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (limit === 0) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    and = xs => all(isTruthy, xs),\r\n\r\n    or = xs => any(isTruthy, xs),\r\n\r\n    not = xs => all(isFalsy, xs),\r\n\r\n    sum = list => foldl((agg, x) => agg + x, 0, list),\r\n\r\n    product = arr => foldl((agg, x) => agg * x, 1, arr),\r\n\r\n    maximum = list => maximumBy(genericAscOrdering, list),\r\n\r\n    minimum = list => minimumBy(genericAscOrdering, list),\r\n\r\n    maximumBy = (ordering, xs) => last(sortBy(ordering, xs)),\r\n\r\n    minimumBy = (ordering, xs) => head(sortBy(ordering, xs)),\r\n\r\n    scanl = () => null,\r\n\r\n    scanl1 = () => null,\r\n\r\n    scanr = () => null,\r\n\r\n    scanr1 = () => null,\r\n\r\n    nub = list => nubBy((a, b) => a === b, list),\r\n\r\n    remove = (x, list) => removeBy((a, b) => a === b, x, list),\r\n\r\n    sort = xs => sortBy(genericAscOrdering, xs),\r\n\r\n    sortOn = (valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            sortBy(\r\n                // Ordering\r\n                (a1, b1) => {\r\n                    let a = a1[0],\r\n                        b = b1[0];\r\n                    if (a > b) {\r\n                        return 1;\r\n                    }\r\n                    else if (a < b) {\r\n                        return -1;\r\n                    }\r\n                    return 0;\r\n                },\r\n\r\n                // Decorate\r\n                map(item => [valueFn(item), item], xs)\r\n            )\r\n        ),\r\n\r\n    sortBy = (orderingFn, xs) => copy(xs).sort(orderingFn),\r\n\r\n    insert = (x, xs) => {\r\n        if (isEmpty(xs)) {\r\n            return aggregatorByType(xs)(copy(xs), x, 0);\r\n        }\r\n        let out = of(xs),\r\n            foundIndex = findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? append(sliceFrom(0, out), x) :\r\n            concat(intersperse([x], splitAt(foundIndex, xs)));\r\n    },\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:listOpsUncurried.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` === // something that is order-able\r\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array|String|*} - List to insert into (note new list is returned)\r\n     * @returns {Array|String|*} - New list.\r\n     */\r\n    insertBy = (orderingFn, x, xs) => {\r\n        const limit = length(xs),\r\n            aggregator = aggregatorByType(xs),\r\n            out = of(xs);\r\n        if (isEmpty(xs)) {\r\n            return aggregator(out, x, 0);\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = splitAt(ind, xs);\r\n                // Fold parts[0], [x], parts[1] into `out` and `concat`\r\n                return concat(foldl(aggregator, out, [parts[0], [x], parts[1]]));\r\n            }\r\n        }\r\n        return aggregator(copy(xs), x);\r\n    },\r\n\r\n    nubBy = (pred, list) => {\r\n        if (isEmpty(list)) {\r\n            return of(list);\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = of(list),\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out = append(out, currItem);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    removeBy = (pred, x, list) => { // @todo optimize this implementation\r\n        const foundIndex = findIndex(item => pred(x, item), list),\r\n            parts = splitAt(foundIndex > -1 ? foundIndex : 0, list); // @todo correct this implementation\r\n        return append(parts[0], tail(parts[1]));\r\n    },\r\n\r\n    removeFirstsBy = (pred, xs1, xs2) =>\r\n        foldl((agg, item) => removeBy(pred, item, agg), xs1, xs2),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:listOpsUncurried.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    unionBy = (pred, arr1, arr2) => {\r\n        const aggregator = aggregatorByType(arr1);\r\n        return foldl((agg, b) => {\r\n            const alreadyAdded = any(a => pred(a, b), agg);\r\n            return !alreadyAdded ? aggregator(agg, b) : agg;\r\n        }, copy(arr1), arr2);\r\n    },\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:listOpsUncurried.union\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    union = (arr1, arr2) =>\r\n        append(arr1,\r\n            filter(elm => !includes(elm, arr1), arr2)),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:listOpsUncurried.intersect\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersect = (arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            filter(elm => includes(elm, arr2), arr1),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:listOpsUncurried.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array|String|*}\r\n     * @param list2 {Array|String|*}\r\n     * @return {Array|String|*}\r\n     */\r\n    intersectBy = (pred, list1, list2) => {\r\n        const aggregator = aggregatorByType(list1);\r\n        return foldl((agg, a) =>\r\n                any(b => pred(a, b), list2) ? aggregator(agg, a) : agg\r\n            , [], list1);\r\n    },\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:listOpsUncurried.difference\r\n     * @param array1 {Array|String|*}\r\n     * @param array2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    difference = (array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return sliceFrom(0, array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        const aggregator = aggregatorByType(array1);\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? aggregator(agg, elm) : agg\r\n            , [], array1);\r\n    },\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:listOpsUncurried.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = (arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays);\r\n","import {assignDeep} from './assignDeep';\r\nimport {hasOwnProperty, keys} from '../jsPlatform/objectUncurried';\r\nimport {foldl} from   '../listOps/listOpsUncurried';\r\n\r\nexport const\r\n\r\n    objUnion = (obj1, obj2) => assignDeep(obj1, obj2),\r\n\r\n    objIntersect = (obj1, obj2) => foldl((agg, key) => {\r\n        if (hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1)),\r\n\r\n    objDifference = (obj1, obj2) => foldl((agg, key) => {\r\n        if (!hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1)),\r\n\r\n    objComplement = (obj0, ...objs) => foldl((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs);\r\n","import {curry, curry2} from   '../functionOps/curry';\r\n\r\nimport {\r\n    instanceOf as pureInstanceOf,\r\n    hasOwnProperty as pureHasOwnProperty,\r\n    assign as pureAssign\r\n} from '../uncurried/jsPlatform/objectUncurried';\r\n\r\nimport {assignDeep as pureAssignDeep} from   '../uncurried/objectOps/assignDeep';\r\n\r\nexport {length, toString, keys} from '../uncurried/jsPlatform/objectUncurried';\r\n\r\nexport const\r\n\r\n    instanceOf = curry(pureInstanceOf),\r\n\r\n    hasOwnProperty = curry(pureHasOwnProperty),\r\n\r\n    assign = curry2(pureAssign),\r\n\r\n    assignDeep = curry2(pureAssignDeep);\r\n\r\nexport * from  '../uncurried/objectOps/typeOf';\r\n\r\nexport * from  '../uncurried/objectOps/is';\r\n\r\nexport * from  '../uncurried/objectOps/of';\r\n\r\nexport * from  '../uncurried/objectOps/setTheoryOps';\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n * @memberOf functionOps\r\n */\r\nimport {curry2} from './curry';\r\n\r\nimport {call as pureCall} from '../uncurried/jsPlatform/functionUncurried';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:functionOps.call\r\n     * @param fn {Function}\r\n     * @param args {*}\r\n     * @returns {*}\r\n     */\r\n    call = curry2(pureCall);\r\n","/**\r\n * List operators.\r\n * @module listOps\r\n * @todo decide whether to throw errors where functions cannot function without a specific type or to\r\n *  return undefined (and also determine which cases are ok for just returning undefined).\r\n * @todo code unperformant shorthand in `listOps`\r\n * @todo rename monoid functions to normal functions since we are not really defining methods for monoids here.\r\n */\r\nimport {curry, curry2} from   '../uncurried/functionOps/functionOpsUncurried';\r\n\r\n// Uncurried methods import\r\nimport {\r\n    append as _append, appendMany as _appendMany, all as _all, and as _and, or as _or, any as _any, find as _find,\r\n    findIndex as _findIndex, findIndices as _findIndices, zip as _zip, zipN as _zipN, zipWith as _zipWith,\r\n    unzip as _unzip, unzipN as _unzipN, map as _map, mapAccumL as _mapAccumL, mapAccumR as _mapAccumR, zipWithN as _zipWithN,\r\n    elem as _elem, notElem as _notElem, elemIndex as _elemIndex, elemIndices as _elemIndices, lookup as _lookup,\r\n    head as _head, last as _last, init as _init, tail as _tail, uncons as _uncons, length as _length,\r\n    reverse as _reverse, intersperse as _intersperse, intercalate as _intercalate, transpose as _transpose,\r\n    subsequences as _subsequences, permutations as _permutations, isEmpty as _isEmpty, iterate as _iterate,\r\n    repeat as _repeat, replicate as _replicate, cycle as _cycle, take as _take, drop as _drop, splitAt as _splitAt,\r\n    foldl as _foldl, foldl1 as _foldl1, foldr as _foldr, foldr1 as _foldr1, unfoldr as _unfoldr, concat as _concat,\r\n    concatMap as _concatMap, takeWhile as _takeWhile, dropWhile as _dropWhile, dropWhileEnd as _dropWhileEnd,\r\n    partition as _partition, at as _at, span as _span, breakOnList as _breakOnList, stripPrefix as _stripPrefix,\r\n    group as _group, inits as _inits, tails as _tails, isPrefixOf as _isPrefixOf, isSuffixOf as _isSuffixOf,\r\n    isInfixOf as _isInfixOf, isSubsequenceOf as _isSubsequenceOf, filter as _filter, sum as _sum, product as _product,\r\n    maximum as _maximum, maximumBy as _maximumBy, minimum as _minimum, minimumBy as _minimumBy, nub as _nub,\r\n    remove as _remove, insert as _insert, insertBy as _insertBy, nubBy as _nubBy, removeBy as _removeBy,\r\n    removeFirstsBy as _removeFirstsBy, unionBy as _unionBy, sort as _sort, sortOn as _sortOn, sortBy as _sortBy,\r\n    complement as _complement, difference as _difference, union as _union, intersect as _intersect,\r\n    intersectBy as _intersectBy, groupBy as _groupBy\r\n}\r\n    from   '../uncurried/listOps/listOpsUncurried';\r\n\r\n// Single arity methods (and single or more arg functions)\r\nexport {\r\n    and, or, zipN, unzip, unzipN, head, last, init, tail, uncons, isEmpty, concat, length, reverse, transpose, subsequences,\r\n    permutations, group, inits, tails, sum, product, maximum, minimum, sort, nub\r\n}\r\n    from   '../uncurried/listOps/listOpsUncurried';\r\n\r\n// Uncurried methods export\r\nexport {\r\n    _append, _appendMany, _all, _and, _or, _any, _find, _findIndex, _findIndices, _zip, _zipN, _zipWith,\r\n    _unzip, _unzipN, _map, _mapAccumL, _mapAccumR, _elem, _notElem, _elemIndex, _elemIndices, _lookup,\r\n    _head, _last, _init, _tail, _uncons, _length, _reverse, _intersperse, _intercalate, _transpose,\r\n    _subsequences, _permutations, _isEmpty, _iterate, _repeat, _replicate, _cycle, _take,\r\n    _drop, _splitAt, _foldl, _foldl1, _foldr, _foldr1, _unfoldr, _concat, _concatMap, _takeWhile, _dropWhile,\r\n    _dropWhileEnd, _partition, _at, _span, _breakOnList, _stripPrefix, _group, _inits, _tails, _isPrefixOf,\r\n    _isSuffixOf, _isInfixOf, _isSubsequenceOf, _filter, _sum, _product, _maximum, _maximumBy, _minimum, _minimumBy,\r\n    _nub, _remove, _insert, _insertBy, _nubBy, _removeBy, _removeFirstsBy, _unionBy, _sort, _sortOn, _sortBy,\r\n    _complement, _difference, _union, _intersect, _intersectBy, _groupBy\r\n};\r\n\r\n// Exported internals\r\nexport const\r\n\r\n    /**\r\n     * Append two lists, i.e.,\r\n     * ```\r\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\r\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\r\n     * ```\r\n     * If the first list is not finite, the result is the first list.\r\n     * @haskellType `append :: List a => a -> a -> a`\r\n     * @function module:listOps.append\r\n     * @param xs1 {Array|String|*} - list or list like.\r\n     * @param xs2 {Array|String|*} - list or list like.\r\n     * @returns {Array|String|*} - Same type as list like passed in.\r\n     */\r\n    append = curry(_append),\r\n\r\n    /**\r\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\r\n     * @haskellType `appendMany :: List a => a -> [a] -> a\r\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\r\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\r\n     * @function module:listOps.appendMany\r\n     * @param x {Array|String|*}\r\n     * @param args ...{Array|String|*} - Lists or lists likes.\r\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\r\n     */\r\n    appendMany = curry2(_appendMany),\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:listOps.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    concatMap = curry2(_concatMap),\r\n\r\n    /**\r\n     * @function module:listOps.map\r\n     * @param fn {Function} - Function to map on functor item(s).\r\n     * @param xs {Array|String|*} - Functor.\r\n     * @returns {Array|String|*} - Functor type that is passed in.\r\n     */\r\n    map = curry(_map),\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:listOps.intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array|String|*} - List.\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersperse = curry(_intersperse),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:listOps.intercalate\r\n     * @param xs {Array|String|*}\r\n     * @param xss {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intercalate = curry(_intercalate),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:listOps.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array|String|*}\r\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\r\n     */\r\n    foldl = curry(_foldl),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from right to left with passed in function.\r\n     * @function module:listOps.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\r\n     */\r\n    foldr = curry(_foldr),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:listOps.foldl1\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*}\r\n     */\r\n    foldl1 = curry(_foldl1),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from right to left with passed in function.\r\n     * @function module:listOps.foldr1\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*}\r\n     */\r\n    foldr1 = curry(_foldr1),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOps.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry(_mapAccumL),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOps.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry(_mapAccumR),\r\n\r\n    /**\r\n     * Iterate on value (`x`) with `op` up to `limit`.\r\n     * @function module:listOps.iterate\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry(_iterate),\r\n\r\n    repeat = curry(_repeat),\r\n\r\n    replicate = repeat,\r\n\r\n    cycle = curry(_cycle),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:listOps.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry(_unfoldr),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:listOps.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = curry(_findIndex),\r\n\r\n    /**\r\n     * @function module:listOps.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = curry(_findIndices),\r\n\r\n    /**\r\n     * @function module:listOps.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry(_elemIndex),\r\n\r\n    /**\r\n     * @function module:listOps.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry(_elemIndices),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:listOps.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = curry(_take),\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:listOps.take\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = curry(_drop),\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:listOps.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String|*} - functor (list or string) to split.\r\n     * @returns {Array} - Array of whatever type `x` was when passed in\r\n     */\r\n    splitAt = curry(_splitAt),\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:listOps.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry(_takeWhile),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:listOps.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry(_dropWhile),\r\n\r\n    /**\r\n     * @function module:listOps.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry(_dropWhileEnd),\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @function module:listOps.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array|String|*} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    span = curry(_span),\r\n\r\n    breakOnList = curry(_breakOnList),\r\n\r\n    /**\r\n     * @function module:listOps.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    at = curry(_at),\r\n\r\n    /**\r\n     * @function module:listOps.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    find = curry(_find),\r\n\r\n    filter = curry(_filter),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\r\n     * @function module:listOps.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry(_partition),\r\n\r\n    elem = curry(_elem),\r\n\r\n    notElem = curry2(_notElem),\r\n\r\n    lookup = at,\r\n\r\n    isPrefixOf = curry(_isPrefixOf),\r\n\r\n    isSuffixOf = curry(_isSuffixOf),\r\n\r\n    isInfixOf = curry(_isInfixOf),\r\n\r\n    isSubsequenceOf = curry(_isSubsequenceOf),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:listOpsUncurried.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry(_groupBy),\r\n\r\n    stripPrefix = curry(_stripPrefix),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:listOps.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry(_zip),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:listOps.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry(_zipWith),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:listOps.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = curry2(_zipWithN),\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:listOps.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = zipWithN,\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:listOps.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = zipWithN,\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:listOps.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @param xs5 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = zipWithN,\r\n\r\n    any = curry(_any),\r\n\r\n    all = curry(_all),\r\n\r\n    maximumBy = curry(_maximumBy),\r\n\r\n    minimumBy = curry(_minimumBy),\r\n\r\n    scanl = () => null,\r\n\r\n    scanl1 = () => null,\r\n\r\n    scanr = () => null,\r\n\r\n    scanr1 = () => null,\r\n\r\n    remove = curry(_remove),\r\n\r\n    sortOn = curry(_sortOn),\r\n\r\n    sortBy = curry(_sortBy),\r\n\r\n    insert = curry(_insert),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:listOpsUncurried.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` === // something that is order-able\r\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array|String|*} - List to insert into (note new list is returned)\r\n     * @returns {Array|String|*} - New list.\r\n     */\r\n    insertBy = curry(_insertBy),\r\n\r\n    nubBy = curry(_nubBy),\r\n\r\n    removeBy = curry(_removeBy),\r\n\r\n    removeFirstsBy = curry(_removeFirstsBy),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:listOps.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    unionBy = curry(_unionBy),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:listOps.union\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    union = curry(_union),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:listOps.intersect\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersect = curry(_intersect),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:listOps.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array|String|*}\r\n     * @param list2 {Array|String|*}\r\n     * @return {Array|String|*}\r\n     */\r\n    intersectBy = curry(_intersectBy),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:listOps.difference\r\n     * @param array1 {Array|String|*}\r\n     * @param array2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    difference = curry(_difference),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:listOps.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = curry2(_complement);\r\n","/**\r\n * @memberOf functionOps\r\n */\r\nimport {foldr} from   '../listOps/listOps';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the functionOps on the left of itself.\r\n * @function module:functionOps.compose\r\n * @type {Function}\r\n * @param args {...Function}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) => arg0 => foldr((value, fn) => fn(value), arg0, args);\r\n","/**\r\n * @memberOf functionOps\r\n */\r\n\r\n/**\r\n * Negates a predicate function.\r\n * @function module:functionOps.negateP\r\n * @param fn {Function}\r\n * @returns {Function} - Negated predicate\r\n */\r\nexport const negateP = fn => (x, ind, xs) => !fn(x, ind, xs);\r\n","/**\r\n * @memberOf functionOps\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @function module:functionOps.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","/**\r\n * @memberOf functionOps\r\n */\r\nimport {reverse} from   '../listOps/listOps';\r\nimport {curry, curry3} from './curry';\r\nimport {apply} from './apply';\r\nimport {call} from './call';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Flips a functions arguments order and returns a new functionOps requiring such (arguments in reverse order).\r\n     * @function module:fnOperators.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flipN = fn => curry3((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a functionOps's first and second arguments and and returns a new functionOps requiring said arguments in reverse.\r\n     * @function module:fnOperators.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b));\r\n","/**\r\n * @memberOf functionOps\r\n */\r\nimport {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true`.\r\n     * @function module:functionOps.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = curry((predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    });\r\n","/**\r\n * Function operations: `\r\n * @module functionOps\r\n */\r\nexport {call} from './call';\r\n\r\nexport {apply} from './apply';\r\n\r\nexport {compose} from './compose';\r\n\r\nexport {curry, curryN, curry2, curry3, curry4, curry5,\r\n    __, curry_, curryN_, curry2_, curry3_, curry4_, curry5_} from './curry';\r\n\r\nexport {negateP} from './negateP';\r\n\r\nexport {id} from './id';\r\n\r\nexport {flip, flipN} from './flip';\r\n\r\nexport {until} from './until';\r\n","export const negate = x => Math.abs(x) * -1;\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from   '../../utils/utils';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:stringOpsUnCurried.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n * @module jsPlatform_string\r\n */\r\n\r\nimport {curry} from   '../functionOps/curry';\r\n\r\nimport {split as pureSplit} from '../uncurried/jsPlatform/stringUnCurried';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @curried\r\n * @function module:jsPlatform_string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = curry(pureSplit);\r\n","/**\r\n * Contains functions for operating strings.\r\n * @author elyde\r\n * @created 7/9/2017.\r\n */\r\nimport {intercalate} from   '../listOps/listOps';\r\n\r\nimport {split} from '../jsPlatform/string';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a stringOps on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:stringOps.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a stringOps on all '\\s' and/or all '\\t' characters.\r\n     * @function module:stringOps.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:stringOps.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:stringOps.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n');\r\n","/**\n * Content generated by '{project-root}/node-scripts/VersionNumberReadStream.js'.\n * Generated Thu Sep 28 2017 01:20:15 GMT-0400 (Eastern Daylight Time) \n */\n\nexport let version = '0.14.89';\n\nexport default version;\n\n","/**\r\n * Created by elyde on 12/6/2016.\r\n * @file fjl.js\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @description Includes operations from haskell's Prelude.\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n * @todo any cross importing between packages should be done from the package object (package file: E.g., './src/functionOps/functionOps.js').\r\n * @todo decide how to include 'uncurried' members in the main export of the library.\r\n * @module fjl\r\n */\r\n\r\nexport * from './objectOps/objectOps';\r\nexport * from './booleanOps/booleanOps';\r\nexport * from './functionOps/functionOps';\r\nexport * from './listOps/listOps';\r\nexport * from './numberOps/numberOps';\r\nexport * from './stringOps/stringOps';\r\n\r\nexport {version} from   '../generated-for-src/version';\r\n"],"names":["PlaceHolder","placeHolderInstance","curry","fn","argsToCurry","args","concatedArgs","concat","length","apply","isPlaceHolder","instance","replacePlaceHolders","array","out","map","element","shift","curry_","placeHolders","filter","canBeCalled","curryN_","executeArity","curriedArgs","curryN","__","Object","freeze","curry2_","curry3_","curry4_","curry5_","curry2","curry3","curry4","curry5","fPureTakesOne","arg","f","name","fPureTakes2","arg1","arg2","fPureTakesOneOrMore","instanceOf","instanceConstructor","hasOwnProperty","x","toString","keys","obj","assign","obj0","objs","reduce","topAgg","agg","key","_Number","Number","_NaN","_Null","_Undefined","_undefined","typeOf","value","retVal","constructorName","constructor","isNaN","_String","String","_Object","_Boolean","Boolean","_Function","Function","_Array","Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","isFunction","isType","type","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isPromise","isUsableImmutablePrimitive","typeOfX","some","Type","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","typeOfValue","notEmptyAndOfType","isset","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","call","of","undefined","slice","includes","prototype","xs","indexOf","lastIndexOf","reduceRight","forEach","every","join","push","negateF","a","b","negateF3","c","negateP","append","isTruthy","isFalsy","alwaysTrue","alwaysFalse","bAnd","bOr","bNot","bOtherwise","bEqual","prop","pureInstanceOf","pureApply","aggregateStr","item","aggregateArr","aggregateObj","ind","aggregatorByType","limit","aggregate","sliceFrom","startInd","arr","sliceTo","toInd","copy","genericAscOrdering","lengths","lists","lengthsToSmallest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceRightUntil","operation","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","listAppend","appendMany","Error","head","last","tail","init","uncons","unconsr","concatMap","foldableOfA","reverse","aggregator","intersperse","between","lastInd","aggregatorOp","foldl","intercalate","xss","transpose","numLists","ind2","longestListLen","maximum","outLists","outList","subsequences","pow","i","entry","j","permutations","foldr","foldl1","parts","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","repeat","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","count","splitAt","takeWhile","dropWhile","splitPoint","list2","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","lookup","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","ind1","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","lenOfTrimmed","zipWith","zipWithN","unzip","unzipN","lenItem0","any","p","all","and","or","sum","product","maximumBy","minimum","minimumBy","ordering","sortBy","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","b1","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","unionBy","alreadyAdded","union","intersect","intersectBy","list1","difference","array1","array2","complement","arr0","arrays","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","pureHasOwnProperty","pureAssign","pureAssignDeep","pureCall","_append","_appendMany","_concatMap","_map","_intersperse","_intercalate","_foldl","_foldr","_foldl1","_foldr1","_mapAccumL","_mapAccumR","_iterate","_repeat","_cycle","_unfoldr","_findIndex","_findIndices","_elemIndex","_elemIndices","_take","_drop","_splitAt","_takeWhile","_dropWhile","_dropWhileEnd","_span","_breakOnList","_at","_find","_filter","_partition","_elem","_notElem","_isPrefixOf","_isSuffixOf","_isInfixOf","_isSubsequenceOf","_groupBy","_stripPrefix","_zip","_zipWith","_zipWithN","zipWith3","zipWith4","zipWith5","_any","_all","_maximumBy","_minimumBy","scanl","scanl1","scanr","scanr1","_remove","_sortOn","_sortBy","_insert","_insertBy","_nubBy","_removeBy","_removeFirstsBy","_unionBy","_union","_intersect","_intersectBy","_difference","_complement","compose","arg0","id","flipN","flip","until","predicate","typeInstance","negate","abs","split","pureSplit","lines","words","unwords","unlines","version"],"mappings":";;;AAAA;;;;;;;;;;;;;;AAcA,IAAMA,cAAc,SAASA,WAAT,GAAuB,EAA3C;IAOIC,sBAAsB,IAAID,WAAJ,EAP1B;;;;;;;;;AAgBA,AAAO,SAASE,KAAT,CAAgBC,EAAhB,EAAoC;sCAAbC,WAAa;mBAAA;;;WAChC,YAAa;2CAATC,IAAS;gBAAA;;;YACVC,eAAeF,YAAYG,MAAZ,CAAmBF,IAAnB,CAArB;eACOC,aAAaE,MAAb,GAAsBL,GAAGK,MAAzB,GACHN,MAAMO,KAAN,CAAY,IAAZ,EAAkB,CAACN,EAAD,EAAKI,MAAL,CAAYD,YAAZ,CAAlB,CADG,GAEHH,GAAGM,KAAH,CAAS,IAAT,EAAeH,YAAf,CAFJ;KAFJ;;;;;;;;;;AAeJ,SAASI,aAAT,CAAwBC,QAAxB,EAAkC;WACvBA,oBAAoBX,WAA3B;;;;;;;;;;;AAWJ,SAASY,mBAAT,CAA8BC,KAA9B,EAAqCR,IAArC,EAA2C;QACnCS,MAAMD,MAAME,GAAN,CAAU,mBAAW;YACvB,CAACL,cAAcM,OAAd,CAAL,EAA6B;mBAClBA,OAAP;SADJ,MAGK,IAAIX,KAAKG,MAAL,GAAc,CAAlB,EAAqB;mBACfH,KAAKY,KAAL,EAAP;;eAEGD,OAAP;KAPM,CAAV;WASOX,KAAKG,MAAL,GAAc,CAAd,GAAkBM,IAAIP,MAAJ,CAAWF,IAAX,CAAlB,GAAqCS,GAA5C;;;;;;;;;;AAUJ,AAAO,SAASI,MAAT,CAAiBf,EAAjB,EAAqC;uCAAbC,WAAa;mBAAA;;;WACjC,YAAa;2CAATC,IAAS;gBAAA;;;YACZC,eAAeM,oBAAoBR,WAApB,EAAiCC,IAAjC,CAAnB;YACIc,eAAeb,aAAac,MAAb,CAAoBV,aAApB,CADnB;YAEIW,cAAcF,aAAaX,MAAb,KAAwB,CAAxB,IACVF,aAAaE,MAAb,IAAuBL,GAAGK,MAHlC;eAIOa,cAAclB,GAAGM,KAAH,CAAS,IAAT,EAAeH,YAAf,CAAd,GACHY,OAAOT,KAAP,CAAa,IAAb,EAAmB,CAACN,EAAD,EAAKI,MAAL,CAAYD,YAAZ,CAAnB,CADJ;KALJ;;;;;;;;;;;AAkBJ,AAAO,SAASgB,OAAT,CAAkBC,YAAlB,EAAgCpB,EAAhC,EAAoD;uCAAbqB,WAAa;mBAAA;;;WAChD,YAAa;2CAATnB,IAAS;gBAAA;;;YACZC,eAAeM,oBAAoBY,WAApB,EAAiCnB,IAAjC,CAAnB;YACIc,eAAeb,aAAac,MAAb,CAAoBV,aAApB,CADnB;YAEIW,cAAef,aAAaE,MAAb,GAAsBW,aAAaX,MAAnC,IAA6Ce,YAA9C,IAA+D,CAACA,YAFlF;eAGO,CAACF,WAAD,GAAeC,QAAQb,KAAR,CAAc,IAAd,EAAoB,CAACc,YAAD,EAAepB,EAAf,EAAmBI,MAAnB,CAA0BD,YAA1B,CAApB,CAAf,GACHH,GAAGM,KAAH,CAAS,IAAT,EAAeH,YAAf,CADJ;KAJJ;;;;;;;;;;;AAiBJ,AAAO,SAASmB,MAAT,CAAiBF,YAAjB,EAA+BpB,EAA/B,EAAmD;uCAAbqB,WAAa;mBAAA;;;WAC/C,YAAa;2CAATnB,IAAS;gBAAA;;;YACZC,eAAekB,YAAYjB,MAAZ,CAAmBF,IAAnB,CAAnB;YACIgB,cAAef,aAAaE,MAAb,IAAuBe,YAAxB,IAAyC,CAACA,YAD5D;eAEO,CAACF,WAAD,GAAeI,OAAOhB,KAAP,CAAa,IAAb,EAAmB,CAACc,YAAD,EAAepB,EAAf,EAAmBI,MAAnB,CAA0BD,YAA1B,CAAnB,CAAf,GACHH,GAAGM,KAAH,CAAS,IAAT,EAAeH,YAAf,CADJ;KAHJ;;;AAQJ,AAAO,IAOHoB,KAAKC,OAAOC,MAAP,GAAgBD,OAAOC,MAAP,CAAc3B,mBAAd,CAAhB,GAAqDA,mBAPvD;IAeH4B,UAAU,SAAVA,OAAU;WAAMP,QAAQ,CAAR,EAAWnB,EAAX,CAAN;CAfP;IAuBH2B,UAAU,SAAVA,OAAU;WAAMR,QAAQ,CAAR,EAAWnB,EAAX,CAAN;CAvBP;IA+BH4B,UAAU,SAAVA,OAAU;WAAMT,QAAQ,CAAR,EAAWnB,EAAX,CAAN;CA/BP;IAuCH6B,UAAU,SAAVA,OAAU;WAAMV,QAAQ,CAAR,EAAWnB,EAAX,CAAN;CAvCP;IA+CH8B,SAAS,SAATA,MAAS;WAAMR,OAAO,CAAP,EAAUtB,EAAV,CAAN;CA/CN;IAuDH+B,SAAS,SAATA,MAAS;WAAMT,OAAO,CAAP,EAAUtB,EAAV,CAAN;CAvDN;IA+DHgC,SAAS,SAATA,MAAS;WAAMV,OAAO,CAAP,EAAUtB,EAAV,CAAN;CA/DN;IAuEHiC,SAAS,SAATA,MAAS;WAAMX,OAAO,CAAP,EAAUtB,EAAV,CAAN;CAvEN;;AC5HP;;;;AAIA,AAEO,IAEHkC,gBAAgB,SAAhBA,aAAgB;WAAQ,UAACC,GAAD,EAAMC,CAAN;eAAYA,EAAEC,IAAF,EAAQF,GAAR,CAAZ;KAAR;CAFb;IAIHG,cAAc,SAAdA,WAAc;WAAQ,UAACC,IAAD,EAAOC,IAAP,EAAaJ,CAAb;eAAmBA,EAAEC,IAAF,EAAQE,IAAR,EAAcC,IAAd,CAAnB;KAAR;CAJX;IAMHC,sBAAsB,SAAtBA,mBAAsB;WAAQ,UAACL,CAAD;0CAAOlC,IAAP;gBAAA;;;eAAgBkC,EAAEC,IAAF,WAAWnC,IAAX,CAAhB;KAAR;CANnB;;ACNP;;;;;;;;AAQA,AAEO,IAUHwC,eAAa,SAAbA,UAAa,CAACC,mBAAD,EAAsBnC,QAAtB;WACTA,oBAAoBmC,mBADX;CAVV;IAmBHC,mBAAiBV,cAAc,gBAAd,CAnBd;IA4BH7B,SAAS,SAATA,MAAS;WAAKwC,EAAExC,MAAP;CA5BN;IAoCHyC,WAAW,SAAXA,QAAW;WAAKD,EAAEC,QAAF,EAAL;CApCR;IA4CHC,OAAO,SAAPA,IAAO;WAAOvB,OAAOuB,IAAP,CAAYC,GAAZ,CAAP;CA5CJ;IAqDHC,WAAU;WACNzB,OAAOyB,MAAP,GACI,UAACC,IAAD;0CAAUC,IAAV;gBAAA;;;eAAmB3B,OAAOyB,MAAP,gBAAcC,IAAd,SAAuBC,IAAvB,EAAnB;KADJ,GAEI,UAACD,IAAD;2CAAUC,IAAV;gBAAA;;;eAAmBA,KAAKC,MAAL,CAAY,UAACC,MAAD,EAASL,GAAT,EAAiB;mBACrCD,KAAKC,GAAL,EAAUI,MAAV,CAAiB,UAACE,GAAD,EAAMC,GAAN,EAAc;oBAC9BA,GAAJ,IAAWP,IAAIO,GAAJ,CAAX;uBACOD,GAAP;aAFG,EAGJD,MAHI,CAAP;SADe,EAKhBH,IALgB,CAAnB;KAHE;CAAD,EArDN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVP;;;AAGA,IAAMM,YAAUC,OAAOpB,IAAvB;IACIqB,OAAO,KADX;IAEIC,UAAQ,MAFZ;IAGIC,eAAa,WAHjB;IAIIC,aAAa,WAJjB;;;;;;;;;;AAcA,AAAO,SAASC,MAAT,CAAiBC,KAAjB,EAAwB;QACvBC,eAAJ;QACI,QAAOD,KAAP,yCAAOA,KAAP,OAAiBF,UAArB,EAAiC;iBACpBD,YAAT;KADJ,MAGK,IAAIG,UAAU,IAAd,EAAoB;iBACZJ,OAAT;KADC,MAGA;YACGM,kBAAmBF,KAAD,CAAQG,WAAR,CAAoB7B,IAA1C;iBACS4B,oBAAoBT,SAApB,IAA+BW,MAAMJ,KAAN,CAA/B,GACLL,IADK,GACEO,eADX;;WAGGD,MAAP;;;AC9BJ;;;;;;AAMA,AAIA,IAAII,UAAUC,OAAOhC,IAArB;IACImB,UAAUC,OAAOpB,IADrB;IAEIiC,UAAU9C,OAAOa,IAFrB;IAGIkC,WAAWC,QAAQnC,IAHvB;IAIIoC,YAAYC,SAASrC,IAJzB;IAKIsC,SAASC,MAAMvC,IALnB;IAMIwC,UAAU,QANd;IAOIC,OAAO,KAPX;IAQIC,OAAO,KARX;IASIC,WAAW,SATf;IAUIC,WAAW,SAVf;IAWItB,QAAQ,MAXZ;IAYIC,aAAa,WAZjB;;AAcA,AAAO,IAQHsB,aAAa,SAAbA,UAAa;WAASxC,aAAWgC,QAAX,EAAqBX,KAArB,CAAT;CARV;IAuBHoB,SAAS,SAATA,MAAS,CAACC,IAAD,EAAOpC,GAAP;WAAec,OAAOd,GAAP,OAAiBkC,WAAWE,IAAX,IAAmBA,KAAK/C,IAAxB,GAA+B+C,IAAhD,CAAf;CAvBN;IA+BHC,UAAU,SAAVA,OAAU;WAAKxC,KAAK,uBAAuByC,IAAvB,CAA4BzC,EAAEC,QAAF,GAAayC,MAAb,CAAoB,CAApB,EAAuB,EAAvB,CAA5B,CAAV;CA/BP;IAwCHC,aAAa,SAAbA,UAAa;WAAKN,WAAWrC,CAAX,KAAiB,CAACwC,QAAQxC,CAAR,CAAvB;CAxCV;IAgDH4C,UAAU,SAAVA,OAAU;WAASN,OAAOP,KAAP,EAAcb,KAAd,CAAT;CAhDP;IAwDH2B,WAAW,SAAXA,QAAW;WAASP,OAAOb,OAAP,EAAgBP,KAAhB,CAAT;CAxDR;IAgEH4B,YAAY,SAAZA,SAAY;WAASR,OAAOZ,QAAP,EAAiBR,KAAjB,CAAT;CAhET;IAwEH6B,WAAW,SAAXA,QAAW;WAAST,OAAO3B,OAAP,EAAgBO,KAAhB,CAAT;CAxER;IAgFH8B,WAAW,SAAXA,QAAW;WAASV,OAAOf,OAAP,EAAgBL,KAAhB,CAAT;CAhFR;IAwFH+B,QAAQ,SAARA,KAAQ;WAASX,OAAOL,IAAP,EAAaf,KAAb,CAAT;CAxFL;IAgGHgC,QAAQ,SAARA,KAAQ;WAASZ,OAAOJ,IAAP,EAAahB,KAAb,CAAT;CAhGL;IAwGHiC,YAAY,SAAZA,SAAY;WAASb,OAAOH,QAAP,EAAiBjB,KAAjB,CAAT;CAxGT;IAgHHkC,YAAY,SAAZA,SAAY;WAASd,OAAOF,QAAP,EAAiBlB,KAAjB,CAAT;CAhHT;IAwHHmC,cAAc,SAAdA,WAAc;WAASf,OAAOvB,UAAP,EAAmBG,KAAnB,CAAT;CAxHX;IAgIHoC,SAAS,SAATA,MAAS;WAAShB,OAAOxB,KAAP,EAAcI,KAAd,CAAT;CAhIN;IAwIHqC,WAAW,SAAXA,QAAW;WAASjB,OAAON,OAAP,EAAgBd,KAAhB,CAAT;CAxIR;IA6IHsC,YAAY,SAAZA,SAAY;WAASlB,OAAO,SAAP,EAAkBpB,KAAlB,CAAT;CA7IT;IAuJHuC,6BAA6B,SAA7BA,0BAA6B,IAAK;QACxBC,UAAUzC,OAAOjB,CAAP,CAAhB;WACO,CAACuB,OAAD,EAAUZ,OAAV,EAAmBe,QAAnB,EAA6BM,OAA7B,EACF2B,IADE,CACG;eAAQC,SAASF,OAAjB;KADH,CAAP;CAzJD;IAkKHG,cAAc,SAAdA,WAAc;WAAKrG,OAAOwC,CAAP,MAAc,CAAnB;CAlKX;IAyKH8D,gBAAgB,SAAhBA,aAAgB;WAAOD,YAAY3D,KAAKC,GAAL,CAAZ,CAAP;CAzKb;IAgLH4D,oBAAoB,SAApBA,iBAAoB;WAAK/D,EAAEgE,IAAF,KAAW,CAAhB;CAhLjB;IAwLHC,UAAU,SAAVA,OAAU,QAAS;QACXC,cAAcjD,OAAOC,KAAP,CAAlB;QACIC,eADJ;;QAGI,CAACD,KAAL,EAAY;;iBACC,IAAT;KADJ,MAGK,IAAIgD,gBAAgBpC,MAAhB,IAA0BoC,gBAAgBtC,SAA9C,EAAyD;iBACjDiC,YAAY3C,KAAZ,CAAT;KADC,MAGA,IAAIgD,gBAAgBvD,OAAhB,IAA2BO,UAAU,CAAzC,EAA4C;iBACpC,KAAT;KADC,MAGA,IAAIgD,gBAAgBzC,OAApB,EAA6B;iBACrBqC,cAAc5C,KAAd,CAAT;KADC,MAGA,IAAInB,iBAAe,MAAf,EAAuBmB,KAAvB,CAAJ,EAAmC;iBAC3B6C,kBAAkB7C,KAAlB,CAAT;KADC,MAGA;iBACQ,CAACA,KAAV;;WAEGC,MAAP;CA9MD;IAwNHgD,oBAAoB,SAApBA,iBAAoB,CAAC5B,IAAD,EAAOrB,KAAP;WAAiB,CAAC+C,QAAQ/C,KAAR,CAAD,IAAmBoB,OAAOC,IAAP,EAAarB,KAAb,CAApC;CAxNjB;IA+NHkD,QAAQ,SAARA,KAAQ;WAAK,CAACd,OAAOtD,CAAP,CAAD,IAAc,CAACqD,YAAYrD,CAAZ,CAApB;CA/NL;;ACnBA,IAQHqE,eAAa,SAAbA,UAAa,CAAChE,IAAD;sCAAUC,IAAV;YAAA;;;WACTA,KAAKC,MAAL,CAAY,UAACC,MAAD,EAASL,GAAT;eACJD,KAAKC,GAAL,EAAUI,MAAV,CAAiB,UAACE,GAAD,EAAMC,GAAN,EAAc;gBACvB4D,kBAAkB3F,OAAO4F,wBAAP,CAAgC9D,GAAhC,EAAqCC,GAArC,CAAtB;;gBAEIX,iBAAeW,GAAf,EAAoBD,GAApB,KAA4B6D,eAA5B,IACA,EAAEA,gBAAgBE,GAAhB,IAAuBF,gBAAgBG,GAAzC,CADA,IAEA,CAACH,gBAAgBI,QAFrB,EAE+B;uBACpBjE,GAAP;;gBAEAoC,SAASpC,IAAIC,GAAJ,CAAT,KAAsBmC,SAAS1C,IAAIO,GAAJ,CAAT,CAA1B,EAA8C;2BAC/BD,IAAIC,GAAJ,CAAX,EAAqBP,IAAIO,GAAJ,CAArB;aADJ,MAGK;oBAAMA,GAAJ,IAAWP,IAAIO,GAAJ,CAAX;;mBACAD,GAAP;SAZJ,EAaGD,MAbH,CADI;KAAZ,EAeMH,IAfN,CADS;CARV;;ACLP;;;AAGA,AAAO,IASH5C,QAAQ,SAARA,KAAQ,CAACN,EAAD,EAAKE,IAAL;SAAcF,GAAGM,KAAH,CAAS,IAAT,EAAeJ,IAAf,CAAd;CATL;IAkBHsH,OAAO,SAAPA,IAAO,CAACxH,EAAD;oCAAQE,IAAR;QAAA;;;SAAiBI,MAAMN,EAAN,EAAUE,IAAV,CAAjB;CAlBJ;;ACHP;;;;;;;;;;;;ACIO,IAAMuH,KAAK,SAALA,EAAK,CAAC5E,CAAD,EAAgB;sCAAT3C,IAAS;YAAA;;;QAC1B,CAAC+G,MAAMpE,CAAN,CAAL,EAAe;eAAS6E,SAAP;;QACXxD,cAAcrB,EAAEqB,WAAtB;QACItB,iBAAe,IAAf,EAAqBsB,WAArB,CAAJ,EAAuC;eAC5B5D,MAAM4D,YAAYuD,EAAlB,EAAsBvH,IAAtB,CAAP;KADJ,MAGK,IAAIoG,2BAA2BzD,CAA3B,CAAJ,EAAmC;eAC7BvC,MAAM4D,WAAN,EAAmBhE,IAAnB,CAAP;KADC,MAGA,IAAIgF,WAAWhB,WAAX,CAAJ,EAA6B;kDACnBA,WAAX,gBAA0BhE,IAA1B;;WAEGwH,SAAP;CAZG;;ACJP;;;;;AAKA,AAEA;;AAEA,AAAO,IAKHtH,WAASqC,oBAAoB,QAApB,CALN;IAUHkF,QAAQrF,YAAY,OAAZ,CAVL;IAmBHsF,WAAY;SAAM,cAAchD,MAAMiD,SAApB,GACV3F,cAAc,UAAd,CADU,GAEV,UAAC6B,KAAD,EAAQ+D,EAAR;WAAeA,GAAGC,OAAH,CAAWhE,KAAX,IAAoB,CAAC,CAApC;GAFI;CAAD,EAnBR;IA8BHgE,UAAU7F,cAAc,SAAd,CA9BP;IAuCH8F,cAAc9F,cAAc,aAAd,CAvCX;;ACTP;;;;;;;AAOA,AAEO,IAqBHtB,MAAMsB,cAAc,KAAd,CArBH;IA8BHjB,WAASiB,cAAc,QAAd,CA9BN;IAuCHkB,SAASd,YAAY,QAAZ,CAvCN;IAgDH2F,cAAc3F,YAAY,aAAZ,CAhDX;IAyDH4F,UAAUhG,cAAc,SAAd,CAzDP;IAmEHsE,OAAOtE,cAAc,MAAd,CAnEJ;IA4EHiG,QAAQjG,cAAc,OAAd,CA5EL;IAsFH9B,WAASqC,oBAAoB,QAApB,CAtFN;IA+FH2F,OAAOlG,cAAc,MAAd,CA/FJ;IAuGHyF,UAAQrF,YAAY,OAAZ,CAvGL;IA+GH+F,OAAO5F,oBAAoB,MAApB,CA/GJ;;ACTP;;;;AAIA,AAIO,IAEH6F,UAAU,SAAVA,OAAU;WAAM,UAACC,CAAD,EAAIC,CAAJ;eAAU,CAACxI,GAAGuI,CAAH,EAAMC,CAAN,CAAX;KAAN;CAFP;IAIHC,WAAW,SAAXA,QAAW;WAAM,UAACF,CAAD,EAAIC,CAAJ,EAAOE,CAAP;eAAa,CAAC1I,GAAGuI,CAAH,EAAMC,CAAN,EAASE,CAAT,CAAd;KAAN;CAJR;IAgBHC,UAAUF,QAhBP;;ACRP;;;;;;;;;;;;ACEA;;;;;;;;;ACFA;;;;;;;AAOA,AAIO,IASH1I,UAAQ,SAARA,KAAQ,CAACC,EAAD,EAAwB;sCAAhBC,WAAgB;mBAAA;;;WACrB,YAAa;2CAATC,IAAS;gBAAA;;;YACVC,eAAeyI,OAAO3I,WAAP,EAAoBC,IAApB,CAArB;eACOG,OAAOF,YAAP,IAAuBE,OAAOL,EAAP,CAAvB,GACHM,MAAMP,KAAN,EAAa6I,OAAO,CAAC5I,EAAD,CAAP,EAAaG,YAAb,CAAb,CADG,GAEHG,MAAMN,EAAN,EAAUG,YAAV,CAFJ;KAFJ;CAVD;IA0BHmB,WAAS,SAATA,MAAS,CAACF,YAAD,EAAepB,EAAf,EAAsC;uCAAhBqB,WAAgB;mBAAA;;;WACpC,YAAa;2CAATnB,IAAS;gBAAA;;;YACZC,eAAeyI,OAAOvH,WAAP,EAAoBnB,IAApB,CAAnB;YACIgB,cAAeb,OAAOF,YAAP,KAAwBiB,YAAzB,IAA0C,CAACA,YAD7D;eAEO,CAACF,WAAD,GAAeZ,MAAMgB,MAAN,EAAcsH,OAAO,CAACxH,YAAD,EAAepB,EAAf,CAAP,EAA2BG,YAA3B,CAAd,CAAf,GACHG,MAAMN,EAAN,EAAUG,YAAV,CADJ;KAHJ;CA3BD;IAyCH2B,WAAS,SAATA,MAAS;WAAMR,SAAO,CAAP,EAAUtB,EAAV,CAAN;CAzCN;;ACXP;;;;;;;;;AASA,AAIA;;;;;AAKA,IAAMH,gBAAc,SAASA,WAAT,GAAuB,EAA3C;IAMIC,wBAAsB,IAAID,aAAJ,EAN1B;;AAQA,AA0BA;;;;;;;AAOA;;;;;;;;;;AAmBA;;;;;;AAeA,AAAO,IAAI0B,OAAKC,OAAOC,MAAP,GAAgBD,OAAOC,MAAP,CAAc3B,qBAAd,CAAhB,GAAqDA,qBAA9D;;AC7FP;;;;;;;;;;ACAA;;;;ACAO,IAQH+I,WAAW,SAAXA,QAAW;SAAS,CAAC,CAAC9E,KAAX;CARR;IAgBH+E,UAAU,SAAVA,OAAU;SAAS,CAAC/E,KAAV;CAhBP;;ACAP;;;;;AAKA,AAIO,IAOHgF,aAAa,SAAbA,UAAa;SAAM,IAAN;CAPV;IAcHC,cAAc,SAAdA,WAAc;SAAM,KAAN;CAdX;IAuBHC,OAAOnH,OAAO,UAACyG,CAAD,EAAIC,CAAJ;SAAUD,KAAKC,CAAf;CAAP,CAvBJ;IAiCHU,MAAMpH,OAAO,UAACyG,CAAD,EAAIC,CAAJ;SAAUD,KAAKC,CAAf;CAAP,CAjCH;IAyCHW,OAAO,SAAPA,IAAO;SAAK,CAACtG,CAAN;CAzCJ;IAiDHuG,aAAaL,UAjDV;IA0DHM,SAASvH,OAAO,UAACyG,CAAD,EAAIC,CAAJ;SAAUD,MAAMC,CAAhB;CAAP,CA1DN;;ACTP;;;;AAIA,AAAO,IAAMc,OAAO,SAAPA,IAAO,CAACjH,IAAD,EAAOW,GAAP;SAAeA,IAAIX,IAAJ,CAAf;CAAb;;ACJP;;;AAGA,IAAMmB,YAAUC,OAAOpB,IAAvB;IACIqB,SAAO,KADX;IAEIC,UAAQ,MAFZ;IAGIC,eAAa,WAHjB;IAIIC,eAAa,WAJjB;;;;;;;;;;AAcA,AAAO,SAASC,QAAT,CAAiBC,KAAjB,EAAwB;QACvBC,eAAJ;QACI,QAAOD,KAAP,yCAAOA,KAAP,OAAiBF,YAArB,EAAiC;iBACpBD,YAAT;KADJ,MAGK,IAAIG,UAAU,IAAd,EAAoB;iBACZJ,OAAT;KADC,MAGA;YACGM,kBAAmBF,KAAD,CAAQG,WAAR,CAAoB7B,IAA1C;iBACS4B,oBAAoBT,SAApB,IAA+BW,MAAMJ,KAAN,CAA/B,GACLL,MADK,GACEO,eADX;;WAGGD,MAAP;;;AC9BJ;;;;;;;;;ACAA;;;;AAIA,AAIO,IAQHtB,eAAa3C,MAAMwJ,YAAN,CARV;;ACRP;;;;;AAKA,AAKA,IAAInF,YAAUC,OAAOhC,IAArB;IACImB,YAAUC,OAAOpB,IADrB;IAEIiC,YAAU9C,OAAOa,IAFrB;IAGIkC,aAAWC,QAAQnC,IAHvB;IAIIoC,cAAYC,SAASrC,IAJzB;IAKIsC,WAASC,MAAMvC,IALnB;IAMIwC,YAAU,QANd;IAOIC,SAAO,KAPX;IAQIC,SAAO,KARX;IASIC,aAAW,SATf;IAUIC,aAAW,SAVf;IAWItB,UAAQ,MAXZ;IAYIC,eAAa,WAZjB;;AAcA,AAAO,IAQHsB,eAAaxC,aAAWgC,QAAX,CARV;IAuBHS,WAASpF,MAAM,UAACqF,IAAD,EAAOpC,GAAP;WAAec,SAAOd,GAAP,OAAiBkC,aAAWE,IAAX,IAAmBA,KAAK/C,IAAxB,GAA+B+C,IAAhD,CAAf;CAAN,CAvBN;IAgDHK,YAAUN,SAAOP,KAAP,CAhDP;IAwDHc,aAAWP,SAAOb,SAAP,CAxDR;IAgEHqB,cAAYR,SAAOZ,UAAP,CAhET;IAwEHqB,aAAWT,SAAO3B,SAAP,CAxER;IAgFHqC,aAAWV,SAAOf,SAAP,CAhFR;IAwFH0B,UAAQX,SAAOL,MAAP,CAxFL;IAgGHiB,UAAQZ,SAAOJ,MAAP,CAhGL;IAwGHiB,cAAYb,SAAOH,UAAP,CAxGT;IAgHHiB,cAAYd,SAAOF,UAAP,CAhHT;IAwHHiB,gBAAcf,SAAOvB,YAAP,CAxHX;IAgIHuC,WAAShB,SAAOxB,OAAP,CAhIN;IAwIHyC,aAAWjB,SAAON,SAAP,CAxIR;IA6IHwB,cAAYlB,SAAO,SAAP,CA7IT;IAuJHmB,+BAA6B,SAA7BA,0BAA6B,IAAK;QACxBC,UAAUzC,SAAOjB,CAAP,CAAhB;WACO,CAACuB,SAAD,EAAUZ,SAAV,EAAmBe,UAAnB,EAA6BM,SAA7B,EACF2B,IADE,CACG;eAAQC,SAASF,OAAjB;KADH,CAAP;CAzJD;IAkKHG,gBAAc,SAAdA,WAAc;WAAKrG,OAAOwC,CAAP,MAAc,CAAnB;CAlKX;IAyKH8D,kBAAgB,SAAhBA,aAAgB;WAAOD,cAAY3D,KAAKC,GAAL,CAAZ,CAAP;CAzKb;IAgLH4D,sBAAoB,SAApBA,iBAAoB;WAAK/D,EAAEgE,IAAF,KAAW,CAAhB;CAhLjB;IAwLHC,YAAU,SAAVA,OAAU,QAAS;QACXC,cAAcjD,SAAOC,KAAP,CAAlB;QACIC,eADJ;;QAGI,CAACD,KAAL,EAAY;;iBACC,IAAT;KADJ,MAGK,IAAIgD,gBAAgBpC,QAAhB,IAA0BoC,gBAAgBtC,WAA9C,EAAyD;iBACjDiC,cAAY3C,KAAZ,CAAT;KADC,MAGA,IAAIgD,gBAAgBvD,SAAhB,IAA2BO,UAAU,CAAzC,EAA4C;iBACpC,KAAT;KADC,MAGA,IAAIgD,gBAAgBzC,SAApB,EAA6B;iBACrBqC,gBAAc5C,KAAd,CAAT;KADC,MAGA,IAAInB,iBAAe,MAAf,EAAuBmB,KAAvB,CAAJ,EAAmC;iBAC3B6C,oBAAkB7C,KAAlB,CAAT;KADC,MAGA;iBACQ,CAACA,KAAV;;WAEGC,MAAP;CA9MD;IAwNHgD,sBAAoBjH,MAAM,UAACqF,IAAD,EAAOrB,KAAP;WAAiB,CAAC+C,UAAQ/C,KAAR,CAAD,IAAmBoB,SAAOC,IAAP,EAAarB,KAAb,CAApC;CAAN,CAxNjB;IA+NHkD,UAAQ,SAARA,KAAQ;WAAK,CAACd,SAAOtD,CAAP,CAAD,IAAc,CAACqD,cAAYrD,CAAZ,CAApB;CA/NL;;ACxBP;;;;AAIA,AAIO,IASHvC,UAAQP,MAAMyJ,KAAN,CATL;;ACJA,IAAM/B,OAAK,SAALA,EAAK,CAAC5E,CAAD,EAAgB;sCAAT3C,IAAS;YAAA;;;QAC1B,CAAC+G,QAAMpE,CAAN,CAAL,EAAe;eAAS6E,SAAP;;QACXxD,cAAcrB,EAAEqB,WAAtB;QACItB,iBAAe,IAAf,EAAqBsB,WAArB,CAAJ,EAAuC;eAC5B5D,QAAM4D,YAAYuD,EAAlB,EAAsBvH,IAAtB,CAAP;KADJ,MAGK,IAAIoG,6BAA2BzD,CAA3B,CAAJ,EAAmC;eAC7BvC,QAAM4D,WAAN,EAAmBhE,IAAnB,CAAP;KADC,MAGA,IAAIgF,aAAWhB,WAAX,CAAJ,EAA6B;kDACnBA,WAAX,gBAA0BhE,IAA1B;;WAEGwH,SAAP;CAZG;;ACFA,IAEH+B,eAAe,SAAfA,YAAe,CAACnG,GAAD,EAAMoG,IAAN;WAAepG,MAAMoG,IAArB;CAFZ;IAIHC,eAAe,SAAfA,YAAe,CAACrG,GAAD,EAAMoG,IAAN,EAAe;QACtBrB,IAAJ,CAASqB,IAAT;WACOpG,GAAP;CAND;IASHsG,eAAe,SAAfA,YAAe,CAACtG,GAAD,EAAMoG,IAAN,EAAYG,GAAZ,EAAoB;QAC3BA,GAAJ,IAAWH,IAAX;WACOpG,GAAP;CAXD;IAcHwG,mBAAmB,SAAnBA,gBAAmB,IAAK;YACZhG,OAAOjB,CAAP,CAAR;aACS,QAAL;mBAAsB4G,YAAP;aACV,OAAL;mBAAqBE,YAAP;aACT,QAAL;;mBACgBC,YAAP;;CAnBd;;ACIP;;;;;;AAMA,AAAO,IAAMhJ,QAAM,SAANA,GAAM,CAACZ,EAAD,EAAK8H,EAAL,EAAY;QACvB+B,MAAM,CAAV;QACIE,QAAQ1J,OAAOyH,EAAP,CADZ;QAEInH,MAAM8G,KAAGK,EAAH,CAFV;QAGIkC,YAAYF,iBAAiBhC,EAAjB,CAHhB;QAII,CAACiC,KAAL,EAAY;eAASpJ,GAAP;;WACPkJ,MAAME,KAAb,EAAoBF,OAAO,CAA3B,EAA8B;cACpBG,UAAUrJ,GAAV,EAAeX,GAAG8H,GAAG+B,GAAH,CAAH,EAAYA,GAAZ,EAAiB/B,EAAjB,CAAf,EAAqC+B,GAArC,EAA0C/B,EAA1C,CAAN;;WAEGnH,GAAP;CATG;;ACZP;;;;AAIA,AAQO,IAQHsJ,YAAY,SAAZA,SAAY,CAACC,QAAD,EAAWC,GAAX;WAAmBxC,MAAMuC,QAAN,EAAgB7J,OAAO8J,GAAP,CAAhB,EAA6BA,GAA7B,CAAnB;CART;IAiBHC,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAQvC,EAAR;WAAeH,MAAM,CAAN,EAAS0C,KAAT,EAAgBvC,EAAhB,CAAf;CAjBP;IAwBHwC,OAAO,SAAPA,IAAO;WAAML,UAAU,CAAV,EAAanC,EAAb,CAAN;CAxBJ;IA0BHyC,qBAAqB,SAArBA,kBAAqB,CAAChC,CAAD,EAAIC,CAAJ,EAAU;QACvBD,IAAIC,CAAR,EAAW;eAAS,CAAP;KAAb,MACK,IAAID,IAAIC,CAAR,EAAW;eAAS,CAAC,CAAR;;WACX,CAAP;CA7BD;IAqCHgC,UAAU,SAAVA,OAAU;sCAAIC,KAAJ;aAAA;;;WAAcpK,OAAOoK,KAAP,IAAgB7J,MAAIP,MAAJ,EAAYoK,KAAZ,CAAhB,GAAqC,EAAnD;CArCP;IAuCHC,oBAAoB,SAApBA,iBAAoB,GAAc;uCAAVD,KAAU;aAAA;;;QACxBE,cAAcrK,MAAMkK,OAAN,EAAeC,KAAf,CAApB;QACIG,WAAWC,KAAKC,GAAL,CAASxK,KAAT,CAAeuK,IAAf,EAAqBF,WAArB,CADf;WAEO/J,MAAI,UAACmK,IAAD,EAAOlB,GAAP;eAAec,YAAYd,GAAZ,IAAmBe,QAAnB,GACtBR,QAAQQ,QAAR,EAAkBG,IAAlB,CADsB,GACIT,KAAKS,IAAL,CADnB;KAAJ,EACmCN,KADnC,CAAP;CA1CD;IA8CHO,cAAc,SAAdA,WAAc,CAACC,IAAD,EAAOC,EAAP,EAAW5H,GAAX,EAAgB6G,GAAhB,EAAwB;QAC5BJ,QAAQ1J,OAAO8J,GAAP,CAAd;QACI,CAACJ,KAAL,EAAY;eAASzG,GAAP;;QACVuG,MAAM,CAAV;QACIsB,SAAS7H,GADb;WAEOuG,MAAME,KAAb,EAAoBF,KAApB,EAA2B;YACnBoB,KAAKd,IAAIN,GAAJ,CAAL,EAAeA,GAAf,EAAoBM,GAApB,CAAJ,EAA8B;;;iBACrBe,GAAGC,MAAH,EAAWhB,IAAIN,GAAJ,CAAX,EAAqBA,GAArB,EAA0BM,GAA1B,CAAT;;WAEGgB,MAAP;CAvDD;IA0DHC,mBAAmB,SAAnBA,gBAAmB,CAACH,IAAD,EAAOC,EAAP,EAAW5H,GAAX,EAAgB6G,GAAhB,EAAwB;QACjCJ,QAAQ1J,OAAO8J,GAAP,CAAd;QACI,CAACJ,KAAL,EAAY;eAASzG,GAAP;;QACVuG,MAAME,QAAQ,CAAlB;QACIoB,SAAS7H,GADb;WAEOuG,OAAO,CAAd,EAAiBA,KAAjB,EAAwB;YAChBoB,KAAKd,IAAIN,GAAJ,CAAL,EAAeA,GAAf,EAAoBM,GAApB,CAAJ,EAA8B;;;iBACrBe,GAAGC,MAAH,EAAWhB,IAAIN,GAAJ,CAAX,EAAqBA,GAArB,EAA0BM,GAA1B,CAAT;;WAEGgB,MAAP;CAnED;IAsEH/H,WAAS,SAATA,MAAS,CAACiI,SAAD,EAAY/H,GAAZ,EAAiB6G,GAAjB;WACLa,YACIhC,WADJ;aAAA;OAAA;OAAA,CADK;CAtEN;IA6EHf,gBAAc,SAAdA,WAAc,CAACoD,SAAD,EAAY/H,GAAZ,EAAiB6G,GAAjB;WACViB,iBACIpC,WADJ;aAAA;OAAA;OAAA,CADU;CA7EX;IA0FHsC,YAAY,SAAZA,SAAY,IAAK;QAAQC,MAAMlL,OAAOwC,CAAP,CAAZ,CAAuB,OAAO0I,MAAMA,MAAM,CAAZ,GAAgB,CAAvB;CA1FvC;IAmGHC,iBAAiB,SAAjBA,cAAiB,CAACP,IAAD,EAAOd,GAAP,EAAe;QACxBN,MAAM,CAAC,CAAX;QACI4B,qBAAqB,KADzB;QAEM1B,QAAQ1J,OAAO8J,GAAP,CAAd;WACON,MAAME,KAAN,IAAe,CAAC0B,kBAAvB,EAA2C;6BAClBR,KAAKd,IAAI,EAAEN,GAAN,CAAL,EAAiBA,GAAjB,EAAsBM,GAAtB,CAArB;;WAEGN,GAAP;CA1GD;IAoHH6B,sBAAsB,SAAtBA,mBAAsB,CAACT,IAAD,EAAOd,GAAP,EAAe;QAC3BJ,QAAQ1J,OAAO8J,GAAP,CAAd;QACIN,MAAME,KAAV;QACI0B,qBAAqB,KADzB;WAEO5B,OAAO,CAAP,IAAY,CAAC4B,kBAApB,EAAwC,EAAE5B,GAA1C,EAA+C;6BACtBoB,KAAKd,IAAIN,GAAJ,CAAL,EAAeA,GAAf,EAAoBM,GAApB,CAArB;;WAEGN,GAAP;CA3HD;IAmIH8B,mBAAmB,SAAnBA,gBAAmB,CAACV,IAAD,EAAOnD,EAAP,EAAc;QACvBiC,QAAQ1J,OAAOyH,EAAP,CAAd;QACI,CAACiC,KAAL,EAAY;eAASrC,SAAP;;QACVmC,MAAM,CAAV;QACIlJ,MAAM,EADV;WAEOkJ,MAAME,KAAb,EAAoBF,KAApB,EAA2B;YACnBoB,KAAKnD,GAAG+B,GAAH,CAAL,EAAcA,GAAd,EAAmB/B,EAAnB,CAAJ,EAA4B;gBAAMO,IAAJ,CAASwB,GAAT;;;WAE3BlJ,GAAP;CA3ID;IAoJHiL,YAAY,SAAZA,SAAY,CAACX,IAAD,EAAOnD,EAAP,EAAc;QAClB+B,MAAM,CAAV;QACIE,QAAQ1J,OAAOyH,EAAP,CADZ;QAEI,CAACiC,KAAL,EAAY;;;WACLF,MAAME,KAAb,EAAoBF,KAApB,EAA2B;YACnBgC,MAAM/D,GAAG+B,GAAH,CAAV;YACIoB,KAAKY,GAAL,EAAUhC,GAAV,EAAe/B,EAAf,CAAJ,EAAwB;mBAAS+D,GAAP;;;CA1J/B;;ACZP;;;;;;;AAOA,AAsBA;AACA,AAAO,IAeHjD,SAASkD,QAfN;IA0BHC,aAAa,SAAbA,UAAa,GAAa;sCAAT7L,IAAS;YAAA;;;QAClBG,OAAOH,IAAP,CAAJ,EAAkB;eAASI,MAAMwL,QAAN,EAAkB5L,IAAlB,CAAP;;UACd,IAAI8L,KAAJ,CAAU,yCAAV,CAAN;CA5BD;IAsCHC,OAAO,SAAPA,IAAO;WAAKpJ,EAAE,CAAF,CAAL;CAtCJ;IA+CHqJ,OAAO,SAAPA,IAAO;WAAMpE,GAAGwD,UAAUxD,EAAV,CAAH,CAAN;CA/CJ;IAwDHqE,OAAO,SAAPA,IAAO;WAAMlC,UAAU,CAAV,EAAanC,EAAb,CAAN;CAxDJ;IAiEHsE,OAAO,SAAPA,IAAO;WAAMhC,QAAQkB,UAAUxD,EAAV,CAAR,EAAuBA,EAAvB,CAAN;CAjEJ;IA0EHuE,SAAS,SAATA,MAAS,KAAM;QACP,CAACvE,EAAL,EAAS;;;QAGLzH,OAAOyH,EAAP,MAAe,CAAnB,EAAsB;eACXJ,SAAP;;WAEG,CAACuE,KAAKnE,EAAL,CAAD,EAAWqE,KAAKrE,EAAL,CAAX,CAAP;CAjFD;IA2FHwE,UAAU,SAAVA,OAAU,KAAM;QACR,CAACxE,EAAL,EAAS;;;QAGLzH,OAAOyH,EAAP,MAAe,CAAnB,EAAsB;eACXJ,SAAP;;WAEG,CAAC0E,KAAKtE,EAAL,CAAD,EAAWoE,KAAKpE,EAAL,CAAX,CAAP;CAlGD;IAsHHhB,YAAU,SAAVA,OAAU;WAAK,CAACzG,OAAOwC,CAAP,CAAN;CAtHP;IA+HHzC,YAAS,SAATA,SAAS,KAAM;QACP,CAACC,OAAOyH,EAAP,CAAL,EAAiB;eAASwC,KAAKxC,EAAL,CAAP;;WACZjC,SAASiC,EAAT,IAAeA,EAAf,GAAoBxH,MAAMyL,UAAN,EAAkBjE,EAAlB,CAA3B;CAjID;IA4IHyE,YAAY,SAAZA,SAAY,CAACvM,EAAD,EAAKwM,WAAL;WAAqBpM,UAAOQ,MAAIZ,EAAJ,EAAQwM,WAAR,CAAP,CAArB;CA5IT;IAqJHC,UAAU,SAAVA,OAAU,IAAK;QACLC,aAAa5C,iBAAiBjH,CAAjB,CAAnB;WACOoF,cACH,UAAC3E,GAAD,EAAMoG,IAAN,EAAYG,GAAZ;eAAoB6C,WAAWpJ,GAAX,EAAgBoG,IAAhB,EAAsBG,GAAtB,CAApB;KADG,EAEHpC,GAAG5E,CAAH,CAFG,EAEIA,CAFJ,CAAP;CAvJD;IAsKH8J,cAAc,SAAdA,WAAc,CAACC,OAAD,EAAUzC,GAAV,EAAkB;QACtBJ,QAAQ1J,OAAO8J,GAAP,CAAd;QACI0C,UAAU9C,QAAQ,CADtB;QAEI2C,aAAajF,GAAG0C,GAAH,CAFjB;QAGI2C,eAAehD,iBAAiBK,GAAjB,CAHnB;QAII,CAACJ,KAAL,EAAY;eACD2C,UAAP;;WAEGK,MAAM,UAACzJ,GAAD,EAAMoG,IAAN,EAAYG,GAAZ,EAAoB;eACtBA,QAAQgD,OAAR,GACHC,aAAaxJ,GAAb,EAAkBoG,IAAlB,CADG,GAEHoD,aACIA,aAAaxJ,GAAb,EAAkBoG,IAAlB,CADJ,EAEIkD,OAFJ,CAFJ;KADG,EAOJF,UAPI,EAOQvC,GAPR,CAAP;CA9KD;IAgMH6C,cAAc,SAAdA,WAAc,CAAClF,EAAD,EAAKmF,GAAL;WAAa7M,UAAOuM,YAAY7E,EAAZ,EAAgBmF,GAAhB,CAAP,CAAb;CAhMX;IAmNHC,YAAY,SAAZA,SAAY,MAAO;QACXC,WAAW9M,OAAO4M,GAAP,CAAf;QACIpD,MAAM,CADV;QACauD,aADb;QAEI,CAACD,QAAL,EAAe;eACJ1F,GAAGwF,GAAH,CAAP;;QAEEtC,cAAcrK,MAAMkK,OAAN,EAAeyC,GAAf,CAApB;QACII,iBAAiBC,QAAQ3C,WAAR,CADrB;QAEI4C,WAAW,EAFf;WAGO1D,MAAMwD,cAAb,EAA6BxD,OAAO,CAApC,EAAuC;YAC7B2D,UAAU,EAAhB;aACKJ,OAAO,CAAZ,EAAeA,OAAOD,QAAtB,EAAgCC,QAAQ,CAAxC,EAA2C;gBACnCzC,YAAYyC,IAAZ,IAAoBvD,MAAM,CAA9B,EAAiC;;;oBAGzBxB,IAAR,CAAa4E,IAAIG,IAAJ,EAAUvD,GAAV,CAAb;;iBAEKxB,IAAT,CAAcmF,OAAd;;WAEGvM,OAAO;eAAKZ,OAAOwC,CAAP,CAAL;KAAP,EAAuB0K,QAAvB,CAAP;CAtOD;IAoPHE,eAAe,SAAfA,YAAe,KAAM;QACXlC,MAAMV,KAAK6C,GAAL,CAAS,CAAT,EAAYrN,OAAOyH,EAAP,CAAZ,CAAZ;QACInH,MAAM,EADV;SAEK,IAAIgN,IAAI,CAAb,EAAgBA,IAAIpC,GAApB,EAAyBoC,KAAK,CAA9B,EAAiC;YACvBC,QAAQ,EAAd;aACK,IAAIC,IAAI,CAAb,EAAgBA,IAAItC,GAApB,EAAyBsC,KAAK,CAA9B,EAAiC;gBACzBF,IAAK,KAAKE,CAAd,EAAkB;sBACRxF,IAAN,CAAWP,GAAG+F,CAAH,CAAX;;;YAGJxF,IAAJ,CAASuF,KAAT;;WAEGjN,GAAP;CAhQD;IAmQHmN,eAAe,SAAfA,YAAe;WAAM,CAAChG,EAAD,CAAN;CAnQZ;IAqQHiF,QAAQ3J,QArQL;IAuQH2K,QAAQ9F,aAvQL;IAyQH+F,SAAS,SAATA,MAAS,CAAC9C,EAAD,EAAKpD,EAAL,EAAY;QACXmG,QAAQ5B,OAAOvE,EAAP,CAAd;QACI,CAACmG,KAAL,EAAY;eACDxG,GAAGK,EAAH,CAAP;;WAEG1E,SAAO8H,EAAP,EAAW+C,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,CAAP;CA9QD;IAiRHC,SAAS,SAATA,MAAS,CAAChD,EAAD,EAAKpD,EAAL,EAAY;QACXmG,QAAQ3B,QAAQxE,EAAR,CAAd;QACI,CAACmG,KAAL,EAAY;eACDxG,GAAGK,EAAH,CAAP;;WAEGG,cAAYiD,EAAZ,EAAgB+C,MAAM,CAAN,CAAhB,EAA0BA,MAAM,CAAN,CAA1B,CAAP;CAtRD;IAkSHE,YAAY,SAAZA,SAAY,CAACjD,EAAD,EAAKkD,IAAL,EAAWtG,EAAX,EAAkB;QACpBiD,OAAOd,UAAU,CAAV,EAAanC,EAAb,CAAb;QACIiC,QAAQ1J,OAAOyH,EAAP,CADZ;QAEI,CAACiC,KAAL,EAAY;eACD,CAACqE,IAAD,EAAOrD,IAAP,CAAP;;QAEAlB,MAAM,CAAV;QACIvG,MAAM8K,IADV;QAEIC,SAAS5G,GAAGK,EAAH,CAFb;QAGIwG,cAHJ;WAIOzE,MAAME,KAAb,EAAoBF,KAApB,EAA2B;gBACfqB,GAAG5H,GAAH,EAAQyH,KAAKlB,GAAL,CAAR,EAAmBA,GAAnB,CAAR;cACMyE,MAAM,CAAN,CAAN;iBACSA,MAAM,CAAN,CAAT;;WAEG,CAAChL,GAAD,EAAM+K,MAAN,CAAP;CAjTD;IA6THE,YAAY,SAAZA,SAAY,CAACrD,EAAD,EAAKkD,IAAL,EAAWtG,EAAX,EAAkB;QACpBiD,OAAOd,UAAU,CAAV,EAAanC,EAAb,CAAb;QACIiC,QAAQ1J,OAAOyH,EAAP,CADZ;QAEI,CAACiC,KAAL,EAAY;eACD,CAACqE,IAAD,EAAOrD,IAAP,CAAP;;QAEAlB,MAAME,QAAQ,CAAlB;QACIzG,MAAM8K,IADV;QAEIC,SAAS5G,GAAGK,EAAH,CAFb;QAGIwG,cAHJ;WAIOzE,OAAO,CAAd,EAAiBA,KAAjB,EAAwB;gBACZqB,GAAG5H,GAAH,EAAQyH,KAAKlB,GAAL,CAAR,EAAmBA,GAAnB,CAAR;cACMyE,MAAM,CAAN,CAAN;iBACSA,MAAM,CAAN,CAAT;;WAEG,CAAChL,GAAD,EAAM+K,MAAN,CAAP;CA5UD;IAuVHG,UAAU,SAAVA,OAAU,CAACzE,KAAD,EAAQmB,EAAR,EAAYrI,CAAZ,EAAkB;QACpBgH,MAAM,CAAV;QACIlJ,MAAMkC,CADV;WAEOgH,MAAME,KAAb,EAAoBF,OAAO,CAA3B,EAA8B;cACpBqB,GAAGvK,GAAH,EAAQkJ,GAAR,CAAN;;WAEGlJ,GAAP;CA7VD;IAuWH8N,SAAS,SAATA,MAAS,CAAC1E,KAAD,EAAQlH,CAAR;WACL2L,QAAQzE,KAAR,EAAe,eAAO;YACd1B,IAAJ,CAASxF,CAAT;eACOS,GAAP;KAFJ,EAGG,EAHH,CADK;CAvWN;IAoXHoL,YAAYD,MApXT;IA6XHE,QAAQ,SAARA,KAAQ,CAAC5E,KAAD,EAAQjC,EAAR;WAAe1H,UAAOsO,UAAU3E,KAAV,EAAiBjC,EAAjB,CAAP,CAAf;CA7XL;IAuYH8G,UAAU,SAAVA,OAAU,CAAC1D,EAAD,EAAKrI,CAAL,EAAW;QACbgH,MAAM,CAAV;QACIlJ,MAAM,EADV;QAEIkO,cAAc3D,GAAGrI,CAAH,EAAMgH,GAAN,EAAWlJ,GAAX,CAFlB;WAGOkO,WAAP,EAAoB;YACZxG,IAAJ,CAASwG,YAAY,CAAZ,CAAT;sBACc3D,GAAG2D,YAAY,CAAZ,CAAH,EAAmB,EAAEhF,GAArB,EAA0BlJ,GAA1B,CAAd;;WAEGA,GAAP;CA/YD;IAyZHmO,YAAYtD,cAzZT;IAiaHuD,cAAcpD,gBAjaX;IAyaHqD,YAAY,SAAZA,SAAY,CAACnM,CAAD,EAAIiF,EAAJ,EAAW;QACbmH,WAAWlH,QAAQlF,CAAR,EAAWiF,EAAX,CAAjB;WACOmH,aAAa,CAAC,CAAd,GAAkBA,QAAlB,GAA6BvH,SAApC;CA3aD;IAobHwH,cAAc,SAAdA,WAAc,CAACnL,KAAD,EAAQ+D,EAAR;WAAeiH,YAAY;eAAKlM,MAAMkB,KAAX;KAAZ,EAA8B+D,EAA9B,CAAf;CApbX;IA6bHqH,OAAO,SAAPA,IAAO,CAACpF,KAAD,EAAQgB,IAAR;WAAiBX,QAAQL,KAAR,EAAegB,IAAf,CAAjB;CA7bJ;IAscHqE,OAAO,SAAPA,IAAO,CAACC,KAAD,EAAQtE,IAAR;WAAiBd,UAAUoF,KAAV,EAAiBtE,IAAjB,CAAjB;CAtcJ;IAgdHuE,UAAU,SAAVA,OAAU,CAACzF,GAAD,EAAMkB,IAAN;WAAe,CACrBX,QAAQP,GAAR,EAAakB,IAAb,CADqB,EAErBd,UAAUJ,GAAV,EAAekB,IAAf,CAFqB,CAAf;CAhdP;IA4dHwE,YAAY,SAAZA,SAAY,CAACtE,IAAD,EAAOF,IAAP,EAAgB;QACpBqD,OAAO3G,GAAGsD,IAAH,CAAX;QACMM,YAAYvB,iBAAiBiB,IAAjB,CAAlB;WACOC,YACHrC,QAAQsC,IAAR,CADG;aAAA;QAAA;QAAA,CAAP;CA/dD;IA+eHuE,YAAY,SAAZA,SAAY,CAACvE,IAAD,EAAOF,IAAP,EAAgB;QAClBhB,QAAQ1J,OAAO0K,IAAP,CAAd;QACI0E,aACIjE,eAAe,UAAC9B,IAAD,EAAOG,GAAP,EAAY6F,KAAZ;eACX,CAACzE,KAAKF,KAAKlB,GAAL,CAAL,EAAgBA,GAAhB,EAAqB6F,KAArB,CADU;KAAf,EACkC3E,IADlC,CAFR;;WAKO0E,eAAe,CAAC,CAAhB,GACHrF,QAAQL,KAAR,EAAegB,IAAf,CADG,GAEHpD,MAAM8H,UAAN,EAAkB1F,KAAlB,EAAyBgB,IAAzB,CAFJ;CArfD;IAigBH4E,eAAe,SAAfA,YAAe,CAAC1E,IAAD,EAAOF,IAAP,EAAgB;QACrBhB,QAAQ1J,OAAO0K,IAAP,CAAd;QACI0E,aACI/D,oBAAoB,UAAChC,IAAD,EAAOG,GAAP,EAAY6F,KAAZ;eAChB,CAACzE,KAAKF,KAAKlB,GAAL,CAAL,EAAgBA,GAAhB,EAAqB6F,KAArB,CADe;KAApB,EACkC3E,IADlC,CAFR;;WAKO0E,eAAe,CAAC,CAAhB,GACHrF,QAAQL,KAAR,EAAegB,IAAf,CADG,GAEHX,QAAQqF,aAAa,CAArB,EAAwB1E,IAAxB,CAFJ;CAvgBD;IAqhBH6E,OAAO,SAAPA,IAAO,CAAC3E,IAAD,EAAOF,IAAP,EAAgB;QACb0E,aAAajE,eAAe7C,QAAQsC,IAAR,CAAf,EAA8BF,IAA9B,CAAnB;WACO0E,eAAe,CAAC,CAAhB,GACHH,QAAQ,CAAR,EAAWvE,IAAX,CADG,GACgBuE,QAAQG,UAAR,EAAoB1E,IAApB,CADvB;CAvhBD;IA2hBH8E,cAAc,SAAdA,WAAc,CAAC5E,IAAD,EAAOF,IAAP,EAAgB;QACpB0E,aAAajE,eAAeP,IAAf,EAAqBF,IAArB,CAAnB;WACO0E,eAAe,CAAC,CAAhB,GACHH,QAAQ,CAAR,EAAWvE,IAAX,CADG,GACgBuE,QAAQG,UAAR,EAAoB1E,IAApB,CADvB;CA7hBD;IAuiBH+E,KAAKxG,IAviBF;IA+iBHyG,OAAOnE,SA/iBJ;IAijBH3K,SAAS,SAATA,MAAS,CAACgK,IAAD,EAAOnD,EAAP,EAAc;QACf+B,MAAM,CAAV;QACIE,QAAQ1J,OAAOyH,EAAP,CADZ;QAEI4E,aAAa5C,iBAAiBhC,EAAjB,CAFjB;QAGInH,MAAM8G,GAAGK,EAAH,CAHV;QAII,CAACiC,KAAL,EAAY;eACDpJ,GAAP;;WAEGkJ,MAAME,KAAb,EAAoBF,KAApB,EAA2B;YACnBoB,KAAKnD,GAAG+B,GAAH,CAAL,EAAcA,GAAd,EAAmB/B,EAAnB,CAAJ,EAA4B;kBAClB4E,WAAW/L,GAAX,EAAgBmH,GAAG+B,GAAH,CAAhB,CAAN;;;WAGDlJ,GAAP;CA9jBD;IA0kBHqP,YAAY,SAAZA,SAAY,CAAC/E,IAAD,EAAOF,IAAP,EAAgB;QACpB,CAAC1K,OAAO0K,IAAP,CAAL,EAAmB;eACR,CAACtD,GAAGsD,IAAH,CAAD,EAAWtD,GAAGsD,IAAH,CAAX,CAAP;;WAEG,CAAC9J,OAAOgK,IAAP,EAAaF,IAAb,CAAD,EAAqB9J,OAAO0H,QAAQsC,IAAR,CAAP,EAAsBF,IAAtB,CAArB,CAAP;CA9kBD;IAilBHkF,OAAOrI,QAjlBJ;IAmlBHsI,UAAU5H,QAAQV,QAAR,CAnlBP;IAqlBHuI,SAASL,EArlBN;IAulBHM,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAc;QACjBC,SAASlQ,OAAOgQ,GAAP,CAAf;QACIG,SAASnQ,OAAOiQ,GAAP,CADb;QAEIE,SAASD,MAAT,IAAmB,CAACA,MAApB,IAA8B,CAACC,MAA/B,IAAyCzI,QAAQsI,IAAI,CAAJ,CAAR,EAAgBC,GAAhB,MAAyB,CAAC,CAAvE,EAA0E;eAC/D,KAAP;;QAEAzG,MAAM,CAAV;WACOA,MAAM0G,MAAb,EAAqB1G,KAArB,EAA4B;YACpBwG,IAAIxG,GAAJ,MAAayG,IAAIzG,GAAJ,CAAjB,EAA2B;mBAChB,KAAP;;;WAGD,IAAP;CAnmBD;IAsmBH4G,aAAa,SAAbA,UAAa,CAACJ,GAAD,EAAMC,GAAN,EAAc;QACjBC,SAASlQ,OAAOgQ,GAAP,CAAf;QACIG,SAASnQ,OAAOiQ,GAAP,CADb;QAEIE,SAASD,MAAT,IAAmB,CAACA,MAApB,IAA8B,CAACC,MAA/B,IAAyCzI,QAAQsI,IAAI,CAAJ,CAAR,EAAgBC,GAAhB,MAAyB,CAAC,CAAvE,EAA0E;eAC/D,KAAP;;QAEAI,OAAOH,SAAS,CAApB;QACInD,OAAOoD,SAAS,CADpB;WAEOE,QAAQ,CAAf,EAAkBA,MAAlB,EAA0B;YAClBL,IAAIK,IAAJ,MAAcJ,IAAIlD,IAAJ,CAAlB,EAA6B;mBAClB,KAAP;;gBAEI,CAAR;;WAEG,IAAP;CApnBD;IAunBHuD,YAAY,SAAZA,SAAY,CAACN,GAAD,EAAMC,GAAN,EAAc;QAChBC,SAASlQ,OAAOgQ,GAAP,CAAf;QACIG,SAASnQ,OAAOiQ,GAAP,CADb;QAEIE,SAASD,MAAT,IAAmB,CAACA,MAApB,IAA8B,CAACC,MAAnC,EAA2C;eAChC,KAAP;;QAEAE,aAAJ;QACIE,iBADJ;QAEI/G,MAAM,CAFV;WAGOA,MAAM2G,MAAb,EAAqB3G,OAAO,CAA5B,EAA+B;mBAChB,CAAX;aACK6G,OAAO,CAAZ,EAAeA,OAAOH,MAAtB,EAA8BG,QAAQ,CAAtC,EAAyC;gBACjCJ,IAAII,OAAO7G,GAAX,MAAoBwG,IAAIK,IAAJ,CAAxB,EAAmC;4BACnB,CAAZ;;gBAEAE,aAAaL,MAAjB,EAAyB;uBACd,IAAP;;;;WAIL,KAAP;CA3oBD;IA8oBHM,kBAAkB,SAAlBA,eAAkB,CAACR,GAAD,EAAMC,GAAN,EAAc;QACtB/E,MAAMV,KAAK6C,GAAL,CAAS,CAAT,EAAYrN,OAAOiQ,GAAP,CAAZ,CAAZ;QACIQ,SAASzQ,OAAOgQ,GAAP,CADb;QAEIO,iBAAJ;QACIjD,UADJ;SAEKA,IAAI,CAAT,EAAYA,IAAIpC,GAAhB,EAAqBoC,KAAK,CAA1B,EAA6B;mBACd,CAAX;aACK,IAAIE,IAAI,CAAb,EAAgBA,IAAItC,GAApB,EAAyBsC,KAAK,CAA9B,EAAiC;gBACzBF,IAAK,KAAKE,CAAV,IAAgB9F,QAAQuI,IAAIzC,CAAJ,CAAR,EAAgBwC,GAAhB,IAAuB,CAAC,CAA5C,EAA+C;4BAC/B,CAAZ;;gBAEAO,aAAaE,MAAjB,EAAyB;uBACd,IAAP;;;;WAIL,KAAP;CA9pBD;IA6qBHC,QAAQ,SAARA,KAAQ;WAAMC,QAAQ,UAACzI,CAAD,EAAIC,CAAJ;eAAUD,MAAMC,CAAhB;KAAR,EAA2BV,EAA3B,CAAN;CA7qBL;IAwrBHkJ,UAAU,SAAVA,OAAU,CAACC,UAAD,EAAanJ,EAAb,EAAoB;QACpBiC,QAAQ1J,OAAOyH,EAAP,CAAd;QACI,CAACiC,KAAL,EAAY;eACDE,UAAU,CAAV,EAAanC,EAAb,CAAP;;QAEA+B,MAAM,CAAV;QACIqH,iBADJ;QAEIxH,aAFJ;QAGIyH,SAAS,SAATA,MAAS,IAAK;YACNF,WAAWpO,CAAX,EAAcqO,QAAd,CAAJ,EAA6B;;;YAGzBD,WAAWpO,CAAX,EAAc6G,IAAd,CAAJ,EAAyB;uBACV7G,CAAX;mBACO,IAAP;;eAEG,KAAP;KAXR;QAaIS,MAAM,EAbV;WAcOuG,MAAME,KAAb,EAAoBF,OAAO,CAA3B,EAA8B;eACnB/B,GAAG+B,GAAH,CAAP;YACIxB,IAAJ,CAASkH,UAAU4B,MAAV,EAAkBxJ,MAAMkC,GAAN,EAAWE,KAAX,EAAkBjC,EAAlB,CAAlB,CAAT;;WAEGxE,GAAP;CA/sBD;IAktBH8N,QAAQ,SAARA,KAAQ,KAAM;QACNrH,QAAQ1J,OAAOyH,EAAP,CAAZ;QACI+B,MAAM,CADV;QAEIvG,MAAM,EAFV;QAGI,CAACyG,KAAL,EAAY;eACD,EAAP;;WAEGF,OAAOE,KAAd,EAAqBF,OAAO,CAA5B,EAA+B;cACrBF,aAAarG,GAAb,EAAkB8G,QAAQP,GAAR,EAAa/B,EAAb,CAAlB,CAAN;;WAEGxE,GAAP;CA5tBD;IA+tBH+N,QAAQ,SAARA,KAAQ,KAAM;QACNtH,QAAQ1J,OAAOyH,EAAP,CAAZ;QACI+B,MAAM,CADV;QAEIvG,MAAM,EAFV;QAGI,CAACyG,KAAL,EAAY;eACD,EAAP;;WAEGF,OAAOE,KAAd,EAAqBF,OAAO,CAA5B,EAA+B;cACrBF,aAAarG,GAAb,EAAkBqE,MAAMkC,GAAN,EAAWE,KAAX,EAAkBjC,EAAlB,CAAlB,CAAN;;WAEGxE,GAAP;CAzuBD;IA4uBHgO,cAAc,SAAdA,WAAc,CAACC,MAAD,EAASxG,IAAT;WACVqF,WAAWmB,MAAX,EAAmBxG,IAAnB,IACIuE,QAAQjP,OAAOkR,MAAP,CAAR,EAAwBxG,IAAxB,EAA8B,CAA9B,CADJ,GAEId,UAAU,CAAV,EAAac,IAAb,CAHM;CA5uBX;IA0vBHyG,MAAM,SAANA,GAAM,CAACC,IAAD,EAAOC,IAAP,EAAgB;QACd,CAACrR,OAAOoR,IAAP,CAAD,IAAiB,CAACpR,OAAOqR,IAAP,CAAtB,EAAoC;eACzBjK,GAAGgK,IAAH,CAAP;;;6BAEa/G,kBAAkB+G,IAAlB,EAAwBC,IAAxB,CAJC;;QAIXC,EAJW;QAIPC,EAJO;;WAKXxO,SAAO,UAACE,GAAD,EAAMoG,IAAN,EAAYG,GAAZ;eACNF,aAAarG,GAAb,EAAkB,CAACoG,IAAD,EAAOkI,GAAG/H,GAAH,CAAP,CAAlB,CADM;KAAP,EAEH,EAFG,EAEC8H,EAFD,CAAP;CA/vBD;IA4wBHE,OAAO,SAAPA,IAAO,GAAc;uCAAVpH,KAAU;aAAA;;;QACXqH,eAAexR,MAAMoK,iBAAN,EAAyBzJ,OAAOZ,MAAP,EAAeoK,KAAf,CAAzB,CAArB;QACIsH,eAAe1R,OAAOyR,YAAP,CADnB;QAEI,CAACC,YAAL,EAAmB;eACR,EAAP;KADJ,MAGK,IAAIA,iBAAiB,CAArB,EAAwB;eAClB3H,QAAQ/J,OAAOyR,aAAa,CAAb,CAAP,CAAR,EAAiCA,aAAa,CAAb,CAAjC,CAAP;;WAEG1O,SAAO,UAACE,GAAD,EAAMoG,IAAN,EAAYG,GAAZ;eACNF,aAAarG,GAAb,EAAkB1C,MAAI;mBAAMkH,GAAG+B,GAAH,CAAN;SAAJ,EAAmBiI,YAAnB,CAAlB,CADM;KAAP,EAEH,EAFG,EAECA,aAAa,CAAb,CAFD,CAAP;CArxBD;IA+0BHE,UAAU,SAAVA,OAAU,CAAC9G,EAAD,EAAKmF,GAAL,EAAUC,GAAV,EAAkB;QACpB,CAACjQ,OAAOgQ,GAAP,CAAD,IAAgB,CAAChQ,OAAOiQ,GAAP,CAArB,EAAkC;eACvB7I,GAAG4I,GAAH,CAAP;;;8BAEa3F,kBAAkB2F,GAAlB,EAAuBC,GAAvB,CAJO;;QAIjBqB,EAJiB;QAIbC,EAJa;;WAKjBxO,SAAO,UAACE,GAAD,EAAMoG,IAAN,EAAYG,GAAZ;eACNF,aAAarG,GAAb,EAAkB4H,GAAGxB,IAAH,EAASkI,GAAG/H,GAAH,CAAT,CAAlB,CADM;KAAP,EAEH,EAFG,EAEC8H,EAFD,CAAP;CAp1BD;IAs2BHM,WAAW,SAAXA,QAAW,CAAC/G,EAAD,EAAkB;uCAAVT,KAAU;aAAA;;;QACnBqH,eAAexR,MAAMoK,iBAAN,EAAyBD,KAAzB,CAArB;QACIsH,eAAe1R,OAAOyR,YAAP,CADnB;QAEI,CAACC,YAAL,EAAmB;eACR,EAAP;KADJ,MAGK,IAAIA,iBAAiB,CAArB,EAAwB;eAClB3H,QAAQ/J,OAAOyR,aAAa,CAAb,CAAP,CAAR,EAAiCA,aAAa,CAAb,CAAjC,CAAP;;WAEG1O,SAAO,UAACE,GAAD,EAAMoG,IAAN,EAAYG,GAAZ;eACNF,aAAarG,GAAb,EAAkBhD,MAAM4K,EAAN,EAAUtK,MAAI;mBAAMkH,GAAG+B,GAAH,CAAN;SAAJ,EAAmBiI,YAAnB,CAAV,CAAlB,CADM;KAAP,EAEH,EAFG,EAECA,aAAa,CAAb,CAFD,CAAP;CA/2BD;IAy6BHI,QAAQ,SAARA,KAAQ;WACJnF,MAAM,UAACzJ,GAAD,EAAMoG,IAAN,EAAe;YACb,CAAJ,EAAOrB,IAAP,CAAYqB,KAAK,CAAL,CAAZ;YACI,CAAJ,EAAOrB,IAAP,CAAYqB,KAAK,CAAL,CAAZ;eACOpG,GAAP;KAHJ,EAIG,CAAC,EAAD,EAAK,EAAL,CAJH,EAIa6G,GAJb,CADI;CAz6BL;IAw7BHgI,SAAS,SAATA,MAAS,OAAQ;QACT,CAAC9R,OAAO0K,IAAP,CAAL,EAAmB;eACR,EAAP;;QAEEqH,WAAW/R,OAAO0K,KAAK,CAAL,CAAP,CAAjB;QACIqD,OAAOgE,WACPxD,QAAQ;eAAYzB,aAAa,CAAC,EAAD,EAAKA,QAAL,CAAb,GAA8BzF,SAA1C;KAAR,EAA6D0K,QAA7D,CADO,GAEP,EAFJ;WAGOrF,MAAM,UAACzJ,GAAD,EAAMoG,IAAN,EAAe;YACpBxB,OAAJ,CAAY,UAACsF,OAAD,EAAU3D,GAAV;mBAAkB2D,QAAQnF,IAAR,CAAaqB,KAAKG,GAAL,CAAb,CAAlB;SAAZ;eACOvG,GAAP;KAFG,EAGJ8K,IAHI,EAGErD,IAHF,CAAP;CAh8BD;IAs8BHsH,MAAM,SAANA,GAAM,CAACC,CAAD,EAAIxK,EAAJ,EAAW;QACT+B,MAAM,CAAV;QACIE,QAAQ1J,OAAOyH,EAAP,CADZ;QAEI,CAACiC,KAAL,EAAY;eACD,KAAP;;WAEGF,MAAME,KAAb,EAAoBF,OAAO,CAA3B,EAA8B;YACtByI,EAAExK,GAAG+B,GAAH,CAAF,CAAJ,EAAgB;mBACL,IAAP;;;WAGD,KAAP;CAj9BD;IAo9BH0I,MAAM,SAANA,GAAM,CAACD,CAAD,EAAIxK,EAAJ,EAAW;QACPiC,QAAQ1J,OAAOyH,EAAP,CAAd;QACI+B,MAAM,CAAV;QACIE,UAAU,CAAd,EAAiB;eACN,KAAP;;WAEGF,MAAME,KAAb,EAAoBF,KAApB,EAA2B;YACnB,CAACyI,EAAExK,GAAG+B,GAAH,CAAF,EAAWA,GAAX,EAAgB/B,EAAhB,CAAL,EAA0B;mBACf,KAAP;;;WAGD,IAAP;CA/9BD;IAk+BH0K,MAAM,SAANA,GAAM;WAAMD,IAAI1J,QAAJ,EAAcf,EAAd,CAAN;CAl+BH;IAo+BH2K,KAAK,SAALA,EAAK;WAAMJ,IAAIxJ,QAAJ,EAAcf,EAAd,CAAN;CAp+BF;IAw+BH4K,MAAM,SAANA,GAAM;WAAQ3F,MAAM,UAACzJ,GAAD,EAAMT,CAAN;eAAYS,MAAMT,CAAlB;KAAN,EAA2B,CAA3B,EAA8BkI,IAA9B,CAAR;CAx+BH;IA0+BH4H,UAAU,SAAVA,OAAU;WAAO5F,MAAM,UAACzJ,GAAD,EAAMT,CAAN;eAAYS,MAAMT,CAAlB;KAAN,EAA2B,CAA3B,EAA8BsH,GAA9B,CAAP;CA1+BP;IA4+BHmD,UAAU,SAAVA,OAAU;WAAQsF,UAAUrI,kBAAV,EAA8BQ,IAA9B,CAAR;CA5+BP;IA8+BH8H,UAAU,SAAVA,OAAU;WAAQC,UAAUvI,kBAAV,EAA8BQ,IAA9B,CAAR;CA9+BP;IAg/BH6H,YAAY,SAAZA,SAAY,CAACG,QAAD,EAAWjL,EAAX;WAAkBoE,KAAK8G,OAAOD,QAAP,EAAiBjL,EAAjB,CAAL,CAAlB;CAh/BT;IAk/BHgL,YAAY,SAAZA,SAAY,CAACC,QAAD,EAAWjL,EAAX;WAAkBmE,KAAK+G,OAAOD,QAAP,EAAiBjL,EAAjB,CAAL,CAAlB;CAl/BT;IA4/BHmL,MAAM,SAANA,GAAM;WAAQC,MAAM,UAAC3K,CAAD,EAAIC,CAAJ;eAAUD,MAAMC,CAAhB;KAAN,EAAyBuC,IAAzB,CAAR;CA5/BH;IA8/BHoI,SAAS,SAATA,MAAS,CAACtQ,CAAD,EAAIkI,IAAJ;WAAaqI,SAAS,UAAC7K,CAAD,EAAIC,CAAJ;eAAUD,MAAMC,CAAhB;KAAT,EAA4B3F,CAA5B,EAA+BkI,IAA/B,CAAb;CA9/BN;IAggCHsI,OAAO,SAAPA,IAAO;WAAML,OAAOzI,kBAAP,EAA2BzC,EAA3B,CAAN;CAhgCJ;IAkgCHwL,SAAS,SAATA,MAAS,CAACC,OAAD,EAAUzL,EAAV;;;;cAGD;mBAAa0L,UAAU,CAAV,CAAb;SAAJ;;;;;kBAKS7B,EAAD,EAAK8B,EAAL,EAAY;gBACJlL,IAAIoJ,GAAG,CAAH,CAAR;gBACInJ,IAAIiL,GAAG,CAAH,CADR;gBAEIlL,IAAIC,CAAR,EAAW;uBACA,CAAP;aADJ,MAGK,IAAID,IAAIC,CAAR,EAAW;uBACL,CAAC,CAAR;;mBAEG,CAAP;SAXR;;;cAeQ;mBAAQ,CAAC+K,QAAQ7J,IAAR,CAAD,EAAgBA,IAAhB,CAAR;SAAJ,EAAmC5B,EAAnC,CAfJ,CAHJ;;CArgCD;IA2hCHkL,SAAS,SAATA,MAAS,CAACU,UAAD,EAAa5L,EAAb;WAAoBwC,KAAKxC,EAAL,EAASuL,IAAT,CAAcK,UAAd,CAApB;CA3hCN;IA6hCHC,SAAS,SAATA,MAAS,CAAC9Q,CAAD,EAAIiF,EAAJ,EAAW;QACZhB,UAAQgB,EAAR,CAAJ,EAAiB;eACNgC,iBAAiBhC,EAAjB,EAAqBwC,KAAKxC,EAAL,CAArB,EAA+BjF,CAA/B,EAAkC,CAAlC,CAAP;;QAEAlC,MAAM8G,GAAGK,EAAH,CAAV;QACI8L,aAAa9E,UAAU;eAAQjM,KAAK6G,IAAb;KAAV,EAA6B5B,EAA7B,CADjB;WAEO8L,eAAe,CAAC,CAAhB,GAAoBhL,OAAOqB,UAAU,CAAV,EAAatJ,GAAb,CAAP,EAA0BkC,CAA1B,CAApB,GACHzC,UAAOuM,YAAY,CAAC9J,CAAD,CAAZ,EAAiByM,QAAQsE,UAAR,EAAoB9L,EAApB,CAAjB,CAAP,CADJ;CAniCD;IAojCH+L,WAAW,SAAXA,QAAW,CAACH,UAAD,EAAa7Q,CAAb,EAAgBiF,EAAhB,EAAuB;QACxBiC,QAAQ1J,OAAOyH,EAAP,CAAd;QACI4E,aAAa5C,iBAAiBhC,EAAjB,CADjB;QAEInH,MAAM8G,GAAGK,EAAH,CAFV;QAGIhB,UAAQgB,EAAR,CAAJ,EAAiB;eACN4E,WAAW/L,GAAX,EAAgBkC,CAAhB,EAAmB,CAAnB,CAAP;;QAEAgH,MAAM,CAAV;WACOA,MAAME,KAAb,EAAoBF,OAAO,CAA3B,EAA8B;YACtB6J,WAAW7Q,CAAX,EAAciF,GAAG+B,GAAH,CAAd,KAA0B,CAA9B,EAAiC;gBACvBoE,QAAQqB,QAAQzF,GAAR,EAAa/B,EAAb,CAAd;;mBAEO1H,UAAO2M,MAAML,UAAN,EAAkB/L,GAAlB,EAAuB,CAACsN,MAAM,CAAN,CAAD,EAAW,CAACpL,CAAD,CAAX,EAAgBoL,MAAM,CAAN,CAAhB,CAAvB,CAAP,CAAP;;;WAGDvB,WAAWpC,KAAKxC,EAAL,CAAX,EAAqBjF,CAArB,CAAP;CAnkCD;IAskCHqQ,QAAQ,SAARA,KAAQ,CAACjI,IAAD,EAAOF,IAAP,EAAgB;QAChBjE,UAAQiE,IAAR,CAAJ,EAAmB;eACRtD,GAAGsD,IAAH,CAAP;;QAEEhB,QAAQ1J,OAAO0K,IAAP,CAAd;QACIlB,MAAM,CAAV;QACIiK,iBADJ;QAEInT,MAAM8G,GAAGsD,IAAH,CAFV;QAGIgJ,QAAQ,SAARA,KAAQ;eAAc9I,KAAK6I,QAAL,EAAeE,UAAf,CAAd;KAHZ;WAIOnK,MAAME,KAAb,EAAoBF,OAAO,CAA3B,EAA8B;mBACfkB,KAAKlB,GAAL,CAAX;YACIwI,IAAI0B,KAAJ,EAAWpT,GAAX,CAAJ,EAAqB;;;cAGfiI,OAAOjI,GAAP,EAAYmT,QAAZ,CAAN;;WAEGnT,GAAP;CAtlCD;IAylCHyS,WAAW,SAAXA,QAAW,CAACnI,IAAD,EAAOpI,CAAP,EAAUkI,IAAV,EAAmB;;QACpB6I,aAAa9E,UAAU;eAAQ7D,KAAKpI,CAAL,EAAQ6G,IAAR,CAAR;KAAV,EAAiCqB,IAAjC,CAAnB;QACIkD,QAAQqB,QAAQsE,aAAa,CAAC,CAAd,GAAkBA,UAAlB,GAA+B,CAAvC,EAA0C7I,IAA1C,CADZ,CAD0B;WAGnBnC,OAAOqF,MAAM,CAAN,CAAP,EAAiB9B,KAAK8B,MAAM,CAAN,CAAL,CAAjB,CAAP;CA5lCD;IA+lCHgG,iBAAiB,SAAjBA,cAAiB,CAAChJ,IAAD,EAAOoF,GAAP,EAAYC,GAAZ;WACbvD,MAAM,UAACzJ,GAAD,EAAMoG,IAAN;eAAe0J,SAASnI,IAAT,EAAevB,IAAf,EAAqBpG,GAArB,CAAf;KAAN,EAAgD+M,GAAhD,EAAqDC,GAArD,CADa;CA/lCd;IA0mCH4D,UAAU,SAAVA,OAAU,CAACjJ,IAAD,EAAOwG,IAAP,EAAaC,IAAb,EAAsB;QACtBhF,aAAa5C,iBAAiB2H,IAAjB,CAAnB;WACO1E,MAAM,UAACzJ,GAAD,EAAMkF,CAAN,EAAY;YACf2L,eAAe9B,IAAI;mBAAKpH,KAAK1C,CAAL,EAAQC,CAAR,CAAL;SAAJ,EAAqBlF,GAArB,CAArB;eACO,CAAC6Q,YAAD,GAAgBzH,WAAWpJ,GAAX,EAAgBkF,CAAhB,CAAhB,GAAqClF,GAA5C;KAFG,EAGJgH,KAAKmH,IAAL,CAHI,EAGQC,IAHR,CAAP;CA5mCD;IAynCH0C,QAAQ,SAARA,KAAQ,CAAC3C,IAAD,EAAOC,IAAP;WACJ9I,OAAO6I,IAAP,EACIxQ,OAAO;eAAO,CAAC2G,SAASiE,GAAT,EAAc4F,IAAd,CAAR;KAAP,EAAoCC,IAApC,CADJ,CADI;CAznCL;IAooCH2C,YAAY,SAAZA,SAAY,CAAC5C,IAAD,EAAOC,IAAP;WACR,CAACD,IAAD,IAAS,CAACC,IAAV,IAAmB,CAACD,IAAD,IAAS,CAACC,IAA7B,GAAqC,EAArC,GACIzQ,OAAO;eAAO2G,SAASiE,GAAT,EAAc6F,IAAd,CAAP;KAAP,EAAmCD,IAAnC,CAFI;CApoCT;IAgpCH6C,cAAc,SAAdA,WAAc,CAACrJ,IAAD,EAAOsJ,KAAP,EAAc7E,KAAd,EAAwB;QAC5BhD,aAAa5C,iBAAiByK,KAAjB,CAAnB;WACOxH,MAAM,UAACzJ,GAAD,EAAMiF,CAAN;eACL8J,IAAI;mBAAKpH,KAAK1C,CAAL,EAAQC,CAAR,CAAL;SAAJ,EAAqBkH,KAArB,IAA8BhD,WAAWpJ,GAAX,EAAgBiF,CAAhB,CAA9B,GAAmDjF,GAD9C;KAAN,EAED,EAFC,EAEGiR,KAFH,CAAP;CAlpCD;IA+pCHC,aAAa,SAAbA,UAAa,CAACC,MAAD,EAASC,MAAT,EAAoB;;QACzBD,UAAU,CAACC,MAAf,EAAuB;eACZzK,UAAU,CAAV,EAAawK,MAAb,CAAP;KADJ,MAGK,IAAI,CAACA,MAAD,IAAWC,MAAX,IAAsB,CAACD,MAAD,IAAW,CAACC,MAAtC,EAA+C;eACzC,EAAP;;QAEEhI,aAAa5C,iBAAiB2K,MAAjB,CAAnB;WACOrR,SAAO,UAACE,GAAD,EAAMuI,GAAN;eACN,CAACjE,SAASiE,GAAT,EAAc6I,MAAd,CAAD,GAAyBhI,WAAWpJ,GAAX,EAAgBuI,GAAhB,CAAzB,GAAgDvI,GAD1C;KAAP,EAED,EAFC,EAEGmR,MAFH,CAAP;CAvqCD;IAmrCHE,aAAa,SAAbA,UAAa,CAACC,IAAD;uCAAUC,MAAV;cAAA;;;WACTzR,SAAO,UAACE,GAAD,EAAM6G,GAAN;eAAcvB,OAAOtF,GAAP,EAAYkR,WAAWrK,GAAX,EAAgByK,IAAhB,CAAZ,CAAd;KAAP,EAAyD,EAAzD,EAA6DC,MAA7D,CADS;CAnrCV;;AC1BA,IAEHC,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAOC,IAAP;WAAgB9N,aAAW6N,IAAX,EAAiBC,IAAjB,CAAhB;CAFR;IAIHC,eAAe,SAAfA,YAAe,CAACF,IAAD,EAAOC,IAAP;WAAgBjI,MAAM,UAACzJ,GAAD,EAAMC,GAAN,EAAc;YAC3CX,iBAAeW,GAAf,EAAoByR,IAApB,CAAJ,EAA+B;gBACvBzR,GAAJ,IAAWyR,KAAKzR,GAAL,CAAX;;eAEGD,GAAP;KAJ2B,EAK5B,EAL4B,EAKxBP,KAAKgS,IAAL,CALwB,CAAhB;CAJZ;IAWHG,gBAAgB,SAAhBA,aAAgB,CAACH,IAAD,EAAOC,IAAP;WAAgBjI,MAAM,UAACzJ,GAAD,EAAMC,GAAN,EAAc;YAC5C,CAACX,iBAAeW,GAAf,EAAoByR,IAApB,CAAL,EAAgC;gBACxBzR,GAAJ,IAAWwR,KAAKxR,GAAL,CAAX;;eAEGD,GAAP;KAJ4B,EAK7B,EAL6B,EAKzBP,KAAKgS,IAAL,CALyB,CAAhB;CAXb;IAkBHI,gBAAgB,SAAhBA,aAAgB,CAACjS,IAAD;sCAAUC,IAAV;YAAA;;;WAAmB4J,MAAM,UAACzJ,GAAD,EAAMN,GAAN;eACrCkE,aAAW5D,GAAX,EAAgB4R,cAAclS,GAAd,EAAmBE,IAAnB,CAAhB,CADqC;KAAN,EACY,EADZ,EACgBC,IADhB,CAAnB;CAlBb;;ACQA,IAEHT,gBAAa3C,MAAMwJ,YAAN,CAFV;IAIH3G,oBAAiB7C,MAAMqV,gBAAN,CAJd;IAMHnS,YAASnB,OAAOuT,QAAP,CANN;IAQHnO,gBAAapF,OAAOwT,YAAP,CARV;;ACZP;;;;AAIA,AAIO,IASH9N,SAAO1F,OAAOyT,IAAP,CATJ;;ACRP;;;;;;;;AAQA,AAEA;AACA,AA0CA;AACA,AAAO,IAeH3M,WAAS7I,QAAMyV,MAAN,CAfN;IA2BHzJ,eAAajK,SAAO2T,UAAP,CA3BV;IAqCHlJ,cAAYzK,SAAO4T,SAAP,CArCT;IA6CH9U,QAAMb,QAAM4V,KAAN,CA7CH;IAwDHhJ,gBAAc5M,QAAM6V,WAAN,CAxDX;IAkEH5I,gBAAcjN,QAAM8V,WAAN,CAlEX;IA4EH9I,UAAQhN,QAAM+V,KAAN,CA5EL;IAsFH/H,UAAQhO,QAAMgW,KAAN,CAtFL;IA+FH/H,WAASjO,QAAMiW,MAAN,CA/FN;IAwGH9H,WAASnO,QAAMkW,MAAN,CAxGN;IAmHH9H,cAAYpO,QAAMmW,SAAN,CAnHT;IA8HH3H,cAAYxO,QAAMoW,SAAN,CA9HT;IAwIH3H,YAAUzO,QAAMqW,OAAN,CAxIP;IA0IH3H,WAAS1O,QAAMsW,MAAN,CA1IN;IA4IH3H,cAAYD,QA5IT;IA8IHE,UAAQ5O,QAAMuW,KAAN,CA9IL;IAwJH1H,YAAU7O,QAAMwW,OAAN,CAxJP;IAiKHzH,cAAY/O,QAAMyW,SAAN,CAjKT;IAyKHzH,gBAAchP,QAAM0W,WAAN,CAzKX;IAiLHzH,cAAYjP,QAAM2W,SAAN,CAjLT;IAyLHxH,gBAAcnP,QAAM4W,WAAN,CAzLX;IAkMHxH,SAAOpP,QAAM6W,IAAN,CAlMJ;IA2MHxH,SAAOrP,QAAM8W,IAAN,CA3MJ;IAqNHvH,YAAUvP,QAAM+W,OAAN,CArNP;IA8NHvH,cAAYxP,QAAMgX,SAAN,CA9NT;IAwOHvH,cAAYzP,QAAMiX,SAAN,CAxOT;IAiPHrH,iBAAe5P,QAAMkX,YAAN,CAjPZ;IA4PHrH,SAAO7P,QAAMmX,IAAN,CA5PJ;IA8PHrH,gBAAc9P,QAAMoX,WAAN,CA9PX;IAsQHrH,OAAK/P,QAAMqX,EAAN,CAtQF;IA8QHrH,SAAOhQ,QAAMsX,IAAN,CA9QJ;IAgRHpW,WAASlB,QAAMuX,MAAN,CAhRN;IA2RHtH,cAAYjQ,QAAMwX,SAAN,CA3RT;IA6RHtH,SAAOlQ,QAAMyX,IAAN,CA7RJ;IA+RHtH,YAAUpO,SAAO2V,OAAP,CA/RP;IAiSHtH,WAASL,IAjSN;IAmSHM,eAAarQ,QAAM2X,UAAN,CAnSV;IAqSHjH,eAAa1Q,QAAM4X,UAAN,CArSV;IAuSHhH,cAAY5Q,QAAM6X,SAAN,CAvST;IAySH/G,oBAAkB9Q,QAAM8X,eAAN,CAzSf;IAoTH7G,YAAUjR,QAAM+X,OAAN,CApTP;IAsTHxG,gBAAcvR,QAAMgY,WAAN,CAtTX;IAiUHvG,QAAMzR,QAAMiY,GAAN,CAjUH;IAwVHhG,YAAUjS,QAAMkY,OAAN,CAxVP;IAuWHhG,aAAWnQ,SAAOoW,QAAP,CAvWR;IAqXHC,aAAWlG,UArXR;IAoYHmG,aAAWnG,UApYR;IAoZHoG,aAAWpG,UApZR;IAsZHI,QAAMtS,QAAMuY,GAAN,CAtZH;IAwZH/F,QAAMxS,QAAMwY,GAAN,CAxZH;IA0ZH3F,cAAY7S,QAAMyY,SAAN,CA1ZT;IA4ZH1F,cAAY/S,QAAM0Y,SAAN,CA5ZT;IA8ZHC,UAAQ,SAARA,QAAQ;WAAM,IAAN;CA9ZL;IAgaHC,WAAS,SAATA,SAAS;WAAM,IAAN;CAhaN;IAkaHC,UAAQ,SAARA,QAAQ;WAAM,IAAN;CAlaL;IAoaHC,WAAS,SAATA,SAAS;WAAM,IAAN;CApaN;IAsaH1F,WAASpT,QAAM+Y,MAAN,CAtaN;IAwaHxF,WAASvT,QAAMgZ,MAAN,CAxaN;IA0aH/F,WAASjT,QAAMiZ,MAAN,CA1aN;IA4aHrF,WAAS5T,QAAMkZ,MAAN,CA5aN;IA2bHpF,aAAW9T,QAAMmZ,QAAN,CA3bR;IA6bHhG,UAAQnT,QAAMoZ,KAAN,CA7bL;IA+bH/F,aAAWrT,QAAMqZ,QAAN,CA/bR;IAicHnF,mBAAiBlU,QAAMsZ,cAAN,CAjcd;IA2cHnF,YAAUnU,QAAMuZ,OAAN,CA3cP;IAodHlF,UAAQrU,QAAMwZ,KAAN,CApdL;IA6dHlF,cAAYtU,QAAMyZ,SAAN,CA7dT;IAueHlF,gBAAcvU,QAAM0Z,WAAN,CAveX;IAifHjF,eAAazU,QAAM2Z,UAAN,CAjfV;IA0fH/E,eAAa7S,SAAO6X,UAAP,CA1fV;;ACtDP;;;AAGA,AAEA;;;;;;;;AAQA,AAAO,IAAMC,YAAU,SAAVA,OAAU;oCAAI1Z,IAAJ;QAAA;;;SAAa;WAAQ6N,QAAM,UAAChK,KAAD,EAAQ/D,EAAR;aAAeA,GAAG+D,KAAH,CAAf;KAAN,EAAgC8V,IAAhC,EAAsC3Z,IAAtC,CAAR;GAAb;CAAhB;;ACbP;;;;;;;;;;AAUA,AAAO,IAAMyI,YAAU,SAAVA,OAAU;SAAM,UAAC9F,CAAD,EAAIgH,GAAJ,EAAS/B,EAAT;WAAgB,CAAC9H,GAAG6C,CAAH,EAAMgH,GAAN,EAAW/B,EAAX,CAAjB;GAAN;CAAhB;;ACVP;;;;;;;;;;AAUA,AAAO,IAAMgS,OAAK,SAALA,EAAK;SAAKjX,CAAL;CAAX;;ACVP;;;AAGA,AAKO,IAQHkX,UAAQ,SAARA,KAAQ;SAAMhY,OAAO;sCAAI7B,IAAJ;UAAA;;;WAAaI,QAAMN,EAAN,EAAUyM,QAAQvM,IAAR,CAAV,CAAb;GAAP,CAAN;CARL;IAgBH8Z,SAAO,SAAPA,IAAO;SAAMja,MAAM,UAACyI,CAAD,EAAID,CAAJ;WAAUf,OAAKxH,EAAL,EAASuI,CAAT,EAAYC,CAAZ,CAAV;GAAN,CAAN;CAhBJ;;ACRP;;;AAGA,AAEO,IAUHyR,UAAQla,MAAM,UAACma,SAAD,EAAY7O,SAAZ,EAAuB8O,YAAvB,EAAwC;QAC9ChP,SAASgP,YAAb;WACO,CAACD,UAAU/O,MAAV,CAAR,EAA2B;iBACdE,UAAUF,MAAV,CAAT;;WAEGA,MAAP;CALI,CAVL;;ACLP;;;;;ACAO,IAAMiP,SAAS,SAATA,MAAS;SAAKvP,KAAKwP,GAAL,CAASxX,CAAT,IAAc,CAAC,CAApB;CAAf;;ACAP;;;;AAIA,AAEA;;;;;;;AAOA,AAAO,IAAMyX,UAAQpY,cAAc,OAAd,CAAd;;ACbP;;;;;AAKA,AAIA;;;;;;;;AAQA,AAAO,IAAMoY,WAAQva,MAAMwa,OAAN,CAAd;;ACjBP;;;;;AAKA,AAIO,IAQHC,QAAQF,SAAM,UAAN,CARL;IAgBHG,QAAQH,SAAM,UAAN,CAhBL;IAwBHI,UAAU1N,cAAY,GAAZ,CAxBP;IAgCH2N,UAAU3N,cAAY,IAAZ,CAhCP;;ACTP;;;;;AAKA,AAAO,IAAI4N,UAAU,SAAd;;ACLP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}