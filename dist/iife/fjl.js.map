{"version":3,"file":"fjl.js","sources":["../../src/uncurried/utils_.js","../../src/uncurried/jsPlatform/object_.js","../../src/uncurried/jsPlatform/array_.js","../../src/uncurried/jsPlatform/list_.js","../../src/uncurried/jsPlatform/string_.js","../../src/uncurried/jsPlatform/function_.js","../../src/uncurried/jsPlatform_.js","../../src/uncurried/functionOps/curry_.js","../../src/uncurried/objectOps/prop_.js","../../src/uncurried/objectOps/typeOf_.js","../../src/uncurried/objectOps/is_.js","../../src/uncurried/objectOps/assignDeep_.js","../../src/uncurried/functionOps/negate_.js","../../src/booleanOps.js","../../src/uncurried/objectOps/of_.js","../../src/uncurried/objectOps_.js","../../src/uncurried/listOps/aggregation_.js","../../src/uncurried/listOps/map_.js","../../src/uncurried/listOps/utils_.js","../../src/uncurried/listOps_.js","../../src/uncurried/objectOps/setTheory_.js","../../src/objectOps.js","../../src/uncurried/functionOps/until_.js","../../src/uncurried/functionOps/flip_.js","../../src/uncurried/functionOps/curry__.js","../../src/uncurried/functionOps/id_.js","../../src/uncurried/functionOps/compose_.js","../../src/functionOps.js","../../src/uncurried/functionOps_.js","../../src/listOps.js","../../src/jsPlatform/string.js","../../src/stringOps.js","../../src/generated/version.js","../../src/fjl.js"],"sourcesContent":["export const\n\n    fPureTakesOne = name => (arg, f) => f[name](arg),\n\n    fPureTakes2 = name => (arg1, arg2, f) => f[name](arg1, arg2),\n\n    fPureTakes3 = name => (arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3),\n\n    fPureTakes4 = name => (arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4),\n\n    fPureTakes5 = name => (arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5),\n\n    fPureTakesOneOrMore = name => (f, ...args) => f[name](...args);\n","/**\n * Created by elydelacruz on 9/6/2017.\n * Defines some of the platform methods for objects (the ones used within `fjl`) uncurried for use\n * throughout the library.  @note Doesn't include all methods for objects just the ones used in\n *  the library.\n * @todo change all files named '*UnCurried' to '*_'.\n */\n\nimport {fPureTakes2, fPureTakes3, fPureTakes4, fPureTakes5, fPureTakesOne} from '../utils_';\n\nexport const\n\n    /**\n     * Returns whether constructor has derived objectOps.\n     * @function module:jsPlatform_objectOps_.instanceOf\n     * @param instanceConstructor {Function} - Constructor.\n     * @param instance {*}\n     * @instance {*}\n     * @returns {Boolean}\n     */\n    instanceOf = (instanceConstructor, instance) =>\n        instance instanceof instanceConstructor,\n\n    /**\n     * @function module:jsPlatform_objectOps_.hasOwnProperty\n     * @param propName {*}\n     * @param typeInstance {*}\n     * @returns {Boolean}\n     */\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\n\n    /**\n     * @function module:jsPlatform_objectOps_.length\n     * @param x {*}\n     * @returns {Number}\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\n     */\n    length = x => x.length,\n\n    /**\n     * @function module:jsPlatform_objectOps_.hasOwnProperty\n     * @param x {*}\n     * @returns {Number}\n     * @throws {Error} - Throws an error if value doesn't have a `toString`.\n     */\n    toString = x => x.toString(),\n\n    /**\n     * Gets own enumerable keys of passed in object (`Object.keys`).\n     * @function module:jsPlatform_objectOps_.keys\n     * @param obj {*}\n     * @returns {Array<String>}\n     */\n    keys = obj => Object.keys(obj),\n\n    /**\n     * Defined as `Object.assign` else is the same thing but shimmed.\n     * @function module:jsPlatform_objectOps_.assign\n     * @param obj0 {Object}\n     * @param objs {...{Object}}\n     * @returns {Object}\n     */\n    assign = (() =>\n        Object.assign ?\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\n            (obj0, ...objs) => objs.reduce((topAgg, obj) => {\n                return keys(obj).reduce((agg, key) => {\n                    agg[key] = obj[key];\n                    return agg;\n                }, topAgg);\n            }, obj0))(),\n\n    defineProperty = (propName, propDescriptor, obj) =>\n        Object.defineProperty(obj, propName, propDescriptor),\n\n    defineProperties = (propDescriptors, obj) =>\n        Object.defineProperties(obj, propDescriptors),\n\n    defineEnumProp = (propName, propDescriptor, obj) =>\n        defineProperty(propName,\n            assign({enumerable: true}, propDescriptor),\n            obj),\n\n    defineEnumNumber = (propName, obj, defaultValue = undefined) => {\n        let _value = defaultValue;\n        defineEnumProp(propName, {\n            get: function () { return _value; },\n            set: function () { }\n        });\n    };\n\nObject.getOwnPropertyNames(Object)\n    .filter(name => Object[name].length > 1)\n    .reduce((agg, name) => {\n        switch (length(Object[name])) {\n            case 2:\n                agg[name] = fPureTakes2(name);\n                break;\n            case 3:\n                agg[name] = fPureTakes3(name);\n                break;\n            case 4:\n                agg[name] = fPureTakes4(name);\n                break;\n            case 5:\n                agg[name] = fPureTakes5(name);\n                break;\n            default:\n                agg[name] = fPureTakesOne(name);\n                break;\n        }\n        return agg;\n    }, {});\n\nexport {\n\n};\n\n","/**\n * Created by elyde on 7/20/2017.\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\n * @module jsPlatform_arrayOps_\n * @private\n * @todo updated doc blocks to list correct/updated module name.\n */\n\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils_';\n\nexport const\n\n    /**\n     * Array.prototype.reverse generator (generates a functionOps that calls the prototype version or a\n     * shimmed version if it doesn't exist).\n     * @returns {Function}\n     */\n    defineReverse = () =>\n        Array.prototype.reverse ? x => x.reverse() :\n            x => x.reduceRight((agg, item) => {\n                agg.push(item);\n                return agg;\n            }, []),\n\n    /**\n     * Maps a functionOps to functor (listOps etc.).\n     * @function module:jsPlatform_array_.map\n     * @param fn {Function}\n     * @param functor {Array|{map: {Function}}}\n     * @returns {Array|{map: {Function}}}\n     */\n    map = fPureTakesOne('map'),\n\n    /**\n     * Filters a functor (listOps etc.) with passed in functionOps.\n     * @function module:jsPlatform_array_.filter\n     * @param fn {Function}\n     * @param functor {Array|{filter: {Function}}}\n     * @returns {Array|{filter: {Function}}}\n     */\n    filter = fPureTakesOne('filter'),\n\n    /**\n     * Reduces a foldable (listOps etc.) with passed in functionOps.\n     * @function module:jsPlatform_array_.reduce\n     * @param fn {Function}\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {Array|{reduce: {Function}}}\n     */\n    reduce = fPureTakes2('reduce'),\n\n    /**\n     * Reduces a foldable (listOps etc.) from the right with passed in functionOps.\n     * @function module:jsPlatform_array_.reduceRight\n     * @param fn {Function}\n     * @param functor {Array|{reduceRight: {Function}}}\n     * @returns {Array|{reduceRight: {Function}}}\n     */\n    reduceRight = fPureTakes2('reduceRight'),\n\n    /**\n     * For each on functor (Array|Object|etc.).\n     * @param fn {Function}\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\n     */\n    forEach = fPureTakesOne('forEach'),\n\n    /**\n     * Returns `true` if `fn` (predicate) returns true for at least one item\n     * in functor else returns `false`.\n     * @param fn {Function} - Predicate.\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have a `some` method.\n     */\n    some = fPureTakesOne('some'),\n\n    /**\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\n     * @param fn {Function} - Predicate.\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have an `every` method.\n     */\n    every = fPureTakesOne('every'),\n\n    /**\n     * Array.prototype.join\n     * @function module:listPrelude.join\n     * @param separator {String|RegExp}\n     * @param arr {Array}\n     * @returns {String}\n     */\n    join = fPureTakesOne('join'),\n\n    /**\n     * Same as Array.prototype.push\n     * @param item {*}\n     * @param arr {Array}\n     * @returns {Number}\n     */\n    push = fPureTakesOneOrMore('push'),\n\n    /**\n     * Reverses an listOps (shimmed if not exists).\n     * @function module:listPrelude.reverse\n     * @return {Array}\n     */\n    reverse = defineReverse();\n","/**\n *  List operations that overlap (apart from globally overlapping props and functions like `length` and `toString`)\n *      on both strings and arrays.\n */\n\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils_';\n\n// export {length, toString} from './objectOps_';\n\nexport const\n\n    /**\n     * Concats/appends all functors onto the end of first functor.\n     * Note:  functors passed in after the first one must be of the same type.\n     * @function module:jsPlatform_list_.concat\n     * @param functor {Array|Object|*}\n     * @param ...functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have an `every` method.\n     */\n    concat = fPureTakesOneOrMore('concat'),\n\n    /**\n     * Same as Array.prototype.slice\n     * @function module:jsPlatform_list_.slice\n     * @param separator {String|RegExp}\n     * @param arr{Array}\n     * @returns {Array}\n     */\n    slice = fPureTakes2('slice'),\n\n    /**\n     * `Array.prototype.includes` or shim.\n     * @function module:jsPlatform_list_.includes\n     * @param value {*}\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    includes = (() => 'includes' in Array.prototype ?\n            fPureTakesOne('includes') :\n            (value, xs) => xs.indexOf(value) > -1)(),\n\n    /**\n     * Searches list/list-like for given element `x`.\n     * @function module:jsPlatform_list_.indexOf\n     * @param x {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like to look in.\n     * @returns {Number} - `-1` if element not found else index at which it is found.\n     */\n    indexOf = fPureTakesOne('indexOf'),\n\n    /**\n     * Last index of (`Array.prototype.lastIndexOf`).\n     * @function module:jsPlatform_list_.lastIndexOf\n     * @param x {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like to look in.\n     * @returns {Number} - `-1` if element not found else index at which it is found.\n     */\n    lastIndexOf = fPureTakesOne('lastIndexOf')\n\n;\n","/**\n * Created by elydelacruz on 9/6/2017.\n */\n\nimport {fPureTakesOne} from '../utils_';\n\n/**\n * Functional version of `String.prototype.split`.\n * @function module:stringOps_.split\n * @param separator {String|RegExp}\n * @param str {String}\n * @returns {Array}\n */\nexport const split = fPureTakesOne('split');\n","/**\n * Created by elydelacruz on 9/7/2017.\n * @module jsPlatform_function_\n * @private\n */\nexport const\n\n    /**\n     * Functional `apply` function (takes no context).\n     * @function module:jsPlatform_function_.apply\n     * @param fn {Function}\n     * @param args {Array|*}\n     * @returns {*}\n     */\n    apply = (fn, args) => fn.apply(null, args),\n\n    /**\n     * Functional `call` function (takes no context).\n     * @function module:jsPlatform_function_.call\n     * @param fn {Function}\n     * @param args {...*}\n     * @returns {*}\n     */\n    call = (fn, ...args) => apply(fn, args);\n","/**\n * @module jsPlatform_\n * @private\n */\nexport * from './jsPlatform/object_';\nexport * from './jsPlatform/array_';\nexport * from './jsPlatform/list_';\nexport * from './jsPlatform/string_';\nexport * from './jsPlatform/function_';\n","/**\n * @author elydelacruz\n * @created 12/6/2016.\n * @memberOf functionOps_\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\n */\nimport {apply, length, concat} from '../jsPlatform_';\nexport const\n\n    /**\n     * Curries a functionOps based on it's defined arity (argument's arrayOps expected length).\n     * @function module:functionOps_.curry\n     * @param fn {Function}\n     * @param argsToCurry {...*}\n     * @returns {Function}\n     */\n    curry = (fn, ...argsToCurry) => {\n        return (...args) => {\n            const concatedArgs = concat(argsToCurry, args);\n            return length(concatedArgs) < length(fn) ?\n                apply(curry, concat([fn], concatedArgs)) :\n                apply(fn, concatedArgs);\n        };\n    },\n\n    /**\n     * Curries a functionOps up to a given arity.\n     * @function module:functionOps_.curryN\n     * @param executeArity {Number}\n     * @param fn {Function}\n     * @param curriedArgs {...*}\n     * @returns {Function}\n     */\n    curryN = (executeArity, fn, ...curriedArgs) => {\n        return (...args) => {\n            let concatedArgs = concat(curriedArgs, args),\n                canBeCalled = (length(concatedArgs) >= executeArity) || !executeArity;\n            return !canBeCalled ? apply(curryN, concat([executeArity, fn], concatedArgs)) :\n                apply(fn, concatedArgs);\n        };\n    },\n\n    /**\n     * Curries a functionOps up to an arity of 2 (won't call functionOps until 2 or more args).\n     * @function module:functionOps_.curry2\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry2 = fn => curryN(2, fn),\n\n    /**\n     * Curries a functionOps up to an arity of 3 (won't call functionOps until 3 or more args).\n     * @function module:functionOps_.curry3\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry3 = fn => curryN(3, fn),\n\n    /**\n     * Curries a functionOps up to an arity of 4 (won't call functionOps until 4 or more args).\n     * @function module:functionOps_.curry4\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry4 = fn => curryN(4, fn),\n\n    /**\n     * Curries a functionOps up to an arity of 5 (won't call functionOps until 5 or more args).\n     * @function module:functionOps_.curry5\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry5 = fn => curryN(5, fn);\n","/**\n * @memberOf objectOps_\n */\n\n/**\n * Returns property value if found; Else `undefined`.\n * @function module:objectOps_.prop\n * @param name {String} - Key to search on `obj`\n * @param obj {Object} - Object to search `name` on.\n * @returns {*}\n */\nexport const prop = (name, obj) => obj[name];\n","/**\n * Created by elyde on 12/18/2016.\n * @memberOf objectOps_\n */\nconst _Number = Number.name,\n    _NaN = 'NaN',\n    _Null = 'Null',\n    _Undefined = 'Undefined',\n    _undefined = 'undefined';\n\n/**\n * Returns the class name of an object from it's class stringOps.\n * @note Returns 'NaN' if value `isNaN` and value type is 'Number'.\n * @function module:objectOps_.typeOf\n * @param value {*}\n * @returns {string} - Constructor's name property if not null or undefined (in which case a\n *  name representing those types is returned ('Null' and or 'Undefined' (es6 compliant))).\n */\nexport function typeOf (value) {\n    let retVal;\n    if (typeof value === _undefined) {\n        retVal = _Undefined;\n    }\n    else if (value === null) {\n        retVal = _Null;\n    }\n    else {\n        let constructorName = (value).constructor.name;\n        retVal = constructorName === _Number && isNaN(value) ?\n            _NaN : constructorName;\n    }\n    return retVal;\n}\n","/**\n * Created by elyde on 12/18/2016.\n * @memberOf objectOps_\n */\n\nimport {typeOf} from './typeOf_';\nimport {instanceOf, length, keys, hasOwnProperty} from '../jsPlatform/object_';\n\nlet _String = String.name,\n    _Number = Number.name,\n    _Object = Object.name,\n    _Boolean = Boolean.name,\n    _Function = Function.name,\n    _Array = Array.name,\n    _Symbol = 'Symbol',\n    _Map = 'Map',\n    _Set = 'Set',\n    _WeakMap = 'WeakMap',\n    _WeakSet = 'WeakSet',\n    _Null = 'Null',\n    _Undefined = 'Undefined';\n\nexport const\n\n    /**\n     * Returns whether a value is a functionOps or not.\n     * @function module:objectOps_.isFunction\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isFunction = value => instanceOf(Function, value),\n\n    /**\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\n     * be a named constructor/functionOps-instance;  E.g.,\n     * ```\n     *  functionOps SomeName () {} // or\n     *  var SomeName = functionOps SomeName () {} // or\n     *  class SomeName {}\n     * ```\n     * @function module:objectOps_.isType\n     * @param type {Function|String} - Constructor or constructor name\n     * @param obj {*}\n     * @return {Boolean}\n     */\n    isType = (type, obj) => typeOf(obj) === (isFunction(type) ? type.name : type),\n\n    /**\n     * Checks if `value` is an es2015 `class`.\n     * @function module:objectOps_.isClass\n     * @param x {*}\n     * @returns {boolean}\n     */\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test(x.toString().substr(0, 10)),\n\n    /**\n     * Returns a booleanOps depicting whether a value is callable or not.\n     * @function module:objectOps_.isCallable\n     * @tentative\n     * @private\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isCallable = x => isFunction(x) && !isClass(x),\n\n    /**\n     * Checks if value is an arrayOps.\n     * @function module:objectOps_.isArray\n     * @param value {*}\n     * @returns {boolean}\n     */\n    isArray = value => isType(Array, value),\n\n    /**\n     * Checks whether value is an object or not.\n     * @function module:objectOps_.isObject\n     * @param value\n     * @returns {Boolean}\n     */\n    isObject = value => isType(_Object, value),\n\n    /**\n     * Checks if value is a booleanOps.\n     * @function module:objectOps_.isBoolean\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isBoolean = value => isType(_Boolean, value),\n\n    /**\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\n     * @function module:objectOps_.isNumber\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isNumber = value => isType(_Number, value),\n\n    /**\n     * Checks whether value is a stringOps or not.\n     * @function module:objectOps_.isString\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isString = value => isType(_String, value),\n\n    /**\n     * Checks whether value is of `Map` or not.\n     * @function module:objectOps_.isMap\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isMap = value => isType(_Map, value),\n\n    /**\n     * Checks whether value is of `Set` or not.\n     * @function module:objectOps_.isSet\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isSet = value => isType(_Set, value),\n\n    /**\n     * Checks whether value is of `WeakMap` or not.\n     * @function module:objectOps_.isWeakMap\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isWeakMap = value => isType(_WeakMap, value),\n\n    /**\n     * Checks whether value is of `WeakSet` or not.\n     * @function module:objectOps_.isWeakSet\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isWeakSet = value => isType(_WeakSet, value),\n\n    /**\n     * Checks if value is undefined.\n     * @function module:objectOps_.isUndefined\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isUndefined = value => isType(_Undefined, value),\n\n    /**\n     * Checks if value is null.\n     * @function module:objectOps_.isNull\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isNull = value => isType(_Null, value),\n\n    /**\n     * Checks if value is a `Symbol`.\n     * @function module:objectOps_.isSymbol\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isSymbol = value => isType(_Symbol, value),\n\n    /**\n     * @tentative\n     * @private\n     */\n    isPromise = value => isType('Promise', value),\n\n    /**\n     * Checks if given `x` is one of the four\n     * \"usable\" immutable JS primitives; I.e.,\n     *  One of [String, Boolean, Number, Symbol]\n     * @function module:objectOps_.isUsableImmutablePrimitive\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isUsableImmutablePrimitive = x => {\n        const typeOfX = typeOf(x);\n        return [_String, _Number, _Boolean, _Symbol]\n            .some(Type => Type === typeOfX);\n    },\n\n    /**\n     * Checks if !length.\n     * @function module:objectOps.isEmptyList\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isEmptyList = x => !length(x),\n\n    /**\n     * Checks if object has own properties/enumerable-props or not.\n     * @function module:objectOps.isEmptyObject\n     * @param obj {*}\n     * @returns {Boolean}\n     */\n    isEmptyObject = obj => isEmptyList(keys(obj)),\n\n    /**\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\n     * @function module:objectOps_.isEmptyCollection\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isEmptyCollection = x => x.size === 0,\n\n    /**\n     * Checks to see if passed in argument is empty.\n     * @function module:objectOps_.isEmpty\n     * @param value {*} - Value to check.\n     * @returns {Boolean}\n     */\n    isEmpty = value => {\n        let typeOfValue = typeOf(value),\n            retVal;\n\n        if (!value) { // '', 0, `null`, `undefined` or `false` then is empty\n            retVal = true;\n        }\n        else if (typeOfValue === _Array || typeOfValue === _Function) {\n            retVal = isEmptyList(value);\n        }\n        else if (typeOfValue === _Number && value !== 0) {\n            retVal = false;\n        }\n        else if (typeOfValue === _Object) {\n            retVal = isEmptyObject(value);\n        }\n        else if (hasOwnProperty('size', value)) {\n            retVal = isEmptyCollection(value);\n        }\n        else {\n            retVal = !value;\n        }\n        return retVal;\n    },\n\n    /**\n     * Returns true if an element is not empty and is of type.\n     * @function module:objectOps_.notEmptyAndOfType\n     * @tentative\n     * @private\n     * @param type {String|Function} - Type to check against (stringOps name or actual constructor).\n     * @param value {*} - Value to check.\n     * @returns {Boolean}\n     */\n    notEmptyAndOfType = (type, value) => !isEmpty(value) && isType(type, value),\n\n    /**\n     * Returns whether passed in values is defined and not null or not.\n     * @function module:objectOps_.isset\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isset = x => !isNull(x) && !isUndefined(x);\n","\nimport {isObject} from './is_';\n\nimport {keys, hasOwnProperty} from '../jsPlatform/object_';\n\nexport const\n    /**\n     * Merges all objects down into one.\n     * @function module:jsPlatform.objectOps_.assignDeep\n     * @param obj0 {Object}\n     * @param objs {...{Object}}\n     * @returns {Object}\n     */\n    assignDeep = (obj0, ...objs) =>\n        objs.reduce((topAgg, obj) =>\n                keys(obj).reduce((agg, key) => {\n                    let propDescription = Object.getOwnPropertyDescriptor(agg, key);\n                    // If property is not writable move to next item in collection\n                    if (hasOwnProperty(key, agg) && propDescription &&\n                        !(propDescription.get && propDescription.set) &&\n                        !propDescription.writable) {\n                        return agg;\n                    }\n                    if (isObject(agg[key]) && isObject(obj[key])) {\n                        assignDeep(agg[key], obj[key]);\n                    }\n                    else { agg[key] = obj[key]; }\n                    return agg;\n                }, topAgg)\n            , obj0);\n","/**\n * @memberOf functionOps_\n */\n\nimport {apply} from '../jsPlatform/function_';\n\nimport {reverse} from '../jsPlatform/array_';\n\nexport const\n\n    negateF = fn => (a, b) => !fn(a, b),\n\n    negateF3 = fn => (a, b, c) => !fn(a, b, c),\n\n    negateF4 = fn => (a, b, c, d) => !fn(a, b, c, d),\n\n    negateF5 = fn => (a, b, c, d, e) => !fn(a, b, c, d, e),\n\n    /**\n     * Negates a javascript-'generic' predicate; `Function<element, index, list>`.\n     * @function module:functionOps_.negateP\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    negateP = negateF3,\n\n    /**\n     * Returns a new function which is the dual of `fn` (or the negated version of `fn`).\n     * @function module:functionOps_.negateFMany\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    negateFMany = fn => (...args) => !apply(fn, reverse(args));\n","/**\n * Created by elyde on 7/15/2017.\n * @module booleanOps\n */\n\nexport const\n\n    /**\n     * Returns whether `value` is 'truthy' or not\n     * @function module:booleanOps.isTruthy\n     * @param value\n     * @returns {Boolean}\n     */\n    isTruthy = value => !!value,\n\n    /**\n     * Returns whether `value` is 'falsy' or not\n     * @function module:booleanOps.isFalsy\n     * @param value\n     * @returns {Boolean}\n     */\n    isFalsy = value => !value,\n\n    /**\n     * Returns `true`.\n     * @function module:booleanOps.alwaysTrue\n     * @returns {Boolean}\n     */\n    alwaysTrue = () => true,\n\n    /**\n     * Returns `false`.\n     * @function module:booleanOps.alwaysFalse\n     * @returns {Boolean}\n     */\n    alwaysFalse = () => false;\n","import {isFunction, isUsableImmutablePrimitive, isset} from './is_';\nimport {hasOwnProperty} from '../jsPlatform/object_';\nimport {apply} from '../jsPlatform/function_';\n\nexport const of = (x, ...args) => {\n    if (!isset(x)) { return undefined; }\n    const constructor = x.constructor;\n    if (hasOwnProperty('of', constructor)) {\n        return apply(constructor.of, args);\n    }\n    else if (isUsableImmutablePrimitive(x)) {\n        return apply(constructor, args);\n    }\n    else if (isFunction(constructor)) {\n        return new constructor(...args);\n    }\n    return undefined;\n};\n","/**\n * @module objectOps_\n * @private\n */\nexport * from './jsPlatform/object_';\nexport * from './objectOps/prop_';\nexport * from './objectOps/typeOf_';\nexport * from './objectOps/is_';\nexport * from './objectOps/of_';\nexport * from './objectOps/assignDeep_';\nexport * from './objectOps/setTheory_';\n","import {typeOf} from '../objectOps_';\n\nexport const\n\n    aggregateStr = (agg, item) => agg + item,\n\n    aggregateArr = (agg, item) => {\n        agg.push(item);\n        return agg;\n    },\n\n    aggregateObj = (agg, item, ind) => {\n        agg[ind] = item;\n        return agg;\n    },\n\n    aggregatorByType = x => {\n        switch (typeOf(x)) {\n            case 'String': return aggregateStr;\n            case 'Array': return aggregateArr;\n            case 'Object':\n            default: return aggregateObj;\n        }\n    };\n","import {of} from   '../objectOps/of_';\n\nimport {aggregatorByType}   from './aggregation_';\n\nimport {length}              from '../jsPlatform/object_';\n\n/**\n * @function module:listOps.map\n * @param fn {Function} - Function to map on functor item(s).\n * @param xs {Array|String|*} - Functor.\n * @returns {Array|String|*} - Functor type that is passed in.\n */\nexport const map = (fn, xs) => {\n    let ind = 0,\n        limit = length(xs),\n        out = of(xs),\n        aggregate = aggregatorByType(xs);\n    if (!limit) { return out; }\n    for (; ind < limit; ind += 1) {\n        out = aggregate(out, fn(xs[ind], ind, xs), ind, xs);\n    }\n    return out;\n};\n","/**\n * List operator utils module.\n * @module listOpsUtils_\n * @private\n */\nimport {apply}              from '../jsPlatform/function_';  // un-curried version\nimport {slice}              from '../jsPlatform/list_';      // un-curried version good for both strings and arrays\nimport {length}             from '../jsPlatform/object_';\nimport {alwaysFalse}        from '../../booleanOps';\nimport {map}                from './map_';\n\nexport * from './aggregation_';\n\nexport const\n\n    /**\n     * Returns a slice of the given list from `startInd` to the end of the list.\n     * @function module:listOpsUtils_.sliceFrom\n     * @param startInd {Number}\n     * @param arr {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    sliceFrom = (startInd, arr) => slice(startInd, length(arr), arr),\n\n    /**\n     * Slices from index `0` to given index.\n     * @function module:listOpsUtils_.sliceTo\n     * @param toInd {Number}\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    sliceTo = (toInd, xs) => slice(0, toInd, xs),\n\n    /**\n     * Slices a copy of list.\n     * @function listOpsUtils_.sliceFrom\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    copy = xs => sliceFrom(0, xs),\n\n    /**\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\n     * @function module:listOpsUtils_.genericAscOrdering\n     * @param a {*}\n     * @param b {*}\n     * @returns {number}\n     */\n    genericAscOrdering = (a, b) => {\n        if (a > b) { return 1; }\n        else if (a < b) { return -1; }\n        return 0;\n    },\n\n    /**\n     * Returns length of all passed lists in list.\n     * @function module:listOpsUtils_.lengths\n     * @param lists ...{Array|String|*}\n     * @returns {Array|String|*}\n     */\n    lengths = (...lists) => length(lists) ? map(length, lists) : [],\n\n    /**\n     * @function module:listOpsUtils_.lengthsToSmallest\n     * @param lists {...(Array|String|*)}\n     * @returns {Array|String|*}\n     */\n    lengthsToSmallest = (...lists) => {\n        const listLengths = apply(lengths, lists),\n            smallLen = Math.min.apply(Math, listLengths);\n        return map((list, ind) => listLengths[ind] > smallLen ?\n            sliceTo(smallLen, list) : copy(list), lists);\n    },\n\n    reduceUntil = (pred, op, agg, arr) => {\n        const limit = length(arr);\n        if (!limit) { return agg; }\n        let ind = 0,\n            result = agg;\n        for (; ind < limit; ind++) {\n            if (pred(arr[ind], ind, arr)) { break; }\n            result = op(result, arr[ind], ind, arr);\n        }\n        return result;\n    },\n\n    reduceRightUntil = (pred, op, agg, arr) => {\n        const limit = length(arr);\n        if (!limit) { return agg; }\n        let ind = limit - 1,\n            result = agg;\n        for (; ind >= 0; ind--) {\n            if (pred(arr[ind], ind, arr)) { break; }\n            result = op(result, arr[ind], ind, arr);\n        }\n        return result;\n    },\n\n    reduce = (operation, agg, arr) =>\n        reduceUntil(\n            alwaysFalse,            // predicate\n            operation,              // operation\n            agg,                    // aggregator\n            arr),                   // list\n\n    reduceRight = (operation, agg, arr) =>\n        reduceRightUntil(\n            alwaysFalse,            // predicate\n            operation,              // operation\n            agg,                    // aggregator\n            arr),                   // list\n\n    /**\n     * Gets last index of a list/list-like (Array|String|Function etc.).\n     * @function module:listOpsUtils_lastIndex\n     * @param x {Array|String|*} - list like or list.\n     * @returns {Number} - `-1` if no element found.\n     */\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\n\n    /**\n     * Finds index in string or list.\n     * @function module:listOpsUtils_findIndexWhere\n     * @param pred {Function} - Predicate<element, index, arr>.\n     * @param arr {Array|String}\n     * @returns {Number} - `-1` if predicate not matched else `index` found\n     */\n    findIndexWhere = (pred, arr) => {\n        let ind = -1,\n            predicateFulfilled = false;\n        const limit = length(arr);\n        while (ind < limit && !predicateFulfilled) {\n            predicateFulfilled = pred(arr[++ind], ind, arr);\n        }\n        return ind;\n    },\n\n    /**\n     * Finds index in list from right to left.\n     * @function module:listOpsUtils_findIndexWhereRight\n     * @param pred {Function} - Predicate<element, index, arr>.\n     * @param arr {Array|String}\n     * @returns {Number} - `-1` if predicate not matched else `index` found\n     */\n    findIndexWhereRight = (pred, arr) => {\n        const limit = length(arr);\n        let ind = limit,\n            predicateFulfilled = false;\n        for (; ind >= 0 && !predicateFulfilled; --ind) {\n            predicateFulfilled = pred(arr[ind], ind, arr);\n        }\n        return ind;\n    },\n\n    /**\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {Array|undefined}\n     */\n    findIndicesWhere = (pred, xs) => {\n        const limit = length(xs);\n        if (!limit) { return undefined; }\n        let ind = 0,\n            out = [];\n        for (; ind < limit; ind++) {\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\n        }\n        return out;\n    },\n\n    /**\n     * @function module:listOpsUtils_find\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    findWhere = (pred, xs) => {\n        let ind = 0,\n            limit = length(xs);\n        if (!limit) { return; }\n        for (; ind < limit; ind++) {\n            let elm = xs[ind];\n            if (pred(elm, ind, xs)) { return elm; }\n        }\n    },\n\n    _swap = (list, ind1, ind2) => {\n        const tmp = list[ind1];\n        list[ind1] = list[ind2];\n        list[ind2] = tmp;\n        return list;\n    },\n\n    _permutationsAlgo = (listIn, limit, remainderLen) => {\n        let out = [];\n        if (remainderLen === 1) { return copy(listIn); }\n        for (let i = 0; i < remainderLen; i++) {\n            const newLen = remainderLen - 1;\n\n            // Capture permutation\n            out.push(_permutationsAlgo(listIn, limit, newLen));\n\n            // If remainderLen is odd, swap first and last element\n            //  else, swap `ith` and last element\n            _swap(listIn, (remainderLen % 2 === 1 ? 0 : i), newLen);\n        }\n        return out;\n    }\n;\n","/**\n * '_' list operators.\n * @module listOps_\n * @private\n * @todo decide whether to throw errors where functions cannot function without a specific type or to return undefined (and also determine which cases are ok for just returning undefined).\n * @todo code unperformant shorthand in `listOps`\n * @todo rename monoid functions to normal functions since we are not really defining methods for monoids here.\n */\nimport {\n    concat as listAppend,\n    indexOf, slice, includes\n}\n    from './jsPlatform/list_';\n\nimport {apply} from './jsPlatform/function_';\nimport {negateP, negateF} from './functionOps/negate_';\nimport {isTruthy, isFalsy} from '../booleanOps';\nimport {isString, isEmptyList, prop, of, length} from './objectOps_';\nimport {map} from './listOps/map_';\n\nimport {\n    sliceFrom, sliceTo, lengths,\n    lengthsToSmallest, aggregateArr, aggregatorByType,\n    reduceUntil, reduce, reduceRight, lastIndex,\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\n    findWhere, copy, genericAscOrdering, _permutationsAlgo\n}\n    from './listOps/utils_';\n\n// Exported imports\nexport {map};\n\n// Exported internals\nexport const\n\n    /**\n     * Append two lists, i.e.,\n     * ```\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\n     * ```\n     * If the first list is not finite, the result is the first list.\n     * @haskellType `append :: List a => a -> a -> a`\n     * @function module:listOps_.append\n     * @param xs1 {Array|String|*} - list or list like.\n     * @param xs2 {Array|String|*} - list or list like.\n     * @returns {Array|String|*} - Same type as list like passed in.\n     */\n    append = listAppend,\n\n    /**\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\n     * @haskellType `appendMany :: List a => a -> [a] -> a\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\n     * @function module:listOps_.appendMany\n     * @param args ...{Array|String|*} - Lists or lists likes.\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\n     */\n    appendMany = (...args) => {\n        if (length(args)) { return apply(listAppend, args); }\n        throw new Error('`appendMany` requires at least one arg.');\n    },\n\n    /**\n     * Returns head of list (first item of list).\n     * @haskellType `head :: [a] -> a`\n     * @function module:listOps_.head\n     * @param x {Array|String}\n     * @returns {*} - First item from list\n     */\n    head = x => x[0],\n\n    /**\n     * Returns last item of list.\n     * @haskellType `last :: [a] -> a`\n     * @function module:listOps_.last\n     * @param xs {Array|String}\n     * @returns {*}\n     */\n    last = xs => xs[lastIndex(xs)],\n\n    /**\n     * Returns tail part of list (everything after the first item as new list).\n     * @haskelType `tail :: [a] -> [a]`\n     * @function module:listOps_.tail\n     * @param xs {Array}\n     * @returns {Array}\n     */\n    tail = xs => sliceFrom(1, xs),\n\n    /**\n     * Returns everything except last item of list as new list.\n     * @haskellType `init :: [a] -> [a]`\n     * @function module:listOps_.init\n     * @param xs {Array|String}\n     * @returns {Array|String}\n     */\n    init = xs => sliceTo(lastIndex(xs), xs),\n\n    /**\n     * Returns `head` and `tail` of passed in list/string in a tuple.\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\n     * @function module:listOps_.uncons\n     * @param xs {Array|String}\n     * @returns {Array|String|*|undefined}\n     */\n    uncons = xs => {\n        if (!xs) {\n            return;\n        }\n        if (length(xs) === 0) {\n            return undefined;\n        }\n        return [head(xs), tail(xs)];\n    },\n\n    /**\n     * Returns `tail` and `head` of passed in list/string in a tuple.\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\n     * @function module:listOps_.unconsr\n     * @param xs {Array|String}\n     * @returns {Array|String|*|undefined}\n     */\n    unconsr = xs => {\n        if (!xs) {\n            return;\n        }\n        if (length(xs) === 0) {\n            return undefined;\n        }\n        return [init(xs), last(xs)];\n    },\n    \n    /**\n     * Concatenates all the elements of a container of lists.\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\n     * @function module:listOps_.concat\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    concat = xs => {\n        if (!length(xs)) { return copy(xs); }\n        return isString(xs) ? xs : apply(appendMany, xs);\n    },\n\n    /**\n     * Map a function over all the elements of a container and concatenate the resulting lists.\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\n     * @function module:listOps_.concatMap\n     * @param fn {Function}\n     * @param foldableOfA {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    concatMap = (fn, foldableOfA) => concat(map(fn, foldableOfA)),\n\n    /**\n     * Returns a copy of the passed in list reverses.\n     * @haskellType `reverse :: [a] -> [a]`\n     * @function module:listOps_.reverse\n     * @param x {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    reverse = x => {\n        const aggregator = aggregatorByType(x);\n        return foldr (\n            (agg, item, ind) => aggregator(agg, item, ind),\n            of(x), x\n        );\n    },\n\n    /**\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\n     * @function module:listOps_.intersperse\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\n     *  it typed) so `between` can be any value.\n     * @param between {*} - Should be of the same type of elements contained in list.\n     * @param arr {Array|String|*} - List.\n     * @returns {Array|String|*}\n     */\n    intersperse = (between, arr) => {\n        const limit = length(arr),\n            lastInd = limit - 1,\n            aggregator = of(arr),\n            aggregatorOp = aggregatorByType(arr);\n        if (!limit) {\n            return aggregator;\n        }\n        return foldl((agg, item, ind) => {\n            return ind === lastInd ?\n                aggregatorOp(agg, item) :\n                aggregatorOp(\n                    aggregatorOp(agg, item),\n                    between\n                );\n        }, aggregator, arr);\n    },\n\n    /**\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\n     * @function module:listOps_.intercalate\n     * @param xs {Array|String|*}\n     * @param xss {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    intercalate = (xs, xss) => concat(intersperse(xs, xss)),\n\n    /**\n     * Transposes rows and columns into lists by index;  E.g.,\n     * Haskell example:\n     * ```\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\n     *\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\n     * ```\n     * @note from columns to rows.\n     * @note Empty lists are ignored.\n     * @todo upgrade this function to support lists of strings.\n     * @haskellType `transpose :: [[a]] -> [[a]]`\n     * @function module:listOps_.transpose\n     * @param xss {Array}\n     * @returns {Array}\n     */\n    transpose = xss => {\n        let numLists = length(xss),\n            ind = 0, ind2;\n        if (!numLists) {\n            return of(xss);\n        }\n        const listLengths = apply(lengths, xss),\n            longestListLen = maximum(listLengths),\n            outLists = [];\n        for (; ind < longestListLen; ind += 1) {\n            const outList = [];\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\n                if (listLengths[ind2] < ind + 1) {\n                    continue;\n                }\n                outList.push(xss[ind2][ind]);\n            }\n            outLists.push(outList);\n        }\n        return filter(x => length(x), outLists);\n    },\n\n    /**\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\n     * the length of the passed in sequence so: 2^length(xs)).\n     * Note: The return value doubles per index/character passed in so use with caution!\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\n     * @function module:listOps_.subsequences\n     * @param xs {Array|String}\n     * @returns {Array}\n     */\n    subsequences = xs => {\n        const len = Math.pow(2, length(xs)),\n            out = [];\n        for (let i = 0; i < len; i += 1) {\n            const entry = [];\n            for (let j = 0; j < len; j += 1) {\n                if (i & (1 << j)) {\n                    entry.push(xs[j]);\n                }\n            }\n            out.push(entry);\n        }\n        return out;\n    },\n\n    /**\n     * Returns a list of permutations for passed in list.\n     *  Use caution with lists above a length of 15 (will take long due to nature of\n     *  algorithm).\n     * @function module:listOps.permutations\n     * @param xs {Array|String|*} - List.\n     * @returns {Array<Array|String|*>} - Array of permutations.\n     */\n    permutations = xs => {\n        const limit = length(xs);\n        return !limit ? [xs] :\n            _permutationsAlgo(xs, limit, limit);\n    },\n\n    /**\n     * Reduces a foldable (list etc.) with passed in function.\n     * @function module:listOps_.foldl\n     * @param fn {Function}\n     * @param zero {*} - Aggregator.\n     * @param functor {Array|String|*}\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\n     */\n    foldl = reduce,\n\n    foldr = reduceRight,\n\n    foldl1 = (op, xs) => {\n        const parts = uncons(xs);\n        if (!parts) {\n            return of(xs);\n        }\n        return reduce(op, parts[0], parts[1]);\n    },\n\n    foldr1 = (op, xs) => {\n        const parts = unconsr(xs);\n        if (!parts) {\n            return of(xs);\n        }\n        return reduceRight(op, parts[1], parts[0]);\n    },\n\n    /**\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\n     * @function module:listOps_.mapAccumL\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\n     * @param xs {Array|String|*} - list type.\n     * @return {Array} - [aggregated, list]\n     */\n    mapAccumL = (op, zero, xs) => {\n        const list = sliceFrom(0, xs),\n            limit = length(xs);\n        if (!limit) {\n            return [zero, list];\n        }\n        let ind = 0,\n            agg = zero,\n            mapped = of(xs),\n            tuple;\n        for (; ind < limit; ind++) {\n            tuple = op(agg, list[ind], ind);\n            agg = tuple[0];\n            mapped = tuple[1];\n        }\n        return [agg, mapped];\n    },\n\n    /**\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\n     * @function module:listOps_.mapAccumR\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\n     * @param xs {Array|String|*} - list type.\n     * @return {Array} - [aggregated, list]\n     */\n    mapAccumR = (op, zero, xs) => {\n        const list = sliceFrom(0, xs),\n            limit = length(xs);\n        if (!limit) {\n            return [zero, list];\n        }\n        let ind = limit - 1,\n            agg = zero,\n            mapped = of(xs),\n            tuple;\n        for (; ind >= 0; ind--) {\n            tuple = op(agg, list[ind], ind);\n            agg = tuple[0];\n            mapped = tuple[1];\n        }\n        return [agg, mapped];\n    },\n\n    /**\n     * Iterate on value (`x`) with `op` up to `limit`.\n     * @function module:listOps_.iterate\n     * @param limit {Number}\n     * @param op {Function} - Operation\n     * @param x {*} - Starting point.\n     * @returns {*}\n     */\n    iterate = (limit, op, x) => {\n        let ind = 0,\n            out = x;\n        for (; ind < limit; ind += 1) {\n            out = op(out, ind);\n        }\n        return out;\n    },\n\n    /**\n     * Repeats `x` `limit` number of times\n     * @function module:listOps_.repeat\n     * @param limit {Number}\n     * @param x {*}\n     * @return {Array}\n     */\n    repeat = (limit, x) =>\n        iterate(limit, agg => {\n            agg.push(x);\n            return agg;\n        }, []),\n\n    /**\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\n     * @function module:listOps_.replicate\n     * @param limit {Number}\n     * @param x {*}\n     * @return {Array}\n     */\n    replicate = repeat,\n\n    /**\n     * Replicates a list `limit` number of times and appends the results (concat)\n     * @function module:listOps_.cycle\n     * @param limit {Number}\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    cycle = (limit, xs) => concat(replicate(limit, xs)),\n\n    /**\n     * Unfolds a value into a list of somethings.\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\n     * @function module:listOps_.unfoldr\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\n     * @param x {*} - Starting parameter to unfold from.\n     * @returns {Array} - An array of whatever you return from `op` yielded.\n     */\n    unfoldr = (op, x) => {\n        let ind = 0,\n            out = [],\n            resultTuple = op(x, ind, out);\n        while (resultTuple) {\n            out.push(resultTuple[0]);\n            resultTuple = op(resultTuple[1], ++ind, out);\n        }\n        return out;\n    },\n\n    /**\n     * Finds index in string or list (alias for `findIndex`).\n     * @function module:listOps_.findIndex\n     * @param pred {Function} - Predicate<element, index, arr>.\n     * @param arr {Array|String}\n     * @returns {Number} - `-1` if predicate not matched else `index` found\n     */\n    findIndex = findIndexWhere,\n\n    /**\n     * @function module:listOps_.findIndices\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {Array|undefined}\n     */\n    findIndices = findIndicesWhere,\n\n    /**\n     * @function module:listOps_.elemIndex\n     * @param x {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    elemIndex = (x, xs) => {\n        const foundInd = indexOf(x, xs);\n        return foundInd !== -1 ? foundInd : undefined;\n    },\n\n    /**\n     * @function module:listOps_.elemIndices\n     * @param value {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    elemIndices = (value, xs) => findIndices(x => x === value, xs),\n\n    /**\n     * Takes `n` items from start of list to `limit` (exclusive).\n     * @function module:listOps_.take\n     * @param list {Array|String}\n     * @param limit {Number}\n     * @returns {String|Array} - Passed in type's type\n     */\n    take = (limit, list) => sliceTo(limit, list),\n\n    /**\n     * Drops `n` items from start of list to `count` (exclusive).\n     * @function module:listOps_.take\n     * @param list {Array|String}\n     * @param count {Number}\n     * @returns {String|Array} - Passed in type's type\n     */\n    drop = (count, list) => sliceFrom(count, list),\n\n    /**\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\n     * given index in second part of returned list)).\n     * @function module:listOps_.splitAt\n     * @param ind {Number} - Index to split at.\n     * @param list {Array|String|*} - functor (list or string) to split.\n     * @returns {Array} - Array of whatever type `x` was when passed in\n     */\n    splitAt = (ind, list) => [\n        sliceTo(ind, list),\n        sliceFrom(ind, list)\n    ],\n\n    /**\n     * Gives an list with passed elements while predicate was true.\n     * @function module:listOps_.takeWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @returns {Array}\n     */\n    takeWhile = (pred, list) => {\n        let zero = of(list);\n        const operation = aggregatorByType(list);\n        return reduceUntil(\n            negateP(pred),  // predicate\n            operation,      // operation\n            zero,           // aggregator\n            list\n        );\n    },\n\n    /**\n     * Returns an list without elements that match predicate.\n     * @function module:listOps_.dropWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @refactor\n     * @returns {Array|String}\n     */\n    dropWhile = (pred, list) => {\n        const limit = length(list),\n            splitPoint =\n                findIndexWhere((item, ind, list2) =>\n                    !pred(list[ind], ind, list2), list);\n\n        return splitPoint === -1 ?\n            sliceTo(limit, list) :\n            slice(splitPoint, limit, list);\n    },\n\n    /**\n     * @function module:listOps_.dropWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @refactor\n     * @returns {Array|String}\n     */\n    dropWhileEnd = (pred, list) => {\n        const limit = length(list),\n            splitPoint =\n                findIndexWhereRight((item, ind, list2) =>\n                    !pred(list[ind], ind, list2), list);\n\n        return splitPoint === -1 ?\n            sliceTo(limit, list) :\n            sliceTo(splitPoint + 1, list);\n    },\n\n    /**\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\n     * the second list in the tuple is a list of the remaining elements in the given list.\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\n     * @function module:listOps_.partition\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\n     * @param list {Array|String|*} - Predicate<item, index, originalArrayOrString>\n     * @returns {Array|String|*} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\n     */\n    span = (pred, list) => {\n        const splitPoint = findIndexWhere(negateP(pred), list);\n        return splitPoint === -1 ?\n            splitAt(0, list) : splitAt(splitPoint, list);\n    },\n\n    breakOnList = (pred, list) => {\n        const splitPoint = findIndexWhere(pred, list);\n        return splitPoint === -1 ?\n            splitAt(0, list) : splitAt(splitPoint, list);\n    },\n\n    /**\n     * @function module:listOps_.at\n     * @param ind {Number} - Index.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    at = prop,\n\n    /**\n     * @function module:listOps_.find\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    find = findWhere,\n\n    filter = (pred, xs) => {\n        let ind = 0,\n            limit = length(xs),\n            aggregator = aggregatorByType(xs),\n            out = of(xs);\n        if (!limit) {\n            return out;\n        }\n        for (; ind < limit; ind++) {\n            if (pred(xs[ind], ind, xs)) {\n                out = aggregator(out, xs[ind]);\n            }\n        }\n        return out;\n    },\n\n    /**\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\n     * do not match the tuple are in second list in the returned tuple.\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\n     * @function module:listOps_.partition\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\n     * @param list {Array|String|*}\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\n     */\n    partition = (pred, list) => {\n        if (!length(list)) {\n            return [of(list), of(list)];\n        }\n        return [filter(pred, list), filter(negateP(pred), list)];\n    },\n\n    elem = includes,\n\n    notElem = negateF(includes),\n\n    lookup = at,\n\n    isPrefixOf = (xs1, xs2) => {\n        const limit1 = length(xs1),\n            limit2 = length(xs2);\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\n            return false;\n        }\n        let ind = 0;\n        for (; ind < limit1; ind++) {\n            if (xs1[ind] !== xs2[ind]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    isSuffixOf = (xs1, xs2) => {\n        const limit1 = length(xs1),\n            limit2 = length(xs2);\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\n            return false;\n        }\n        let ind1 = limit1 - 1,\n            ind2 = limit2 - 1;\n        for (; ind1 >= 0; ind1--) {\n            if (xs1[ind1] !== xs2[ind2]) {\n                return false;\n            }\n            ind2 -= 1;\n        }\n        return true;\n    },\n\n    isInfixOf = (xs1, xs2) => {\n        const limit1 = length(xs1),\n            limit2 = length(xs2);\n        if (limit2 < limit1 || !limit1 || !limit2) {\n            return false;\n        }\n        let ind1,\n            foundLen,\n            ind = 0;\n        for (; ind < limit2; ind += 1) {\n            foundLen = 0;\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\n                if (xs2[ind1 + ind] === xs1[ind1]) {\n                    foundLen += 1;\n                }\n                if (foundLen === limit1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    isSubsequenceOf = (xs1, xs2) => {\n        const len = Math.pow(2, length(xs2)),\n            lenXs1 = length(xs1);\n        let foundLen,\n            i;\n        for (i = 0; i < len; i += 1) {\n            foundLen = 0;\n            for (let j = 0; j < len; j += 1) {\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\n                    foundLen += 1;\n                }\n                if (foundLen === lenXs1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    /**\n     * The group function takes a list and returns a list of lists such that\n     *  the concatenation of the result is equal to the argument. Moreover, each\n     *  sublist in the result contains only equal elements. For example,\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\n     * It is a special case of groupBy, which allows the programmer to supply\n     *  their own equality test.\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\n     * @function module:listOps_.group\n     * @param xs {Array|String|*}\n     * @returns {Array<Array|String|*>|*}\n     */\n    group = xs => groupBy((a, b) => a === b, xs),\n\n    /**\n     * Allows you to group items in a list based on your supplied equality check.\n     * @note Sames `group` but allows you to specify equality operation.\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\n     * @function module:listOps_.groupBy\n     * @param equalityOp {Function}\n     * @param xs {Array|String|*}\n     * @returns {*}\n     */\n    groupBy = (equalityOp, xs) => {\n        const limit = length(xs);\n        if (!limit) {\n            return sliceFrom(0, xs);\n        }\n        let ind = 0,\n            prevItem,\n            item,\n            predOp = x => {\n                if (equalityOp(x, prevItem)) {\n                    ind++;\n                }\n                if (equalityOp(x, item)) {\n                    prevItem = x;\n                    return true;\n                }\n                return false;\n            },\n            agg = [];\n        for (; ind < limit; ind += 1) {\n            item = xs[ind];\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\n        }\n        return agg;\n    },\n\n    inits = xs => {\n        let limit = length(xs),\n            ind = 0,\n            agg = [];\n        if (!limit) {\n            return [];\n        }\n        for (; ind <= limit; ind += 1) {\n            agg = aggregateArr(agg, sliceTo(ind, xs));\n        }\n        return agg;\n    }, //map(list => init(list), xs),\n\n    tails = xs => {\n        let limit = length(xs),\n            ind = 0,\n            agg = [];\n        if (!limit) {\n            return [];\n        }\n        for (; ind <= limit; ind += 1) {\n            agg = aggregateArr(agg, slice(ind, limit, xs));\n        }\n        return agg;\n    }, //map(list => tail(list), xs),\n\n    stripPrefix = (prefix, list) =>\n        isPrefixOf(prefix, list) ?\n            splitAt(length(prefix), list)[1] :\n            sliceFrom(0, list),\n\n    /**\n     * zip takes two lists and returns a list of corresponding pairs.\n     * If one input list is short, excess elements of the longer list are discarded.\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\n     * @function module:listOps_.zip\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip = (arr1, arr2) => {\n        if (!length(arr1) || !length(arr2)) {\n            return of(arr1);\n        }\n        const [a1, a2] = lengthsToSmallest(arr1, arr2);\n        return reduce((agg, item, ind) =>\n                aggregateArr(agg, [item, a2[ind]]),\n            [], a1);\n    },\n\n    /**\n     * zipN takes one or more lists and returns a list containing lists of all indices\n     * at a given index, index by index.\n     * If one input list is short, excess elements of the longer list are discarded.\n     * @function module:listOps_.zipN\n     * @param lists {Array|String} - One ore more lists of the same type.\n     * @returns {Array}\n     */\n    zipN = (...lists) => {\n        const trimmedLists = apply(lengthsToSmallest, filter(length, lists)),\n            lenOfTrimmed = length(trimmedLists);\n        if (!lenOfTrimmed) {\n            return [];\n        }\n        else if (lenOfTrimmed === 1) {\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\n        }\n        return reduce((agg, item, ind) =>\n                aggregateArr(agg, map(xs => xs[ind], trimmedLists)),\n            [], trimmedLists[0]);\n    },\n\n    /**\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\n     * @function module:listOps_.zip3\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip3 = zipN,\n\n    /**\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\n     * @function module:listOps_.zip4\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @param arr4 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip4 = zipN,\n\n    /**\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\n     * @function module:listOps_.zip5\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @param arr4 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip5 = zipN,\n\n    /**\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\n     * zipWith generalises zip by zipping with the function given as the\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\n     * @note `_|_` means bottom or perpetual (@see\n     *  - https://wiki.haskell.org/Bottom\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\n     *  )\n     * @example\n     * ```\n     * zipWith f [] _|_ = []\n     * ```\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\n     * @function module:listOps_.zipWith\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\n     *  E.g., ` op :: a -> b -> (a, b)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith = (op, xs1, xs2) => {\n        if (!length(xs1) || !length(xs2)) {\n            return of(xs1);\n        }\n        const [a1, a2] = lengthsToSmallest(xs1, xs2);\n        return reduce((agg, item, ind) =>\n                aggregateArr(agg, op(item, a2[ind])),\n            [], a1);\n    },\n\n    /**\n     * Zips all given lists with tupling function. Note: Haskell types do not have\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\n     *  is left there for general purpose not for exactness as is told by aforementioned.\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\n     *  of lists to zip.\n     * @function module:listOps_.zipWithN\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\n     * @param lists ...{Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWithN = (op, ...lists) => {\n        const trimmedLists = apply(lengthsToSmallest, lists),\n            lenOfTrimmed = length(trimmedLists);\n        if (!lenOfTrimmed) {\n            return [];\n        }\n        else if (lenOfTrimmed === 1) {\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\n        }\n        return reduce((agg, item, ind) =>\n                aggregateArr(agg, apply(op, map(xs => xs[ind], trimmedLists))),\n            [], trimmedLists[0]);\n    },\n\n    /**\n     * Zips 3 lists with tupling function.\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\n     * @function module:listOps_.zipWith3\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith3 = zipWithN,\n\n    /**\n     * Zips 4 lists with tupling function.\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\n     * @function module:listOps_.zipWith4\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @param xs4 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith4 = zipWithN,\n\n    /**\n     * Zips 5 lists.\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\n     * @function module:listOps_.zipWith5\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @param xs4 {Array|String|*}\n     * @param xs5 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith5 = zipWithN,\n\n    /**\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\n     * @function module:listOps_.unzip\n     * @param arr {Array|*}\n     * @returns {Array|*}\n     */\n    unzip = arr =>\n        foldl((agg, item) => {\n            agg[0].push(item[0]);\n            agg[1].push(item[1]);\n            return agg;\n        }, [[], []], arr),\n\n    /**\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\n     * @function module:listOps_.unzip\n     * @param list {Array|*} - List of tuples (lists).\n     * @returns {Array|*}\n     */\n    unzipN = list => {\n        if (!length(list)) {\n            return [];\n        }\n        const lenItem0 = length(list[0]);\n        let zero = lenItem0 ?\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\n            [];\n        return foldl((agg, item) => {\n            agg.forEach((outList, ind) => outList.push(item[ind]));\n            return agg;\n        }, zero, list);\n    },\n\n    any = (p, xs) => {\n        let ind = 0,\n            limit = length(xs);\n        if (!limit) {\n            return false;\n        }\n        for (; ind < limit; ind += 1) {\n            if (p(xs[ind])) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    all = (p, xs) => {\n        const limit = length(xs);\n        let ind = 0;\n        if (limit === 0) {\n            return false;\n        }\n        for (; ind < limit; ind++) {\n            if (!p(xs[ind], ind, xs)) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    and = xs => all(isTruthy, xs),\n\n    or = xs => any(isTruthy, xs),\n\n    not = xs => all(isFalsy, xs),\n\n    sum = list => foldl((agg, x) => agg + x, 0, list),\n\n    product = arr => foldl((agg, x) => agg * x, 1, arr),\n\n    maximum = list => maximumBy(genericAscOrdering, list),\n\n    minimum = list => minimumBy(genericAscOrdering, list),\n\n    maximumBy = (ordering, xs) => last(sortBy(ordering, xs)),\n\n    minimumBy = (ordering, xs) => head(sortBy(ordering, xs)),\n\n    scanl = () => null,\n\n    scanl1 = () => null,\n\n    scanr = () => null,\n\n    scanr1 = () => null,\n\n    nub = list => nubBy((a, b) => a === b, list),\n\n    remove = (x, list) => removeBy((a, b) => a === b, x, list),\n\n    sort = xs => sortBy(genericAscOrdering, xs),\n\n    sortOn = (valueFn, xs) =>\n\n        // Un-decorate\n        map(decorated => decorated[1],\n\n            // Decorate and sort\n            sortBy(\n                // Ordering\n                (a1, b1) => {\n                    let a = a1[0],\n                        b = b1[0];\n                    if (a > b) {\n                        return 1;\n                    }\n                    else if (a < b) {\n                        return -1;\n                    }\n                    return 0;\n                },\n\n                // Decorate\n                map(item => [valueFn(item), item], xs)\n            )\n        ),\n\n    sortBy = (orderingFn, xs) => copy(xs).sort(orderingFn),\n\n    insert = (x, xs) => {\n        if (isEmptyList(xs)) {\n            return aggregatorByType(xs)(copy(xs), x, 0);\n        }\n        let out = of(xs),\n            foundIndex = findIndex(item => x <= item, xs);\n        return foundIndex === -1 ? append(sliceFrom(0, out), x) :\n            concat(intersperse([x], splitAt(foundIndex, xs)));\n    },\n\n    /**\n     * A version of `insert` that allows you to specify the ordering of the inserted\n     * item;  Before/at, or after\n     * @function module:listOps_.insertBy\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\n     * @note `Ordering` === // something that is order-able\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\n     *  operated on by this functions logic.\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\n     * @param x {*} - Value to insert.\n     * @param xs {Array|String|*} - List to insert into (note new list is returned)\n     * @returns {Array|String|*} - New list.\n     */\n    insertBy = (orderingFn, x, xs) => {\n        const limit = length(xs),\n            aggregator = aggregatorByType(xs),\n            out = of(xs);\n        if (isEmptyList(xs)) {\n            return aggregator(out, x, 0);\n        }\n        let ind = 0;\n        for (; ind < limit; ind += 1) {\n            if (orderingFn(x, xs[ind]) <= 0) {\n                const parts = splitAt(ind, xs);\n                // Fold parts[0], [x], parts[1] into `out` and `concat`\n                return concat(foldl(aggregator, out, [parts[0], [x], parts[1]]));\n            }\n        }\n        return aggregator(copy(xs), x);\n    },\n\n    nubBy = (pred, list) => {\n        if (isEmptyList(list)) {\n            return of(list);\n        }\n        const limit = length(list);\n        let ind = 0,\n            currItem,\n            out = of(list),\n            anyOp = storedItem => pred(currItem, storedItem);\n        for (; ind < limit; ind += 1) {\n            currItem = list[ind];\n            if (any(anyOp, out)) {\n                continue;\n            }\n            out = append(out, currItem);\n        }\n        return out;\n    },\n\n    removeBy = (pred, x, list) => { // @todo optimize this implementation\n        const foundIndex = findIndex(item => pred(x, item), list),\n            parts = splitAt(foundIndex > -1 ? foundIndex : 0, list); // @todo correct this implementation\n        return append(parts[0], tail(parts[1]));\n    },\n\n    removeFirstsBy = (pred, xs1, xs2) =>\n        foldl((agg, item) => removeBy(pred, item, agg), xs1, xs2),\n\n    /**\n     * Returns the union on elements matching boolean check passed in.\n     * @function module:listOps_.unionBy\n     * @param pred {Function} - `pred :: a -> a -> Bool`\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    unionBy = (pred, arr1, arr2) => {\n        const aggregator = aggregatorByType(arr1);\n        return foldl((agg, b) => {\n            const alreadyAdded = any(a => pred(a, b), agg);\n            return !alreadyAdded ? aggregator(agg, b) : agg;\n        }, copy(arr1), arr2);\n    },\n\n    /**\n     * Creates a union on matching elements from array1.\n     * @function module:listOps_.union\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    union = (arr1, arr2) =>\n        append(arr1,\n            filter(elm => !includes(elm, arr1), arr2)),\n\n    /**\n     * Performs an intersection on list 1 with  elements from list 2.\n     * @function module:listOps_.intersect\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    intersect = (arr1, arr2) =>\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\n            filter(elm => includes(elm, arr2), arr1),\n\n    /**\n     * Returns an intersection by predicate.\n     * @function module:listOps_.intersectBy\n     * @param pred {Function} - `pred :: a -> b -> Bool`\n     * @param list1 {Array|String|*}\n     * @param list2 {Array|String|*}\n     * @return {Array|String|*}\n     */\n    intersectBy = (pred, list1, list2) => {\n        const aggregator = aggregatorByType(list1);\n        return foldl((agg, a) =>\n                any(b => pred(a, b), list2) ? aggregator(agg, a) : agg\n            , [], list1);\n    },\n\n    /**\n     * Returns the difference of list 1 from list 2.\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\n     * @function module:listOps_.difference\n     * @param array1 {Array|String|*}\n     * @param array2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    difference = (array1, array2) => { // augment this with max length and min length ordering on op\n        if (array1 && !array2) {\n            return sliceFrom(0, array1);\n        }\n        else if (!array1 && array2 || (!array1 && !array2)) {\n            return [];\n        }\n        const aggregator = aggregatorByType(array1);\n        return reduce((agg, elm) =>\n                !includes(elm, array2) ? aggregator(agg, elm) : agg\n            , [], array1);\n    },\n\n    /**\n     * Returns the complement of list 0 and the reset of the passed in arrays.\n     * @function module:listOps_.complement\n     * @param arr0 {Array}\n     * @param arrays {...Array}\n     * @returns {Array}\n     */\n    complement = (arr0, ...arrays) =>\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays);\n","import {assignDeep} from './assignDeep_';\nimport {hasOwnProperty, keys} from '../jsPlatform/object_';\nimport {foldl} from '../listOps_';\n\nexport const\n\n    objUnion = (obj1, obj2) => assignDeep(obj1, obj2),\n\n    objIntersect = (obj1, obj2) => foldl((agg, key) => {\n        if (hasOwnProperty(key, obj2)) {\n            agg[key] = obj2[key];\n        }\n        return agg;\n    }, {}, keys(obj1)),\n\n    objDifference = (obj1, obj2) => foldl((agg, key) => {\n        if (!hasOwnProperty(key, obj2)) {\n            agg[key] = obj1[key];\n        }\n        return agg;\n    }, {}, keys(obj1)),\n\n    objComplement = (obj0, ...objs) => foldl((agg, obj) =>\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs);\n","/**\n * @module objectOps\n */\nimport {curry, curry2} from './uncurried/functionOps/curry_';\nimport {\n    instanceOf as _instanceOf,\n    hasOwnProperty as _hasOwnProperty,\n    assign as _assign} from './uncurried/jsPlatform/object_';\nimport {prop as _prop} from './uncurried/objectOps/prop_';\nimport {assignDeep as _assignDeep}      from './uncurried/objectOps/assignDeep_';\nimport {\n    objUnion as _objUnion,\n    objComplement as _objComplement,\n    objIntersect as _objIntersect,\n    objDifference as _objDifference}    from './uncurried/objectOps/setTheory_';\nimport {isType as _isType, notEmptyAndOfType as _notEmptyAndOfType}\n    from './uncurried/objectOps/is_';\n\nexport {length, toString, keys} from './uncurried/jsPlatform/object_';\nexport * from './uncurried/objectOps/typeOf_';\nexport * from './uncurried/objectOps/of_';\nexport {\n    isFunction, isClass, isCallable, isArray, isObject, isBoolean,\n    isNumber, isString, isMap, isSet, isWeakMap, isWeakSet, isUndefined,\n    isNull, isSymbol, isPromise, isUsableImmutablePrimitive,\n    isEmptyList, isEmptyObject, isEmptyCollection, isEmpty, isset\n} from './uncurried/objectOps/is_';\n\nexport {_instanceOf, _isType, _hasOwnProperty, _assign, _prop, _assignDeep, _objUnion,\n_objComplement, _objIntersect, _objDifference, _notEmptyAndOfType};\n\nexport const\n\n    prop = curry(_prop),\n\n    /**\n     * `instanceof` in function form.\n     * @function module:objectOps.instanceOf\n     * @param instance {*}\n     * @param Type {Function}\n     * @returns {Boolean}\n     */\n    instanceOf = curry(_instanceOf),\n\n    hasOwnProperty = curry(_hasOwnProperty),\n\n    assign = curry2(_assign),\n\n    assignDeep = curry2(_assignDeep),\n\n    objUnion = curry(_objUnion),\n\n    objIntersect = curry(_objIntersect),\n\n    objDifference = curry(_objDifference),\n\n    objComplement = curry2(_objComplement),\n\n    /**\n     * Returns whether a value is a functionOps or not.\n     * @function module:objectOps.isFunction\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\n     * be a named constructor/functionOps-instance;  E.g.,\n     * ```\n     *  functionOps SomeName () {} // or\n     *  var SomeName = functionOps SomeName () {} // or\n     *  class SomeName {}\n     * ```\n     * @function module:objectOps.isType\n     * @param Type {Function|String} - Constructor or constructor name\n     * @param value {*}\n     * @return {Boolean}\n     */\n    isType = curry(_isType),\n\n    /**\n     * Checks if `value` is an es2015 `class`.\n     * @function module:objectOps.isClass\n     * @param x {*}\n     * @returns {boolean}\n     */\n\n    /**\n     * Returns a booleanOps depicting whether a value is callable or not.\n     * @function module:objectOps.isCallable\n     * @tentative\n     * @private\n     * @param x {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if value is an arrayOps.\n     * @function module:objectOps.isArray\n     * @param value {*}\n     * @returns {boolean}\n     */\n\n    /**\n     * Checks whether value is an object or not.\n     * @function module:objectOps.isObject\n     * @param value\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if value is a booleanOps.\n     * @function module:objectOps.isBoolean\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\n     * @function module:objectOps.isNumber\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks whether value is a stringOps or not.\n     * @function module:objectOps.isString\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks whether value is of `Map` or not.\n     * @function module:objectOps.isMap\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks whether value is of `Set` or not.\n     * @function module:objectOps.isSet\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks whether value is of `WeakMap` or not.\n     * @function module:objectOps.isWeakMap\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks whether value is of `WeakSet` or not.\n     * @function module:objectOps.isWeakSet\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if value is undefined.\n     * @function module:objectOps.isUndefined\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if value is null.\n     * @function module:objectOps.isNull\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if value is a `Symbol`.\n     * @function module:objectOps.isSymbol\n     * @param value {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * @tentative\n     * @private\n     */\n\n    /**\n     * Checks if given `x` is one of the four\n     * \"usable\" immutable JS primitives; I.e.,\n     *  One of [String, Boolean, Number, Symbol]\n     * @function module:objectOps.isUsableImmutablePrimitive\n     * @param x {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if !length.\n     * @function module:objectOps.isEmptyList\n     * @param x {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if object has own properties/enumerable-props or not.\n     * @function module:objectOps.isEmptyObject\n     * @param obj {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\n     * @function module:objectOps.isEmptyCollection\n     * @param x {*}\n     * @returns {Boolean}\n     */\n\n    /**\n     * Checks to see if passed in argument is empty.\n     * @function module:objectOps.isEmpty\n     * @param value {*} - Value to check.\n     * @returns {Boolean}\n     */\n\n    /**\n     * Returns true if an element is not empty and is of type.\n     * @function module:objectOps.notEmptyAndOfType\n     * @tentative\n     * @private* @param type {String|Function} - Type to check against (stringOps name or actual constructor).\n     * @param value {*} - Value to check.\n     * @returns {Boolean}\n     */\n    notEmptyAndOfType = curry(_notEmptyAndOfType);\n\n    /**\n     * Returns whether passed in values is defined and not null.\n     * @function module:objectOps.isset\n     * @param x {*}\n     * @returns {Boolean}\n     */\n","export const\n\n    /**\n     * Run `operation` until predicate returns `true`.\n     * @function module:functionOps_.until\n     * @param predicate {Function} :: a -> Boolean\n     * @param operation {Function} :: a -> a\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\n     * @returns {*} - What ever type `typeInstance` is\n     */\n    until = (predicate, operation, typeInstance) => {\n        let result = typeInstance;\n        while (!predicate(result)) {\n            result = operation(result);\n        }\n        return result;\n    };\n","import {reverse} from '../jsPlatform/array_';\nimport {apply, call} from '../jsPlatform/function_';\n\nexport const\n\n    /**\n     * Flips a functions arguments order and returns a new functionOps requiring such (arguments in reverse order).\n     * @function module:functionOps_.flipN\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    flipN = fn => (...args) => apply(fn, reverse(args)),\n\n    /**\n     * Returns a function that receives 3 args in reverse (3, 2, 1 etc.).\n     * @function module:functionOps_.flip3\n     * @param fn {Function} - Function<a, b, c>\n     * @returns {Function} - Function<c, b, a>\n     */\n    flip3 = fn => (a, b, c) => call(fn, c, b, a),\n\n    /**\n     * Returns a function that receives 4 args in reverse (4, 3, 2, 1 etc.).\n     * @function module:functionOps_.flip4\n     * @param fn {Function} - Function<a, b, c, d>\n     * @returns {Function} - Function<d, c, b, a>\n     */\n    flip4 = fn => (a, b, c, d) => call(fn, d, c, b, a),\n\n    /**\n     * Returns a function that receives 5 args in reverse (5, 4, 3, 2, 1 etc.).\n     * @function module:functionOps_.flip5\n     * @param fn {Function} - Function<a, b, c, d, e>\n     * @returns {Function} - Function<e, d, c, b, a>\n     */\n    flip5 = fn => (a, b, c, d, e) => call(fn, e, d, c, b, a),\n\n    /**\n     * Flips a functionOps's first and second arguments and and returns a new functionOps requiring said arguments in reverse.\n     * @function module:functionOps_.flip\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    flip = fn => (b, a) => call(fn, a, b);\n","/**\n * @memberOf functionOps\n * @author elydelacruz\n * @created 12/6/2016.\n * @description Curry implementation with place holder concept (`__`).\n * @todo Make code here more minimal (reuse small parts here).\n */\n\nimport {apply, concat, map, filter, length} from '../jsPlatform_';\n\n/**\n * PlaceHolder (__) constructor.\n * @constructor PlaceHolder\n * @private\n */\nconst PlaceHolder = function PlaceHolder() {},\n\n    /**\n     * Placeholder instance.\n     * @type {PlaceHolder}\n     * @private\n     */\n    placeHolderInstance = new PlaceHolder();\n\n/**\n * Checks to see if value is a `PlaceHolder`.\n * @param instance {*}\n * @returns {boolean}\n * @private\n */\nfunction isPlaceHolder (instance) {\n    return instance instanceof PlaceHolder;\n}\n\n/**\n * Replaces `placeholder` values in `listOps`.\n * @function replacePlaceHolder\n * @private\n * @param array {Array} - Array to replace placeholders in.\n * @param args {Array} - Args from to choose from to replace placeholders.\n * @returns {Array|*} - Returns passed in `listOps` with placeholders replaced by values in `args`.\n */\nfunction replacePlaceHolders (array, args) {\n    let out = map(element => {\n            if (!isPlaceHolder(element)) { return element; }\n            else if (length(args)) { return args.shift(); }\n            return element;\n        }, array);\n    return length(args) ? concat(out, args) : out;\n}\n\n/**\n * Curries passed in functionOps up to given arguments length (can enforce arity via placeholder values (`__`)).\n * @function module:functionOps_.curry_\n * @param fn {Function}\n * @param argsToCurry {...*}\n * @returns {Function}\n */\nexport function curry_ (fn, ...argsToCurry) {\n    return (...args) => {\n        let concatedArgs = replacePlaceHolders(argsToCurry, args),\n            placeHolders = filter(isPlaceHolder, concatedArgs),\n            canBeCalled = length(placeHolders) === 0 &&\n                length(concatedArgs) >= length(fn);\n        return canBeCalled ? apply(fn, concatedArgs) :\n            apply(curry_, concat([fn], concatedArgs));\n    };\n}\n\n/**\n * Curries a functionOps up to given arity also enforces arity via placeholder values (`__`).\n * @function module:functionOps_.curryN_\n * @param executeArity {Number}\n * @param fn {Function}\n * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\n * @returns {Function} - Passed in functionOps wrapped in a functionOps for currying.\n */\nexport function curryN_ (executeArity, fn, ...curriedArgs) {\n    return (...args) => {\n        let concatedArgs = replacePlaceHolders(curriedArgs, args),\n            placeHolders = filter(isPlaceHolder, concatedArgs),\n            canBeCalled = (length(concatedArgs) - length(placeHolders) >= executeArity) || !executeArity;\n        return !canBeCalled ?\n            apply(curryN_, concat([executeArity, fn], concatedArgs)) :\n            apply(fn, concatedArgs);\n    };\n}\n\n/**\n * Place holder object (frozen) used by curry.\n * @memberOf functionOps_\n * @type {PlaceHolder}\n */\nexport let __ = Object.freeze ? Object.freeze(placeHolderInstance) : placeHolderInstance,\n\n    /**\n     * Curries a functionOps up to an arity of 2 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 2 or more args).\n     * @function module:functionOps_.curry2_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry2_ = fn => curryN_(2, fn),\n\n    /**\n     * Curries a functionOps up to an arity of 3 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 3 or more args).\n     * @function module:functionOps_.curry3_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry3_ = fn => curryN_(3, fn),\n\n    /**\n     * Curries a functionOps up to an arity of 4 (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 4 or more args).\n     * @function module:functionOps_.curry4_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry4_ = fn => curryN_(4, fn),\n\n    /**\n     * Curries a functionOps up to an arity of 5  (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 5 or more args).\n     * @function module:functionOps_.curry5_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry5_ = fn => curryN_(5, fn)\n\n;\n","/**\n * @memberOf functionOps_\n */\n\n/**\n * Returns passed in parameter.\n * @haskellType `id :: a -> a`\n * @function module:functionOps_.id\n * @param x {*}\n * @returns {*}\n */\nexport const id = x => x;\n","import {reduceRight} from '../jsPlatform/array_';\n\n/**\n * Composes all functions passed in from right to left passing each functions return value to\n * the functionOps on the left of itself.\n * @function module:fjl.compose\n * @type {Function}\n * @param args {...Function}\n * @returns {Function}\n */\nexport const compose = (...args) => arg0 => reduceRight((value, fn) => fn(value), arg0, args);\n","/**\n * Function operations: `\n * @module functionOps\n */\n\nimport {curry, curry2, curry3} from './uncurried/functionOps/curry_';\n\nimport {\n    apply as _apply,\n    call as _call, reverse\n} from './uncurried/jsPlatform_';\n\nimport {\n    until as _until\n} from './uncurried/functionOps/until_';\n\nimport {\n    flip as _flip,\n    flipN as _flipN,\n    flip3 as _flip3,\n    flip4 as _flip4,\n    flip5 as _flip5\n} from './uncurried/functionOps/flip_';\n\nexport * from './uncurried/functionOps/curry_';\nexport * from './uncurried/functionOps/curry__';\nexport * from './uncurried/functionOps/negate_';\nexport * from './uncurried/functionOps/id_';\nexport * from './uncurried/functionOps/compose_';\n\nexport {_apply, _call, _until, _flip, _flip3, _flip4, _flip5,  _flipN};\n\nexport const\n\n    /**\n     * Functional `apply` functionOps (takes no context).\n     * @function module:functionOps.apply\n     * @param fn {Function}\n     * @param args {*}\n     * @returns {*}\n     */\n    apply = curry(_apply),\n\n    /**\n     * Functional `call` function (takes no context).\n     * @function module:functionOps.call\n     * @param fn {Function}\n     * @param args {*}\n     * @returns {*}\n     */\n    call = curry2(_call),\n\n    /**\n     * Run `operation` `until` predicate returns `true`.\n     * @function module:functionOps.until\n     * @param predicate {Function} :: a -> Boolean\n     * @param operation {Function} :: a -> a\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\n     * @returns {*} - What ever type `typeInstance` is\n     * @curried\n     */\n    until = curry(_until),\n\n    /**\n     * Flips a functions arguments order and returns a new functionOps requiring such (arguments in reverse order).\n     * @function module:fnOperators.flipN\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    flipN = fn => curry3((...args) => apply(fn, reverse(args))),\n\n    /**\n     * Flips a functionOps's first and second arguments and and returns a new functionOps requiring said arguments in reverse.\n     * @function module:fnOperators.flip\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    flip = fn => curry(_flip(fn)),\n\n    /**\n     * Returns a function that receives 3 args in reverse (3, 2, 1 etc.).\n     * @function module:functionOps.flip3\n     * @param fn {Function} - Function<a, b, c>\n     * @returns {Function} - Function<c, b, a>\n     */\n    flip3 = fn => curry(_flip3(fn)),\n\n    /**\n     * Returns a function that receives 4 args in reverse (4, 3, 2, 1 etc.).\n     * @function module:functionOps.flip4\n     * @param fn {Function} - Function<a, b, c, d>\n     * @returns {Function} - Function<d, c, b, a>\n     */\n    flip4 = fn => curry(_flip4(fn)),\n\n    /**\n     * Returns a function that receives 5 args in reverse (5, 4, 3, 2, 1 etc.).\n     * @function module:functionOps.flip5\n     * @param fn {Function} - Function<a, b, c, d, e>\n     * @returns {Function} - Function<e, d, c, b, a>\n     */\n    flip5 = fn => curry(_flip5(fn));\n","/**\n * @module functionOps_\n * @private\n */\nexport {apply, call} from './jsPlatform/function_';\nexport * from './functionOps/compose_';\nexport * from './functionOps/curry_';\nexport * from './functionOps/curry__';\nexport * from './functionOps/flip_';\nexport * from './functionOps/id_';\nexport * from './functionOps/negate_';\nexport * from './functionOps/until_';\n","/**\n * List operators.\n * @module listOps\n * @todo decide whether to throw errors where functions cannot function without a specific type or to\n *  return undefined (and also determine which cases are ok for just returning undefined).\n * @todo code unperformant shorthand in `listOps`\n * @todo rename monoid functions to normal functions since we are not really defining methods for monoids here.\n */\nimport {curry, curry2} from './uncurried/functionOps_';\n\n// Uncurried methods import\nimport {\n    append as _append, appendMany as _appendMany, all as _all, any as _any, find as _find,\n    findIndex as _findIndex, findIndices as _findIndices, zip as _zip, zipN as _zipN, zipWith as _zipWith,\n    map as _map, mapAccumL as _mapAccumL, mapAccumR as _mapAccumR, zipWithN as _zipWithN,\n    elem as _elem, notElem as _notElem, elemIndex as _elemIndex, elemIndices as _elemIndices, lookup as _lookup,\n    intersperse as _intersperse, intercalate as _intercalate, iterate as _iterate,\n    repeat as _repeat, replicate as _replicate, cycle as _cycle, take as _take, drop as _drop, splitAt as _splitAt,\n    foldl as _foldl, foldl1 as _foldl1, foldr as _foldr, foldr1 as _foldr1, unfoldr as _unfoldr,\n    concatMap as _concatMap, takeWhile as _takeWhile, dropWhile as _dropWhile, dropWhileEnd as _dropWhileEnd,\n    partition as _partition, at as _at, span as _span, breakOnList as _breakOnList, stripPrefix as _stripPrefix,\n    isPrefixOf as _isPrefixOf, isSuffixOf as _isSuffixOf,\n    isInfixOf as _isInfixOf, isSubsequenceOf as _isSubsequenceOf, filter as _filter,\n    maximumBy as _maximumBy, minimumBy as _minimumBy,\n    remove as _remove, insert as _insert, insertBy as _insertBy, nubBy as _nubBy, removeBy as _removeBy,\n    removeFirstsBy as _removeFirstsBy, unionBy as _unionBy, sortOn as _sortOn, sortBy as _sortBy,\n    complement as _complement, difference as _difference, union as _union, intersect as _intersect,\n    intersectBy as _intersectBy, groupBy as _groupBy\n}\n    from './uncurried/listOps_';\n\n// Single arity methods (and single or more arg functions)\nexport {\n    and, or, zipN, unzip, unzipN, head, last, init, tail, uncons, concat, reverse, transpose, subsequences,\n    permutations, group, inits, tails, sum, product, maximum, minimum, sort, nub\n}\n    from './uncurried/listOps_';\n\n// Uncurried methods export\nexport {\n    _append, _appendMany, _all, _any, _find, _findIndex, _findIndices, _zip, _zipN, _zipWith,\n    _map, _mapAccumL, _mapAccumR, _elem, _notElem, _elemIndex, _elemIndices, _lookup,\n    _intersperse, _intercalate, _iterate, _repeat, _replicate, _cycle, _take,\n    _drop, _splitAt, _foldl, _foldl1, _foldr, _foldr1, _unfoldr, _concatMap, _takeWhile, _dropWhile,\n    _dropWhileEnd, _partition, _at, _span, _breakOnList, _stripPrefix, _isPrefixOf,\n    _isSuffixOf, _isInfixOf, _isSubsequenceOf, _filter, _maximumBy, _minimumBy,\n    _remove, _insert, _insertBy, _nubBy, _removeBy, _removeFirstsBy, _unionBy, _sortOn, _sortBy,\n    _complement, _difference, _union, _intersect, _intersectBy, _groupBy\n};\n\n// Exported internals\nexport const\n\n    /**\n     * Append two lists, i.e.,\n     * ```\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\n     * ```\n     * If the first list is not finite, the result is the first list.\n     * @haskellType `append :: List a => a -> a -> a`\n     * @function module:listOps.append\n     * @param xs1 {Array|String|*} - list or list like.\n     * @param xs2 {Array|String|*} - list or list like.\n     * @returns {Array|String|*} - Same type as list like passed in.\n     */\n    append = curry(_append),\n\n    /**\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\n     * @haskellType `appendMany :: List a => a -> [a] -> a\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\n     * @function module:listOps.appendMany\n     * @param x {Array|String|*}\n     * @param args ...{Array|String|*} - Lists or lists likes.\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\n     */\n    appendMany = curry2(_appendMany),\n\n    /**\n     * Map a function over all the elements of a container and concatenate the resulting lists.\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\n     * @function module:listOps.concatMap\n     * @param fn {Function}\n     * @param foldableOfA {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    concatMap = curry2(_concatMap),\n\n    /**\n     * @function module:listOps.map\n     * @param fn {Function} - Function to map on functor item(s).\n     * @param xs {Array|String|*} - Functor.\n     * @returns {Array|String|*} - Functor type that is passed in.\n     */\n    map = curry(_map),\n\n    /**\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\n     * @function module:listOps.intersperse\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\n     *  it typed) so `between` can be any value.\n     * @param between {*} - Should be of the same type of elements contained in list.\n     * @param arr {Array|String|*} - List.\n     * @returns {Array|String|*}\n     */\n    intersperse = curry(_intersperse),\n\n    /**\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\n     * @function module:listOps.intercalate\n     * @param xs {Array|String|*}\n     * @param xss {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    intercalate = curry(_intercalate),\n\n    /**\n     * Reduces a foldable (list etc.) with passed in function.\n     * @function module:listOps.foldl\n     * @param fn {Function}\n     * @param zero {*} - Aggregator.\n     * @param functor {Array|String|*}\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\n     */\n    foldl = curry(_foldl),\n\n    /**\n     * Reduces a foldable (list etc.) from right to left with passed in function.\n     * @function module:listOps.foldr\n     * @param fn {Function}\n     * @param zero {*} - Aggregator.\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\n     */\n    foldr = curry(_foldr),\n\n    /**\n     * Reduces a foldable (list etc.) with passed in function.\n     * @function module:listOps.foldl1\n     * @param fn {Function}\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {*}\n     */\n    foldl1 = curry(_foldl1),\n\n    /**\n     * Reduces a foldable (list etc.) from right to left with passed in function.\n     * @function module:listOps.foldr1\n     * @param fn {Function}\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {*}\n     */\n    foldr1 = curry(_foldr1),\n\n    /**\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\n     * @function module:listOps.mapAccumL\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\n     * @param xs {Array|String|*} - list type.\n     * @return {Array} - [aggregated, list]\n     */\n    mapAccumL = curry(_mapAccumL),\n\n    /**\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\n     * @function module:listOps.mapAccumR\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\n     * @param xs {Array|String|*} - list type.\n     * @return {Array} - [aggregated, list]\n     */\n    mapAccumR = curry(_mapAccumR),\n\n    /**\n     * Iterate on value (`x`) with `op` up to `limit`.\n     * @function module:listOps.iterate\n     * @param limit {Number}\n     * @param op {Function} - Operation\n     * @param x {*} - Starting point.\n     * @returns {*}\n     */\n    iterate = curry(_iterate),\n\n    repeat = curry(_repeat),\n\n    replicate = repeat,\n\n    cycle = curry(_cycle),\n\n    /**\n     * Unfolds a value into a list of somethings.\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\n     * @function module:listOps.unfoldr\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\n     * @param x {*} - Starting parameter to unfold from.\n     * @returns {Array} - An array of whatever you return from `op` yielded.\n     */\n    unfoldr = curry(_unfoldr),\n\n    /**\n     * Finds index in string or list (alias for `findIndex`).\n     * @function module:listOps.findIndex\n     * @param pred {Function} - Predicate<element, index, arr>.\n     * @param arr {Array|String}\n     * @returns {Number} - `-1` if predicate not matched else `index` found\n     */\n    findIndex = curry(_findIndex),\n\n    /**\n     * @function module:listOps.findIndices\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {Array|undefined}\n     */\n    findIndices = curry(_findIndices),\n\n    /**\n     * @function module:listOps.elemIndex\n     * @param x {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    elemIndex = curry(_elemIndex),\n\n    /**\n     * @function module:listOps.elemIndices\n     * @param value {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    elemIndices = curry(_elemIndices),\n\n    /**\n     * Takes `n` items from start of list to `limit` (exclusive).\n     * @function module:listOps.take\n     * @param list {Array|String}\n     * @param limit {Number}\n     * @returns {String|Array} - Passed in type's type\n     */\n    take = curry(_take),\n\n    /**\n     * Drops `n` items from start of list to `count` (exclusive).\n     * @function module:listOps.take\n     * @param list {Array|String}\n     * @param count {Number}\n     * @returns {String|Array} - Passed in type's type\n     */\n    drop = curry(_drop),\n\n    /**\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\n     * given index in second part of returned list)).\n     * @function module:listOps.splitAt\n     * @param ind {Number} - Index to split at.\n     * @param list {Array|String|*} - functor (list or string) to split.\n     * @returns {Array} - Array of whatever type `x` was when passed in\n     */\n    splitAt = curry(_splitAt),\n\n    /**\n     * Gives an list with passed elements while predicate was true.\n     * @function module:listOps.takeWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @returns {Array}\n     */\n    takeWhile = curry(_takeWhile),\n\n    /**\n     * Returns an list without elements that match predicate.\n     * @function module:listOps.dropWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @refactor\n     * @returns {Array|String}\n     */\n    dropWhile = curry(_dropWhile),\n\n    /**\n     * @function module:listOps.dropWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @refactor\n     * @returns {Array|String}\n     */\n    dropWhileEnd = curry(_dropWhileEnd),\n\n    /**\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\n     * the second list in the tuple is a list of the remaining elements in the given list.\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\n     * @function module:listOps.partition\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\n     * @param list {Array|String|*} - Predicate<item, index, originalArrayOrString>\n     * @returns {Array|String|*} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\n     */\n    span = curry(_span),\n\n    breakOnList = curry(_breakOnList),\n\n    /**\n     * @function module:listOps.at\n     * @param ind {Number} - Index.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    at = curry(_at),\n\n    /**\n     * @function module:listOps.find\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    find = curry(_find),\n\n    filter = curry(_filter),\n\n    /**\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\n     * do not match the tuple are in second list in the returned tuple.\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\n     * @function module:listOps.partition\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\n     * @param list {Array|String|*}\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\n     */\n    partition = curry(_partition),\n\n    elem = curry(_elem),\n\n    notElem = curry2(_notElem),\n\n    lookup = at,\n\n    isPrefixOf = curry(_isPrefixOf),\n\n    isSuffixOf = curry(_isSuffixOf),\n\n    isInfixOf = curry(_isInfixOf),\n\n    isSubsequenceOf = curry(_isSubsequenceOf),\n\n    /**\n     * Allows you to group items in a list based on your supplied equality check.\n     * @note Sames `group` but allows you to specify equality operation.\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\n     * @function module:listOps_.groupBy\n     * @param equalityOp {Function}\n     * @param xs {Array|String|*}\n     * @returns {*}\n     */\n    groupBy = curry(_groupBy),\n\n    stripPrefix = curry(_stripPrefix),\n\n    /**\n     * zip takes two lists and returns a list of corresponding pairs.\n     * If one input list is short, excess elements of the longer list are discarded.\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\n     * @function module:listOps.zip\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip = curry(_zip),\n\n    /**\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\n     * zipWith generalises zip by zipping with the function given as the\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\n     * @note `_|_` means bottom or perpetual (@see\n     *  - https://wiki.haskell.org/Bottom\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\n     *  )\n     * @example\n     * ```\n     * zipWith f [] _|_ = []\n     * ```\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\n     * @function module:listOps.zipWith\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\n     *  E.g., ` op :: a -> b -> (a, b)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith = curry(_zipWith),\n\n    /**\n     * Zips all given lists with tupling function. Note: Haskell types do not have\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\n     *  is left there for general purpose not for exactness as is told by aforementioned.\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\n     *  of lists to zip.\n     * @function module:listOps.zipWithN\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\n     * @param lists ...{Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWithN = curry2(_zipWithN),\n\n    /**\n     * Zips 3 lists with tupling function.\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\n     * @function module:listOps.zipWith3\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith3 = zipWithN,\n\n    /**\n     * Zips 4 lists with tupling function.\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\n     * @function module:listOps.zipWith4\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @param xs4 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith4 = zipWithN,\n\n    /**\n     * Zips 5 lists.\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\n     * @function module:listOps.zipWith5\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @param xs4 {Array|String|*}\n     * @param xs5 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith5 = zipWithN,\n\n    any = curry(_any),\n\n    all = curry(_all),\n\n    maximumBy = curry(_maximumBy),\n\n    minimumBy = curry(_minimumBy),\n\n    scanl = () => null,\n\n    scanl1 = () => null,\n\n    scanr = () => null,\n\n    scanr1 = () => null,\n\n    remove = curry(_remove),\n\n    sortOn = curry(_sortOn),\n\n    sortBy = curry(_sortBy),\n\n    insert = curry(_insert),\n\n    /**\n     * A version of `insert` that allows you to specify the ordering of the inserted\n     * item;  Before/at, or after\n     * @function module:listOps_.insertBy\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\n     * @note `Ordering` === // something that is order-able\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\n     *  operated on by this functions logic.\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\n     * @param x {*} - Value to insert.\n     * @param xs {Array|String|*} - List to insert into (note new list is returned)\n     * @returns {Array|String|*} - New list.\n     */\n    insertBy = curry(_insertBy),\n\n    nubBy = curry(_nubBy),\n\n    removeBy = curry(_removeBy),\n\n    removeFirstsBy = curry(_removeFirstsBy),\n\n    /**\n     * Returns the union on elements matching boolean check passed in.\n     * @function module:listOps.unionBy\n     * @param pred {Function} - `pred :: a -> a -> Bool`\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    unionBy = curry(_unionBy),\n\n    /**\n     * Creates a union on matching elements from array1.\n     * @function module:listOps.union\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    union = curry(_union),\n\n    /**\n     * Performs an intersection on list 1 with  elements from list 2.\n     * @function module:listOps.intersect\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    intersect = curry(_intersect),\n\n    /**\n     * Returns an intersection by predicate.\n     * @function module:listOps.intersectBy\n     * @param pred {Function} - `pred :: a -> b -> Bool`\n     * @param list1 {Array|String|*}\n     * @param list2 {Array|String|*}\n     * @return {Array|String|*}\n     */\n    intersectBy = curry(_intersectBy),\n\n    /**\n     * Returns the difference of list 1 from list 2.\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\n     * @function module:listOps.difference\n     * @param array1 {Array|String|*}\n     * @param array2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    difference = curry(_difference),\n\n    /**\n     * Returns the complement of list 0 and the reset of the passed in arrays.\n     * @function module:listOps.complement\n     * @param arr0 {Array}\n     * @param arrays {...Array}\n     * @returns {Array}\n     */\n    complement = curry2(_complement);\n","/**\n * Created by elydelacruz on 9/6/2017.\n * @module jsPlatform_string\n * @private\n */\n\nimport {curry} from   '../uncurried/functionOps/curry_';\n\nimport {split as _split} from '../uncurried/jsPlatform/string_';\n\n/**\n * Functional version of `String.prototype.split`.\n * @curried\n * @function module:jsPlatform_string.split\n * @param separator {String|RegExp}\n * @param str {String}\n * @returns {Array}\n */\nexport const split = curry(_split);\n","/**\n * Contains functions for operating strings.\n * @author elyde\n * @created 7/9/2017.\n * @module stringOps\n */\nimport {intercalate} from './listOps';\n\nimport {split} from './jsPlatform/string';\n\nexport const\n\n    /**\n     * Splits a stringOps on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\n     * @function module:stringOps.lines\n     * @param str {String}\n     * @returns {Array}\n     */\n    lines = split(/[\\n\\r]/gm),\n\n    /**\n     * Splits a stringOps on all '\\s' and/or all '\\t' characters.\n     * @function module:stringOps.words\n     * @param str{String}\n     * @returns {Array}\n     */\n    words = split(/[\\s\\t]/gm),\n\n    /**\n     * Intersperse an array of strings with '\\s' and then concats them.\n     * @function module:stringOps.unwords\n     * @param arr {String}\n     * @returns {Array}\n     */\n    unwords = intercalate(' '),\n\n    /**\n     * Intersperses a '\\n' character into a list of strings and then concats it.\n     * @function module:stringOps.unlines\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    unlines = intercalate('\\n');\n","/**\n * Content generated by '{project-root}/node-scripts/VersionNumberReadStream.js'.\n * Generated Fri Dec 08 2017 19:19:19 GMT-0500 (EST) \n */\n\nexport let version = '0.17.13';\n\nexport default version;\n\n","/**\n * Created by elyde on 12/6/2016.\n * @file fjl.js\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\n *  a subset of functions which can make the javascript developer more efficient and make his/her\n *  code more concise (and functional).\n * @description Includes operations from haskell's Prelude.\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\n * @todo any cross importing between packages should be done from the package object (package file: E.g., './src/functionOps/functionOps.js').\n * @todo decide how to include 'uncurried' members in the main export of the library.\n * @module fjl\n */\n\nexport * from './objectOps';\nexport * from './booleanOps';\nexport * from './functionOps';\nexport * from './listOps';\nexport * from './stringOps';\n\nexport {version} from './generated/version';\n"],"names":["fPureTakesOne","arg","f","name","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","args","instanceOf","instanceConstructor","instance","hasOwnProperty","length","x","toString","keys","Object","obj","assign","obj0","objs","reduce","topAgg","agg","key","getOwnPropertyNames","filter","defineReverse","Array","prototype","reverse","reduceRight","item","push","map","forEach","some","every","join","concat","slice","includes","value","xs","indexOf","lastIndexOf","split","apply","fn","call","curry","argsToCurry","concatedArgs","curryN","executeArity","curriedArgs","canBeCalled","curry2","curry3","curry4","curry5","prop","_Number","Number","_NaN","_Null","_Undefined","_undefined","typeOf","retVal","constructorName","constructor","isNaN","_String","String","_Object","_Boolean","Boolean","_Function","Function","_Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","isFunction","isType","type","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isPromise","isUsableImmutablePrimitive","typeOfX","Type","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","typeOfValue","notEmptyAndOfType","isset","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","negateF","a","b","negateF3","c","negateF4","d","negateF5","e","negateP","negateFMany","isTruthy","isFalsy","alwaysTrue","alwaysFalse","of","undefined","aggregateStr","aggregateArr","aggregateObj","ind","aggregatorByType","limit","out","aggregate","sliceFrom","startInd","arr","sliceTo","toInd","copy","genericAscOrdering","lengths","lists","lengthsToSmallest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceRightUntil","operation","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","_swap","ind1","ind2","tmp","_permutationsAlgo","listIn","remainderLen","i","newLen","append","listAppend","appendMany","Error","head","last","tail","init","uncons","unconsr","concatMap","foldableOfA","aggregator","foldr","intersperse","between","lastInd","aggregatorOp","foldl","intercalate","xss","transpose","numLists","longestListLen","maximum","outLists","outList","subsequences","pow","entry","j","permutations","foldl1","parts","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","repeat","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","count","splitAt","takeWhile","dropWhile","splitPoint","list2","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","lookup","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","lenOfTrimmed","zipWith","zipWithN","unzip","unzipN","lenItem0","any","p","all","and","or","sum","product","maximumBy","minimum","minimumBy","ordering","sortBy","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","b1","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","unionBy","alreadyAdded","union","intersect","intersectBy","list1","difference","array1","array2","complement","arr0","arrays","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","_prop","_instanceOf","_hasOwnProperty","_assign","_assignDeep","_objUnion","_objIntersect","_objDifference","_objComplement","_isType","_notEmptyAndOfType","until","predicate","typeInstance","flipN","flip3","flip4","flip5","flip","PlaceHolder","placeHolderInstance","isPlaceHolder","replacePlaceHolders","array","element","shift","curry_","placeHolders","curryN_","__","freeze","curry2_","curry3_","curry4_","curry5_","id","compose","arg0","_apply","_call","_until","_flip","_flip3","_flip4","_flip5","_append","_appendMany","_concatMap","_map","_intersperse","_intercalate","_foldl","_foldr","_foldl1","_foldr1","_mapAccumL","_mapAccumR","_iterate","_repeat","_cycle","_unfoldr","_findIndex","_findIndices","_elemIndex","_elemIndices","_take","_drop","_splitAt","_takeWhile","_dropWhile","_dropWhileEnd","_span","_breakOnList","_at","_find","_filter","_partition","_elem","_notElem","_isPrefixOf","_isSuffixOf","_isInfixOf","_isSubsequenceOf","_groupBy","_stripPrefix","_zip","_zipWith","_zipWithN","zipWith3","zipWith4","zipWith5","_any","_all","_maximumBy","_minimumBy","scanl","scanl1","scanr","scanr1","_remove","_sortOn","_sortBy","_insert","_insertBy","_nubBy","_removeBy","_removeFirstsBy","_unionBy","_union","_intersect","_intersectBy","_difference","_complement","_split","lines","words","unwords","unlines","version"],"mappings":"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"}