{"version":3,"file":"fjl.js","sources":["../../src/object/typeOf.js","../../src/function/fnOrError.js","../../src/function/curry.js","../../src/utils.js","../../src/jsPlatform/object.js","../../src/object/is.js","../../src/object/prop.js","../../src/jsPlatform/function.js","../../src/object/of.js","../../src/object/fromNamespace.js","../../src/object/assignDeep.js","../../src/jsPlatform/list.js","../../src/function/negate.js","../../src/boolean.js","../../src/list/map.js","../../src/list/aggregation.js","../../src/list/utils.js","../../src/jsPlatform/array.js","../../src/jsPlatform/string.js","../../src/jsPlatform.js","../../src/list.js","../../src/object/setTheory.js","../../src/object/console.js","../../src/object/errorThrowing.js","../../src/object/jsonClone.js","../../src/object/assocList.js","../../src/object/toArray.js","../../src/object.js","../../src/function/compose.js","../../src/function/_curry.js","../../src/function/flip.js","../../src/function/id.js","../../src/function/until.js","../../src/function.js","../../src/string.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\n/**\r\n * Returns the constructor/class/type name of a value.\r\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n * @note Returns 'Undefined' if value is `undefined`\r\n * @note Returns 'Null' if value is `null`\r\n * For values that have no concrete constructors and/or casters\r\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n * @function module:object.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (value === undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","import {typeOf} from '../object/typeOf';\r\n\r\nconst\r\n\r\n    /**\r\n     * Throws error if `f` is not a function, else returns it (`f`).\r\n     * @private\r\n     * @param symbolName {String}\r\n     * @param f {*} - Expected function.\r\n     * @returns {Function}\r\n     */\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || typeof f !== 'function') {\r\n            throw new Error(`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    }\r\n\r\n;\r\n\r\nexport default fnOrError;\r\n","import fnOrError from './fnOrError';\r\n\r\n/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf function\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\r\n\r\nexport const\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    curryNotFnErrPrefix = '`fn` in `curry(fn, ...args)`',\r\n\r\n    /**\r\n     * Curries a function based on it's defined arity (argument's arrayOps expected length).\r\n     * @function module:function.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => curryN(fnOrError(curryNotFnErrPrefix, fn).length, fn, ...argsToCurry),\r\n\r\n    /**\r\n     * Curries a function up to a given arity.\r\n     * @function module:function.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param curriedArgs {...*}\r\n     * @returns {Function}\r\n     */\r\n    curryN = (executeArity, fn, ...curriedArgs) => {\r\n        return (...args) => {\r\n            let concatedArgs = curriedArgs.concat(args),\r\n                canBeCalled = (concatedArgs.length >= executeArity) || !executeArity;\r\n            return !canBeCalled ? curryN.apply(null, [executeArity, fnOrError(curryNotFnErrPrefix, fn)].concat(concatedArgs)) :\r\n                fnOrError(curryNotFnErrPrefix, fn).apply(null, concatedArgs);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (won't call function until 2 or more args).\r\n     * @function module:function.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (won't call function until 3 or more args).\r\n     * @function module:function.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (won't call function until 4 or more args).\r\n     * @function module:function.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5 (won't call function until 5 or more args).\r\n     * @function module:function.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","import {typeOf} from './object/typeOf';\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    fPureTakesOne = name => curry((arg, f) => f[name](arg)),\r\n\r\n    fPureTakes2 = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    fPureTakes3 = name => curry((arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3)),\r\n\r\n    fPureTakes4 = name => curry((arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4)),\r\n\r\n    fPureTakes5 = name => curry((arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5)),\r\n\r\n    fPureTakesOneOrMore = name => curry2((f, ...args) => f[name](...args)),\r\n\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || typeof f !== 'function') {\r\n            throw new Error (`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    };\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n * Defines some of the platform methods for objects (the ones used within `fjl`) uncurried for use\r\n * throughout the library.  @note Doesn't include all methods for objects just the ones used in\r\n *  the library.\r\n * @todo change all files named '*UnCurried' to '*_'.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived object.\r\n     * @function module:_jsPlatformobject.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = curry((instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor),\r\n\r\n    /**\r\n     * @function module:_jsPlatformobject.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:_jsPlatformobject.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * Gets own enumerable keys of passed in object (`Object.keys`).\r\n     * @function module:_jsPlatformobject.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    {keys} = Object,\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:_jsPlatformobject.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() => Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            (obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0)\r\n        )();\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\n\r\nimport {typeOf} from './typeOf';\r\nimport {instanceOf, length, keys, hasOwnProperty} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether a value is a function or not.\r\n     * @function module:object.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = instanceOf(Function),\r\n\r\n    /**\r\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\r\n     * be a named constructor/function-instance;  E.g.,\r\n     * ```\r\n     *  function SomeName () {} // or\r\n     *  var SomeName = function SomeName () {} // or\r\n     *  class SomeName {}\r\n     * ```\r\n     * @function module:object.isType\r\n     * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry((type, obj) => typeOf(obj) === (isFunction(type) ? type.name : type)),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:object.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a boolean depicting whether a value is callable or not.\r\n     * @function module:object.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an array (same as `Array.isArray`).\r\n     * @function module:object.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    {isArray} = Array,\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:object.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = isType(_Object),\r\n\r\n    /**\r\n     * Checks if value is a boolean.\r\n     * @function module:object.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = isType(_Boolean),\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:object.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = isType(_Number),\r\n\r\n    /**\r\n     * Checks whether value is a string or not.\r\n     * @function module:object.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = isType(_String),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:object.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = isType(_Map),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:object.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = isType(_Set),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:object.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap =isType(_WeakMap),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:object.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = isType(_WeakSet),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:object.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = isType(_Undefined),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:object.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = isType(_Null),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:object.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = isType(_Symbol),\r\n\r\n    /**\r\n     * Checks if given `x` is set and of one of\r\n     *  [String, Boolean, Number, Symbol] (null and undefined are immutable\r\n     *  but are not \"usable\" (usually not what we want to operate on).\r\n     * @function module:object.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return isset(x) &&\r\n            [_String, _Number, _Boolean, _Symbol]\r\n                .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:object.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => !length(x),\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:object.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:object.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in value is empty;  I.e.,\r\n     *  check for one of '', 0, `null`, `undefined`, `false`, empty array, empty object, empty function (zero arity),\r\n     *  or empty collection (es6 Map, Set, WeakMap, or WeakSet etc. (`!value.size`);\r\n     * @function module:object.isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        let retVal;\r\n        if (!value) { // if '', 0, `null`, `undefined`, or `false` then is empty\r\n            retVal = true;\r\n        }\r\n        const typeOfValue = typeOf(value);\r\n        if (typeOfValue === _Array || typeOfValue === _Function) {\r\n            retVal = isEmptyList(value);\r\n        }\r\n        else if (typeOfValue === _Number) {\r\n            retVal = false;\r\n        }\r\n        else if (typeOfValue === _Object) {\r\n            retVal = isEmptyObject(value);\r\n        }\r\n        else if (hasOwnProperty('size', value) && isNumber(value.size)) {\r\n            retVal = isEmptyCollection(value);\r\n        }\r\n        else {\r\n            retVal = !value;\r\n        }\r\n        return retVal;\r\n    },\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null or not.\r\n     * @function module:object.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => x !== null && x !== undefined;\r\n","/**\r\n * @memberOf object\r\n */\r\n\r\nimport {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Returns property value if found; Else `undefined`.\r\n * @note This method is null/undefined safe (will not throw on `null` or `undefined`).\r\n * @function module:object.prop\r\n * @param name {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\r\nexport const prop = curry((name, obj) => isset(obj) ? obj[name] : undefined);\r\n","import {curry, curry2} from '../function/curry';\r\n\r\n/**\r\n * Created by elydelacruz on 9/7/2017.\r\n * @module _jsPlatform_function\r\n * @private\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:_jsPlatform_function.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry((fn, args) => fn.apply(null, args)),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:_jsPlatform_function.call\r\n     * @param fn {Function}\r\n     * @param args {...*}\r\n     * @returns {*}\r\n     */\r\n    call = curry2((fn, ...args) => apply(fn, args));\r\n","import {isFunction, isset, isUsableImmutablePrimitive} from './is';\r\nimport {hasOwnProperty} from '../jsPlatform/object';\r\nimport {apply} from '../jsPlatform/function';\r\n\r\n/**\r\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n * ```\r\n * // - If exists `(value).constructor.of` uses this.\r\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\r\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n * // - Else if constructor is a function, thus far, then calls constructor using\r\n * //      the `new` keyword (with any passed in args).\r\n * ```\r\n * @function module:object.of\r\n * @param x {*} - Value to derive returned value's type from.\r\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n */\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","import {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Gives you value at key/namespace-key;  E.g.,\r\n     * ```\r\n     *   fromNamespace('all.your.base', {all: {your: {base: 99}}}) === 99\r\n     * ```\r\n     * @function module:object.fromNamespace\r\n     * @param nsString {String}\r\n     * @param obj {*}\r\n     * @returns {*}\r\n     */\r\n    fromNamespace = curry((nsString, obj) => {\r\n        if (!obj) { return obj; }\r\n        if (nsString.indexOf('.') === -1) {\r\n            return obj[nsString];\r\n        }\r\n        const parts = nsString.split('.'),\r\n            limit = parts.length;\r\n        let ind = 0,\r\n            parent = obj;\r\n        for (; ind < limit; ind += 1) {\r\n            const node = parent[parts[ind]];\r\n            if (!isset(node)) {\r\n                return node;\r\n            }\r\n            parent = node;\r\n        }\r\n        return parent;\r\n    })\r\n;\r\n","\r\nimport {isObject} from './is';\r\nimport {curry2} from '../function/curry';\r\nimport {keys, hasOwnProperty} from '../jsPlatform/object';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one (takes two or more args).\r\n     * @function module:object.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param [objs] {...{Object}} - One or more objects to merge onto `obj0`.\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = curry2((obj0, ...objs) =>\r\n        objs.reduce((topAgg, obj) =>\r\n            !obj ? topAgg : keys(obj).reduce((agg, key) => {\r\n                let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                // If property is not writable move to next item in collection\r\n                if (hasOwnProperty(key, agg) && propDescription &&\r\n                    !(propDescription.get && propDescription.set) &&\r\n                    !propDescription.writable) {\r\n                    return agg;\r\n                }\r\n                if (isObject(agg[key]) && isObject(obj[key])) {\r\n                    assignDeep(agg[key], obj[key]);\r\n                }\r\n                else { agg[key] = obj[key]; }\r\n                return agg;\r\n            }, topAgg)\r\n        , obj0));\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n *      on both strings and arrays.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:_jsPlatform_list.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:_jsPlatform_list.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:_jsPlatform_list.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:_jsPlatform_list.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:_jsPlatform_list.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\nimport {apply} from '../jsPlatform/function';\r\nimport {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Takes a function that takes two parameters and returns a negated version of given\r\n     * function.\r\n     * @function module:_negate.negateF\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF = fn => curry((a, b) => !fn(a, b)),\r\n\r\n    /**\r\n     * Takes a function that takes three parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF3 = fn => curry((a, b, c) => !fn(a, b, c)),\r\n\r\n    /**\r\n     * Takes a function that takes four parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF4 = fn => curry((a, b, c, d) => !fn(a, b, c, d)),\r\n\r\n    /**\r\n     * Takes a function that takes four parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF5 = fn => curry((a, b, c, d, e) => !fn(a, b, c, d, e)),\r\n\r\n    /**\r\n     * Negates a javascript-'generic' predicate; `Function<element, index, list>`.\r\n     * @function module:function.negateP\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateP = negateF3,\r\n\r\n    /**\r\n     * Returns a new function which is the dual of `fn` (or the negated version of `fn`).\r\n     * The return function is variadic (or accepts one or more arguments (and isn't curried)).\r\n     * @function module:function.negateFN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFN = fn => (...args) => !apply(fn, args);\r\n","/**\r\n * @module boolean\r\n * @description Contains functional version of 'always-true', 'always-false', 'is-truthy', and 'is-falsy'.\r\n */\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:boolean.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:boolean.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value,\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:boolean.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:boolean.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false;\r\n","import {length} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * @function module:list.map\r\n * @param fn {Function} - Function to map on array.\r\n * @param xs {Array}\r\n * @returns {Array}\r\n */\r\nconst map = curry((fn, xs) =>  {\r\n    let ind = 0,\r\n        limit = length(xs),\r\n        out = [];\r\n    if (!limit) { return out; }\r\n    while (ind < limit) {\r\n        out.push(fn(xs[ind], ind, xs));\r\n        ind += 1;\r\n    }\r\n    return out;\r\n});\r\n\r\nexport default map;\r\n","import {typeOf} from '../object';\r\n\r\nexport const\r\n\r\n    aggregateStr = (agg, item) => agg + item,\r\n\r\n    aggregateArr$ = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    },\r\n\r\n    aggregateObj = (agg, item, ind) => {\r\n        agg[ind] = item;\r\n        return agg;\r\n    },\r\n\r\n    aggregatorByType = x => {\r\n        switch (typeOf(x)) {\r\n            case 'String': return aggregateStr;\r\n            case 'Array': return aggregateArr$;\r\n            case 'Object':\r\n            default: return aggregateObj;\r\n        }\r\n    };\r\n","/**\r\n * List operator utils module.\r\n * @module _listOpUtils\r\n * @private\r\n */\r\nimport {apply}          from '../jsPlatform/function';  // un-curried version\r\nimport {slice}          from '../jsPlatform/list';      // un-curried version good for both strings and arrays\r\nimport {length}         from '../jsPlatform/object';\r\nimport {alwaysFalse}    from '../boolean';\r\nimport map              from './map';\r\nimport {curry}          from '../function/curry';\r\n\r\nexport * from './aggregation';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @function module:listUtils.sliceFrom\r\n     * @param startInd {Number}\r\n     * @param arr {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = curry((startInd, arr) => slice(startInd, undefined, arr)),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @function module:listUtils.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = curry((toInd, xs) => slice(0, toInd, xs)),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function _listOpUtils.sliceFrom\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    copy = sliceFrom(0),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function _listOpUtils.sliceCopy\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceCopy = copy,\r\n\r\n    /**\r\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n     * @function module:listUtils.genericAscOrdering\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {number}\r\n     */\r\n    genericAscOrdering = curry((a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    }),\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @function module:listUtils.lengths\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = (...lists) => length(lists) ? map(length, lists) : [],\r\n\r\n    /**\r\n     * @function module:listUtils.lengthsToSmallest\r\n     * @param lists {...(Array|String|*)}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengthsToSmallest = (...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : copy(list), lists);\r\n    },\r\n\r\n    /**\r\n     * Reduces until predicate.\r\n     * @param pred\r\n     * @param op\r\n     * @param agg\r\n     * @param arr\r\n     * @returns {*}\r\n     */\r\n    reduceUntil = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate (from the right).\r\n     * @param pred\r\n     * @param op\r\n     * @param agg\r\n     * @param arr\r\n     * @returns {*}\r\n     */\r\n    reduceRightUntil = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    reduce = reduceUntil(alwaysFalse),\r\n\r\n    reduceRight = reduceRightUntil(alwaysFalse),\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:listOpUtilslastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:listOpUtilsfindIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = curry((pred, arr) => {\r\n        let ind = -1,\r\n            predicateFulfilled = false;\r\n        const limit = length(arr);\r\n        while (ind < limit && !predicateFulfilled) {\r\n            predicateFulfilled = pred(arr[++ind], ind, arr);\r\n        }\r\n        return ind;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:listOpUtilsfindIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = curry((pred, arr) => {\r\n        const limit = length(arr);\r\n        let ind = limit,\r\n            predicateFulfilled = false;\r\n        for (; ind >= 0 && !predicateFulfilled; --ind) {\r\n            predicateFulfilled = pred(arr[ind], ind, arr);\r\n        }\r\n        return ind;\r\n    }),\r\n\r\n    /**\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = curry((pred, xs) => {\r\n        if (!xs || !xs.length) { return undefined; }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out.length ? out : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listOpUtilsfind\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    })\r\n\r\n;\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n * @module _jsPlatform_arrayOps\r\n * @private\r\n * @todo updated doc blocks to list correct/updated module name.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Array.prototype.reverse generator (generates a function that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, []),\r\n\r\n    /**\r\n     * Maps a function to functor (list etc.).\r\n     * @function module:_jsPlatform_array.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from the right with passed in function.\r\n     * @function module:_jsPlatform_array.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an list (shimmed if not exists).\r\n     * @function module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:_string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * @module jsPlatform_\r\n * @private\r\n */\r\nexport * from './jsPlatform/object';\r\nexport * from './jsPlatform/array';\r\nexport * from './jsPlatform/list';\r\nexport * from './jsPlatform/string';\r\nexport * from './jsPlatform/function';\r\n","/**\r\n * List operations module (un-curried version).\r\n * @module list\r\n * @private\r\n */\r\nimport {concat as listAppend, indexOf, slice, includes} from './jsPlatform/list';\r\nimport {apply}              from './jsPlatform/function';\r\nimport {negateP, negateF}   from './function/negate';\r\nimport {isTruthy, isFalsy}  from './boolean';\r\nimport {prop, length}       from './object';\r\nimport map                  from './list/map';\r\nimport {curry, curry2} from './function/curry';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    lengthsToSmallest, aggregateArr$,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, copy, genericAscOrdering\r\n}\r\n    from './list/utils';\r\n\r\nexport {map};\r\n\r\nexport {slice, includes, indexOf, lastIndexOf, split, push} from './jsPlatform';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Append two lists, i.e.,\r\n     * ```\r\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\r\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\r\n     * ```\r\n     * If the first list is not finite, the result is the first list.\r\n     * @haskellType `append :: List a => a -> a -> a`\r\n     * @function module:list.append\r\n     * @param xs1 {Array} - list or list like.\r\n     * @param xs2 {Array} - list or list like.\r\n     * @returns {Array} - Same type as list like passed in.\r\n     */\r\n    append = listAppend,\r\n\r\n    /**\r\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\r\n     * @haskellType `appendMany :: List a => a -> [a] -> a\r\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\r\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\r\n     * @function module:list.appendMany\r\n     * @param args ...{Array} - Lists or lists likes.\r\n     * @returns {Array} - Same type as first list or list like passed in.\r\n     */\r\n    appendMany = curry2((...args) => {\r\n        if (length(args)) { return apply(listAppend, args); }\r\n        throw new Error('`appendMany` requires at least one arg.');\r\n    }),\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:list.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:list.last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:list.tail\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:list.init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:list.uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|undefined}\r\n     */\r\n    uncons = xs =>\r\n        !xs || length(xs) === 0 ? undefined : [head(xs), tail(xs)],\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:list.unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    unconsr = xs => !xs || length(xs) === 0 ? undefined : [init(xs), last(xs)],\r\n    \r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:list.concat\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    concat = xs => !length(xs) ? copy(xs) : apply(appendMany, xs),\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:list.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array}\r\n     * @returns {Array}\r\n     */\r\n    concatMap = curry((fn, foldableOfA) => concat(map(fn, foldableOfA))),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:list.reverse\r\n     * @param x {Array}\r\n     * @returns {Array}\r\n     */\r\n    reverse = x => foldr((agg, item) => (agg.push(item), agg), [], x),\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:list.intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array} - List.\r\n     * @returns {Array}\r\n     */\r\n    intersperse = curry((between, arr) => {\r\n        const limit = length(arr),\r\n            lastInd = limit - 1,\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        return foldl((agg, item, ind) => (\r\n                ind === lastInd ?\r\n                    agg.push(item) :\r\n                    agg.push(item, between),\r\n                agg\r\n            ), out, arr);\r\n    }),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:list.intercalate\r\n     * @param xs {Array}\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    intercalate = curry((xs, xss) => concat(intersperse(xs, xss))),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @todo upgrade this function to support lists of strings.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:list.transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return [];\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return filter(x => length(x), outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:list.subsequences\r\n     * @jsperftest https://jsperf.com/subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array.<Array>}\r\n     */\r\n    subsequences = xs => {\r\n        const listLen = length(xs),\r\n            len = Math.pow(2, listLen),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            let entry = [];\r\n            for (let j = 0; j < listLen; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with the given indices swapped.\r\n     * @function module:list.swapped\r\n     * @param ind1 {Number}\r\n     * @param ind2 {Number}\r\n     * @param list {Array}\r\n     * @returns {Array} - Copy of incoming with swapped values at indices.\r\n     */\r\n    swapped = curry((ind1, ind2, list) => {\r\n        const out = copy(list),\r\n            tmp = out[ind1];\r\n        out[ind1] = out[ind2];\r\n        out[ind2] = tmp;\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Returns a list of permutations for passed in list.\r\n     *  Use caution with lists above a length of 15 (will take long due to nature of\r\n     *  algorithm).\r\n     * @function module:list.permutations\r\n     * @param xs {Array} - List.\r\n     * @returns {Array<Array|String|*>} - Array of permutations.\r\n     */\r\n    permutations = xs => {\r\n        const limit = length(xs);\r\n\r\n        if (!limit || limit === 1) {\r\n            return [xs];\r\n        }\r\n\r\n        let list = copy(xs),\r\n            c = repeat(limit, 0),\r\n            i = 0;\r\n\r\n        const out = [list];\r\n\r\n        for (; i < limit; i++) {\r\n            if (c[i] < i) {\r\n                list = swapped(i % 2 === 0 ? 0 : c[i], i, list);\r\n                out.push(list);\r\n                c[i] += 1;\r\n                i = 0;\r\n                continue;\r\n            }\r\n            c[i] = 0;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\r\n     * @function module:list.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldl = reduce,\r\n\r\n    /**\r\n     * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\r\n     * @function module:list.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldr = reduceRight,\r\n\r\n    /**\r\n     * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldl1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldl1 = curry((op, xs) => {\r\n        const parts = uncons(xs);\r\n        return !parts ? [] : reduce(op, parts[0], parts[1]);\r\n    }),\r\n\r\n    /**\r\n     * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldr1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldr1 = curry((op, xs) => {\r\n        const parts = unconsr(xs);\r\n        return !parts ? [] : reduceRight(op, parts[1], parts[0]);\r\n    }),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry((op, zero, xs) => {\r\n        const list = copy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry((op, zero, xs) => {\r\n        const list = copy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * iterate f x returns an infinite list of repeated applications of f to x.\r\n     * @function module:list.iterate\r\n     * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation.\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry((limit, op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            lastX = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out.push(lastX);\r\n            lastX = op(lastX, ind);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times.\r\n     * @function module:list.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    repeat = curry((limit, x) => iterate(limit, a => a, x)),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:list.replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    replicate = repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:list.cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    cycle = curry((limit, xs) => concat(replicate(limit, xs))),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:list.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry((op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:list.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:list.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:list.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry((x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry((value, xs) => findIndices(x => x === value, xs)),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:list.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = sliceTo,\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:list.take\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = sliceFrom,\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:list.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array} - functor (list or string) to split.\r\n     * @returns {Array} - Array of whatever type `x` was when passed in\r\n     */\r\n    splitAt = (ind, list) => [ sliceTo(ind, list), sliceFrom(ind, list) ],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:list.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry((pred, list) =>\r\n        reduceUntil(\r\n            negateP(pred),  // predicate\r\n            aggregateArr$,   // operation\r\n            [],             // aggregator\r\n            list\r\n        )),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:list.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry((pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry((pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhereRight((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            sliceTo(splitPoint + 1, list);\r\n    }),\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @function module:list.span\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    span = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(negateP(pred), list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * breakOnList, applied to a predicate p and a list xs, returns a tuple\r\n     * where first element is longest prefix (possibly empty) of xs of elements\r\n     * that do not satisfy p and second element is the remainder of the list:\r\n     * @haskellExample\r\n     * Replace `break` with `breakOnList` for our version.\r\n     * ```\r\n     * break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\r\n     * break (< 9) [1,2,3] == ([],[1,2,3])\r\n     * break (> 9) [1,2,3] == ([1,2,3],[])\r\n     * ```\r\n     * @function module:list.breakOnList\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    breakOnList = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(pred, list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * Gets item at index.\r\n     * @function module:list.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*|undefined} - Item or `undefined`.\r\n     */\r\n    at = prop,\r\n\r\n    /**\r\n     * Find an item in structure of elements based on given predicate (`pred`).\r\n     * @function module:list.find\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*} - Found item.\r\n     */\r\n    find = findWhere,\r\n\r\n    /**\r\n     * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\r\n     * @function module:list.filter\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array} - Structure of filtered elements.\r\n     */\r\n    filter = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out.push(xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\r\n     * @function module:list.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry((pred, list) =>\r\n        !length(list) ?\r\n            [[], []] :\r\n                [filter(pred, list), filter(negateP(pred), list)]),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether an element exists in given structure of elements.\r\n     * @function module:list.elem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    elem = includes,\r\n\r\n    /**\r\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\r\n     * @function module:list.notElem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    notElem = negateF(includes),\r\n\r\n    /**\r\n     * Same as list.at - Returns property value at key/indice.\r\n     * @function module:object.lookup\r\n     * @type {module:object.prop}\r\n     */\r\n    lookup = at,\r\n\r\n    /**\r\n     * Checks if list `xs1` is a prefix of list `xs2`\r\n     * @function module:list.isPrefixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isPrefixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a suffix of list `xs2`\r\n     * @function module:list.isSuffixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSuffixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is an infix of list `xs2`\r\n     * @function module:list.isInfixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isInfixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a sub-sequence of list `xs2`\r\n     * @function module:list.isPrefixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSubsequenceOf = curry((xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:list.group\r\n     * @param xs {Array}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    group = xs => groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:list.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry((equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return copy(xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    }),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(inits('abc'), ['','a','ab','abc'])\r\n     * ```\r\n     * @function module:list.inits\r\n     * @haskellType `inits :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => init(list), xs),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\r\n     * ```\r\n     * @function module:list.tails\r\n     * @haskellType `tails :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => tail(list), xs),\r\n\r\n    /**\r\n     * Strips prefix list from given list\r\n     * @function module:list.stripPrefix\r\n     * @param prefix {Array|String|*}\r\n     * @param list {Array|string|*}\r\n     * @returns {Array|*}\r\n     */\r\n    stripPrefix = curry((prefix, list) =>\r\n        isPrefixOf(prefix, list) ?\r\n            splitAt(length(prefix), list)[1] :\r\n            copy(list)),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:list.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry((arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:list.zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    zipN = (...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, filter(length, lists)),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:list.zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip3 = curry((arr1, arr2, arr3) => zipN(arr1, arr2, arr3)),\r\n\r\n    /**\r\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:list.zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip4 = curry((arr1, arr2, arr3, arr4) => zipN(arr1, arr2, arr3, arr4)),\r\n\r\n    /**\r\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:list.zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @param arr5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip5 = curry((arr1, arr2, arr3, arr4, arr5) => zipN(arr1, arr2, arr3, arr4, arr5)),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:list.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry((op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:list.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = curry((op, ...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, apply(op, map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:list.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = curry((op, xs1, xs2, xs3) => zipWithN(op, xs1, xs2, xs3)),\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:list.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = curry((op, xs1, xs2, xs3, xs4) => zipWithN(op, xs1, xs2, xs3, xs4)),\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:list.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @param xs5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = curry((op, xs1, xs2, xs3, xs4, xs5) => zipWithN(op, xs1, xs2, xs3, xs4, xs5)),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:list.unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    unzip = arr =>\r\n        foldl((agg, item) => {\r\n            agg[0].push(item[0]);\r\n            agg[1].push(item[1]);\r\n            return agg;\r\n        }, [[], []], arr),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:list.unzip\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    /**\r\n     * Returns true if any item in container passes predicate `p`.\r\n     * @function module:list.any\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    any = curry((p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Returns true if all items in container pass predicate `p`.\r\n     * @function module:list.all\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    all = curry((p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (limit === 0) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Conjuction of container of bools (or truthy and/or falsy values);  Returns\r\n     * `true` if all in container are 'truthy' else returns `false`\r\n     * @function module:list.and\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    and = xs => all(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether any item in container is 'truthy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.or\r\n     * @haskellType `or :: Bool -> Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    or = xs => any(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether all items in container are 'falsy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.not\r\n     * @haskellType `not :: Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    not = xs => all(isFalsy, xs),\r\n\r\n    /**\r\n     * Computes the sum of the numbers of a structure.\r\n     * @function module:list.sum\r\n     * @haskellType `sum :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    sum = list => foldl((agg, x) => agg + x, 0, list),\r\n\r\n    /**\r\n     * Computes the product of the numbers of a structure.\r\n     * @function module:list.product\r\n     * @haskellType `product :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    product = list => foldl((agg, x) => agg * x, 1, list),\r\n\r\n    /**\r\n     * Returns the largest element in a non-empty structure of elements.\r\n     * @function module:list.maximum\r\n     * @haskellType `maximum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    maximum = list => last(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * Returns the smallest element in a non-empty structure of elements.\r\n     * @function module:list.minimum\r\n     * @haskellType `minimum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    minimum = list => head(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\r\n     * ```\r\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\r\n     * ```\r\n     * Also note that:\r\n     * ```\r\n     * last (scanl f z xs) == foldl f z xs.\r\n     * ```\r\n     * @function module:list.scanl\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            result = zero,\r\n            out = [];\r\n        while (ind < limit) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind++;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `scanl1` is a variant of `scanl` that has no starting value argument:\r\n     * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\r\n     * @function module:list.scanl1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) { return []; }\r\n        return scanl(fn, head(xs), tail(xs));\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanl` but from the right (similiar to `foldr`'s relationship to `foldl`).\r\n     * Note also `scanr`'s relationship ot `foldr`:\r\n     * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\r\n     * @function module:list.scanr\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = limit - 1,\r\n            result = xs[0],\r\n            out = [];\r\n        while (ind > -1) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind--;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanr` but takes no zero/accumulator value.\r\n     * @function module:list.scanr1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) { return []; }\r\n        return scanr(fn, last(xs), init(xs));\r\n    }),\r\n\r\n    /**\r\n     * The nub function removes duplicate elements from a list.\r\n     * In particular, it keeps only the first occurrence of each element.\r\n     * (The name nub means `essence'.) It is a special case of nubBy, which\r\n     * allows the programmer to supply their own equality test.\r\n     * ```shallowCompare( nub ([1,2,3,4,3,2,1,2,4,3,5]), [1,2,3,4,5] )```\r\n     * @function module:list.nub\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nub = list => nubBy((a, b) => a === b, list),\r\n\r\n    /**\r\n     * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\r\n     * For example, `remove('a', 'banana') === 'bnana';`\r\n     * @function module:list.remove\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    remove = curry((x, list) => removeBy((a, b) => a === b, x, list)),\r\n\r\n    /**\r\n     * The sort function implements a stable sorting algorithm.\r\n     * It is a special case of sortBy, which allows the programmer\r\n     * to supply their own comparison function.\r\n     * ```shallowCompare(sort ([1,6,4,3,2,5]), [1,2,3,4,5,6]) // true```\r\n     * @function module:list.sort\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sort = xs => sortBy(genericAscOrdering, xs),\r\n\r\n    /**\r\n     * Sort a list by comparing the results of a key function applied to each\r\n     * element. sortOn f is equivalent to sortBy (comparing f), but has the\r\n     * performance advantage of only evaluating f once for each element in the\r\n     * input list. This is called the decorate-sort-undecorate paradigm, or\r\n     * Schwartzian transform.\r\n     *\r\n     * Elements are arranged from from lowest to highest, keeping duplicates\r\n     * in the order they appeared in the input.\r\n     *\r\n     * Ex:\r\n     * ```\r\n     * shallowEquals(\r\n     *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\r\n     *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\r\n     * ) // true\r\n     * ```\r\n     * @function module:list.sortOn\r\n     * @param valueFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sortOn = curry((valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            sortBy(\r\n                // Ordering\r\n                ([a0], [b0]) => genericAscOrdering(a0, b0),\r\n\r\n                // Decorate\r\n                map(item => [valueFn(item), item], xs)\r\n            )\r\n        )\r\n    ),\r\n\r\n    /**\r\n     * The sortBy function is the non-overloaded (in haskell terms) version of sort.\r\n     * @haskellExample ```\r\n     *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\r\n     *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\r\n     * ```\r\n     * @function module:list.sortBy\r\n     * @param orderingFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sortBy = curry((orderingFn, xs) => copy(xs).sort(orderingFn || genericAscOrdering)),\r\n\r\n    /**\r\n     * The insert function takes an element and a list and inserts the element\r\n     * into the list at the first position where it is less than or equal to the\r\n     * next element. In particular, if the list is sorted before the call, the\r\n     * result will also be sorted. It is a special case of insertBy, which allows\r\n     * the programmer to supply their own comparison function.\r\n     * @function module:list.insert\r\n     * @param x {*}\r\n     * @param xs {Array|*}\r\n     * @returns {Array}\r\n     */\r\n    insert = curry((x, xs) => {\r\n        if (!length(xs)) {\r\n            return [x];\r\n        }\r\n        const foundIndex = findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? [x] :\r\n            concat(intersperse([x], splitAt(foundIndex, xs)));\r\n    }),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:list.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` === // something that is order-able\r\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array} - List to insert into (note new list is returned)\r\n     * @returns {Array} - New list.\r\n     */\r\n    insertBy = curry((orderingFn, x, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return [x];\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = splitAt(ind, xs);\r\n                return concat([parts[0], [x], parts[1]]);\r\n            }\r\n        }\r\n        return aggregateArr$(copy(xs), x);\r\n    }),\r\n\r\n    /**\r\n     * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\r\n     * @function module:list.nubBy\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nubBy = curry((pred, list) => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = [],\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out.push(currItem);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Behaves the same as `remove`, but takes a user-supplied equality predicate.\r\n     * @function module:list.removeBy\r\n     * @param pred {Function}\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeBy = curry((pred, x, list) => { // @todo optimize this implementation\r\n        const foundIndex = findIndex(item => pred(x, item), list),\r\n            parts = splitAt(foundIndex > -1 ? foundIndex : 0, list); // @todo correct this implementation\r\n        return append(parts[0], tail(parts[1]));\r\n    }),\r\n\r\n    /**\r\n     * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\r\n     * occurrence of each element of the second list removed.\r\n     * @param pred {Function}\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeFirstsBy = curry((pred, xs1, xs2) =>\r\n        foldl((agg, x2) => removeBy(pred, x2, agg), xs1, xs2)),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:list.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    unionBy = curry((pred, arr1, arr2) =>\r\n        foldl((agg, b) => {\r\n                const alreadyAdded = any(a => pred(a, b), agg);\r\n                return !alreadyAdded ? (agg.push(b), agg) : agg;\r\n            }, copy(arr1), arr2\r\n        )),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:list.union\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    union = curry((arr1, arr2) =>\r\n        append(arr1,\r\n            filter(elm => !includes(elm, arr1), arr2))),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:list.intersect\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    intersect = curry((arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            filter(elm => includes(elm, arr2), arr1)),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:list.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array}\r\n     * @param list2 {Array}\r\n     * @return {Array}\r\n     */\r\n    intersectBy = curry((pred, list1, list2) =>\r\n        foldl((agg, a) =>\r\n                any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg\r\n            , [], list1)),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:list.difference\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    difference = curry((array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return copy(array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? (agg.push(elm), agg) : agg\r\n            , [], array1);\r\n    }),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:list.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = curry((arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays));\r\n","import {assignDeep} from './assignDeep';\r\nimport {hasOwnProperty, keys} from '../jsPlatform/object';\r\nimport {foldl} from '../list';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    objUnion = curry((obj1, obj2) => assignDeep(obj1, obj2)),\r\n\r\n    objIntersect = curry((obj1, obj2) => foldl((agg, key) => {\r\n        if (hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objDifference = curry((obj1, obj2) => foldl((agg, key) => {\r\n        if (!hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objComplement = curry((obj0, ...objs) => foldl((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs));\r\n","export const\r\n\r\n    /**\r\n     * `Console.log` method.\r\n     * @function module:object.log\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    log = console.log.bind(console),\r\n\r\n    /**\r\n     * `Console.error` method.\r\n     * @function module:object.error\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    error = console.error.bind(console),\r\n\r\n    /**\r\n     * Peeks at incoming value(s) and returns the last value.\r\n     * @function module:object.peek\r\n     * @param args {...*}\r\n     * @returns {*} - Last given value (if one or more values) else first value.\r\n     */\r\n    peek = (...args) => (log(...args), args.pop())\r\n\r\n;\r\n","/**\r\n * @module object\r\n * @description Contains error throwing facilities for when a value doesn't match a type.\r\n *  In addition gives you curried and uncurried versions of the multi arity functions.\r\n */\r\nimport {typeOf} from './typeOf';\r\nimport {isset, isType, isString, isArray, isFunction} from './is';\r\nimport {curry, curry4} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Checks if `type` is a string or a function (constructor or constructor name)\r\n     * @function module:object.isCheckableType\r\n     * @param type {TypeRef}\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    isCheckableType = type => isString(type) || isFunction(type),\r\n\r\n    /**\r\n     * Throws an error if `type` is not a checkable type (can't be checked by the `TypeChecker` type)\r\n     * @function module:object.errorIfNotCheckableType\r\n     * @param contextName {String}\r\n     * @param type {TypeRef}\r\n     * @returns {TypeRef} - Type passed in if `type` is checkable\r\n     * @private\r\n     */\r\n    errorIfNotCheckableType = (contextName, type) => {\r\n        if (!isCheckableType(type)) {\r\n            throw new Error (`${contextName} expects \\`type\\` to be of type \\`String\\` or \\`Function\\`.` +\r\n                `  Type received \\`${typeOf(type)}\\`.  Value \\`${type}\\`.`);\r\n        }\r\n        return type;\r\n    },\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @function module:object.getTypeName\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    getTypeName = type => {\r\n        errorIfNotCheckableType('getTypeName', type);\r\n        return type.name || type;\r\n    },\r\n\r\n    /**\r\n     * Returns a boolean indicating whether given value matches given type.\r\n     * @function module:object.defaultTypeChecker$\r\n     * @param Type {String|Function} - Type name, constructor and/or class.\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    _defaultTypeChecker = (Type, value) => isType(getTypeName(Type), value) || (\r\n        isFunction(Type) && isset(value) && value instanceof Type),\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @function module:object.multiTypesToString\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    multiTypesToString = types => types.length ?\r\n             types.map(type => `\\`${getTypeName(type)}\\``).join(', ') : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:object.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n            contextName, valueName, value, expectedTypeName,\r\n            foundTypeName, messageSuffix\r\n        } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? multiTypesToString(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:object.getErrorIfNotTypeThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotType}\r\n     */\r\n    _getErrorIfNotTypeThrower = (errorMessageCall, typeChecker = _defaultTypeChecker) =>\r\n      (ValueType, contextName, valueName, value, messageSuffix = null) => {\r\n        const expectedTypeName = getTypeName(ValueType),\r\n            foundTypeName = typeOf(value);\r\n        if (typeChecker(ValueType, value)) { return value; } // Value matches type\r\n        throw new Error(errorMessageCall(\r\n            {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n        ));\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:object.getErrorIfNotTypesThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotTypes}\r\n     */\r\n    _getErrorIfNotTypesThrower = (errorMessageCall, typeChecker = _defaultTypeChecker) =>\r\n      (valueTypes, contextName, valueName, value) => {\r\n            const expectedTypeNames = valueTypes.map(getTypeName),\r\n                matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\r\n                foundTypeName = typeOf(value);\r\n            if (matchFound) { return value; }\r\n            throw new Error(\r\n                errorMessageCall({\r\n                    contextName, valueName, value,\r\n                    expectedTypeName: expectedTypeNames, foundTypeName\r\n                })\r\n            );\r\n        },\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  This is the un-curried version.  For the curried version\r\n     * see `module:object.errorIfNotType`.\r\n     * @function module:object.errorIfNotType$\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {undefined}\r\n     * @uncurried\r\n     */\r\n    _errorIfNotType = _getErrorIfNotTypeThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n     * see `module:object.errorIfNotTypes`.\r\n     * @type {Function|module:object.errorIfNotTypes}\r\n     * @function module:object.errorIfNotTypes$\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {undefined}\r\n     * @uncurried\r\n     */\r\n    _errorIfNotTypes = _getErrorIfNotTypesThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Same as `defaultTypeChecker$` except curried:\r\n     *  \"Returns a boolean indicating whether given value matches given type\".\r\n     * @curried\r\n     * @function module:object.defaultTypeChecker\r\n     * @param Type {String|Function} - Type name, constructor and/or class.\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    defaultTypeChecker = curry(_defaultTypeChecker),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  Curried.\r\n     * @function module:object.errorIfNotType\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {undefined}\r\n     * @curried\r\n     */\r\n    errorIfNotType = curry(_errorIfNotType),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  Curried.\r\n     * @function module:object.errorIfNotTypes\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {undefined}\r\n     * @curried\r\n     */\r\n    errorIfNotTypes = curry4(_errorIfNotTypes),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:object.getErrorIfNotTypeThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n     */\r\n    getErrorIfNotTypeThrower = errorMessageCall => curry(_getErrorIfNotTypeThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:object.getErrorIfNotTypesThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n     */\r\n    getErrorIfNotTypesThrower = errorMessageCall => curry4(_getErrorIfNotTypesThrower(errorMessageCall))\r\n;\r\n\r\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\r\n\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\r\n */\r\n\r\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {*}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\r\n\r\n/**\r\n * @typedef {Array<(String|Function)>} TypesArray\r\n */\r\n\r\n/**\r\n * @typedef {Function} TypeChecker\r\n * @description Checks whether a value is of given type.\r\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorMessageCall\r\n * @description Error message template function.\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotType\r\n * @description Used to ensure value matches passed in type.\r\n * @param type {TypeRef} - Constructor name or constructor.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - What ever value is.\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotTypes\r\n * @description Used to ensure a value matches one of one or more types passed in.\r\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - Whatever value is.\r\n */\r\n","export const\r\n\r\n    /**\r\n     * Clones and object or array using `JSON.parse(JSON.stringify(...))` pattern.\r\n     * @function module:object.jsonClone\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    jsonClone = x => JSON.parse(JSON.stringify(x))\r\n\r\n;\r\n","import {isArray, isType} from './is';\r\nimport {keys} from '../jsPlatform/object';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns an associated list from given object.\r\n     * @note Useful for working with plain javascript objects.\r\n     * @function module:object.toAssocList\r\n     * @param obj {(Object|Array|*)}\r\n     * @returns {Array.<*, *>}\r\n     */\r\n    toAssocList = obj => keys(obj).map(key => [key, obj[key]]),\r\n\r\n    /**\r\n     * Returns an associated list from given object (deeply (on incoming object's type)).\r\n     * @note Does deep conversion on all values of passed in type's type.\r\n     * @function module:object.toAssocListDeep\r\n     * @param obj {*}\r\n     * @param [TypeConstraint = Object] {(Constructor|Function)} - Type constraint to convert on.\r\n     * @returns {*}\r\n     */\r\n    toAssocListDeep = (obj, TypeConstraint = Object) => keys(obj).map(key =>\r\n        TypeConstraint && isType(TypeConstraint, obj[key]) ?\r\n            [key, toAssocListDeep(obj[key], TypeConstraint)] :\r\n            [key, obj[key]]\r\n    ),\r\n\r\n    /**\r\n     * From associated list to object.\r\n     * @function module:object.fromAssocList\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocList = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType()),\r\n\r\n    /**\r\n     * From associated list to object (deep conversion on associative lists (array of 2 value arrays)).\r\n     * @note Considers array of arrays associated lists.\r\n     * @function module:object.fromAssocListDeep\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocListDeep = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        if (isArray(value) && isArray(value[0]) && value[0].length === 2) {\r\n            agg[key] = fromAssocListDeep(value, OutType);\r\n            return agg;\r\n        }\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType())\r\n;\r\n","import {typeOf} from './typeOf';\r\nimport {toAssocList} from './assocList';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Converts incoming value to an array.\r\n     * @note For `WeakMap`, `WeakSet`, `Map` and `Set` result is the same as calling `Array.from` on such.\r\n     * @note For `null`, `undefined`, `NaN`, `Number{}`, `Symbol{}`, `Boolean{}` returns an empty array.\r\n     * @note Method does a shallow conversion;\r\n     * @function module:object.toArray\r\n     * @param x {*} - Thing to convert from.\r\n     * @returns {Array}\r\n     */\r\n    toArray = x => {\r\n        switch (typeOf(x)) {\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return [];\r\n            case String.name:\r\n            case Array.name:\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n            case 'Map':\r\n            case 'Set':\r\n                return Array.from(x);\r\n            case Object.name:\r\n            default:\r\n                return toAssocList(x);\r\n        }\r\n    }\r\n\r\n;\r\n","/**\r\n * @module object\r\n * @description Object operations/combinators.\r\n */\r\nexport * from './jsPlatform/object';\r\nexport * from './object/prop';\r\nexport * from './object/typeOf';\r\nexport * from './object/is';\r\nexport * from './object/of';\r\nexport * from './object/fromNamespace';\r\nexport * from './object/assignDeep';\r\nexport * from './object/setTheory';\r\nexport * from './object/console';\r\nexport * from './object/errorThrowing';\r\nexport * from './object/jsonClone';\r\nexport * from './object/toArray';\r\nexport * from './object/assocList';\r\n","import {reduceRight} from '../jsPlatform/array';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the function on the left of itself.\r\n * @function module:function.compose\r\n * @type {Function}\r\n * @param args {...{Function}}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) =>\r\n        arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","/**\r\n * @memberOf function\r\n * @description Curry implementation with place holder concept (`__`).\r\n */\r\n\r\nimport fnOrError from './fnOrError';\r\n\r\n/**\r\n * PlaceHolder (__) constructor.\r\n * @constructor PlaceHolder\r\n * @private\r\n */\r\nconst PlaceHolder = function PlaceHolder() {},\r\n\r\n    notFnErrPrefix = '`fn` in `curry_(fn, ...args)`',\r\n\r\n    /**\r\n     * Placeholder instance.\r\n     * @type {PlaceHolder}\r\n     * @private\r\n     */\r\n    placeHolderInstance = new PlaceHolder();\r\n\r\n/**\r\n * Checks to see if value is a `PlaceHolder`.\r\n * @param instance {*}\r\n * @returns {boolean}\r\n * @private\r\n */\r\nfunction isPlaceHolder (instance) {\r\n    return instance instanceof PlaceHolder;\r\n}\r\n\r\n/**\r\n * Replaces `placeholder` values in `list`.\r\n * @function replacePlaceHolder\r\n * @private\r\n * @param array {Array} - Array to replace placeholders in.\r\n * @param args {Array} - Args from to choose from to replace placeholders.\r\n * @returns {Array|*} - Returns passed in `list` with placeholders replaced by values in `args`.\r\n */\r\nfunction replacePlaceHolders (array, args) {\r\n    let out = array.map(element => {\r\n            if (!isPlaceHolder(element)) { return element; }\r\n            else if (args.length) { return args.shift(); }\r\n            return element;\r\n        });\r\n    return args.length ? out.concat(args) : out;\r\n}\r\n\r\n/**\r\n * Curries passed in function up to given arguments length (can enforce arity via placeholder values (`__`)).\r\n * @function module:function.curry_\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\r\nexport function curry_ (fn, ...argsToCurry) {\r\n    return curryN_(fnOrError(notFnErrPrefix, fn).length, fn, ...argsToCurry);\r\n}\r\n\r\n/**\r\n * Curries a function up to given arity also enforces arity via placeholder values (`__`).\r\n * @function module:function.curryN_\r\n * @param executeArity {Number}\r\n * @param fn {Function}\r\n * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\r\n * @returns {Function} - Passed in function wrapped in a function for currying.\r\n */\r\nexport function curryN_ (executeArity, fn, ...curriedArgs) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(curriedArgs, args),\r\n            placeHolders = concatedArgs.filter(isPlaceHolder),\r\n            canBeCalled = (concatedArgs.length - placeHolders.length >= executeArity) || !executeArity;\r\n        return !canBeCalled ?\r\n            curryN_.apply(null, [executeArity, fnOrError(notFnErrPrefix, fn)].concat(concatedArgs)) :\r\n            fnOrError(notFnErrPrefix, fn).apply(null, concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Place holder object (frozen) used by curry.\r\n * @memberOf function\r\n * @type {PlaceHolder}\r\n */\r\nexport let __ = Object.freeze ? Object.freeze(placeHolderInstance) : placeHolderInstance,\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (takes into account placeholders `__` (arity enforcers)) (won't call function until 2 or more args).\r\n     * @function module:function.curry2_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2_ = fn => curryN_(2, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (takes into account placeholders `__` (arity enforcers)) (won't call function until 3 or more args).\r\n     * @function module:function.curry3_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3_ = fn => curryN_(3, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (takes into account placeholders `__` (arity enforcers))  (won't call function until 4 or more args).\r\n     * @function module:function.curry4_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4_ = fn => curryN_(4, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5  (takes into account placeholders `__` (arity enforcers))  (won't call function until 5 or more args).\r\n     * @function module:function.curry5_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5_ = fn => curryN_(5, fn)\r\n\r\n;\r\n","import {reverse} from '../jsPlatform/array';\r\nimport {apply, call} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Flips a functions arguments order and returns a new function requiring such (arguments in reverse order).\r\n     * @function module:function.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flipN = fn => curry2((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Returns a function that receives 3 args in reverse (3, 2, 1 etc.).\r\n     * @function module:function.flip3\r\n     * @param fn {Function} - Function<a, b, c>\r\n     * @returns {Function} - Function<c, b, a>\r\n     */\r\n    flip3 = fn => curry((a, b, c) => call(fn, c, b, a)),\r\n\r\n    /**\r\n     * Returns a function that receives 4 args in reverse (4, 3, 2, 1 etc.).\r\n     * @function module:function.flip4\r\n     * @param fn {Function} - Function<a, b, c, d>\r\n     * @returns {Function} - Function<d, c, b, a>\r\n     */\r\n    flip4 = fn => curry((a, b, c, d) => call(fn, d, c, b, a)),\r\n\r\n    /**\r\n     * Returns a function that receives 5 args in reverse (5, 4, 3, 2, 1 etc.).\r\n     * @function module:function.flip5\r\n     * @param fn {Function} - Function<a, b, c, d, e>\r\n     * @returns {Function} - Function<e, d, c, b, a>\r\n     */\r\n    flip5 = fn => curry((a, b, c, d, e) => call(fn, e, d, c, b, a)),\r\n\r\n    /**\r\n     * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\r\n     * @function module:function.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b));\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:function.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","import {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true`.\r\n     * @function module:function.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = curry((predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    });\r\n","/**\r\n * @module function\r\n */\r\nexport * from './jsPlatform/function';\r\nexport * from './function/compose';\r\nexport * from './function/curry';\r\nexport * from './function/_curry';\r\nexport * from './function/flip';\r\nexport * from './function/id';\r\nexport * from './function/negate';\r\nexport * from './function/until';\r\n","/**\r\n * Contains functions for operating strings.\r\n * @author elyde\r\n * @created 7/9/2017.\r\n * @module string\r\n */\r\nimport {intercalate, map, filter} from './list';\r\nimport {split} from './jsPlatform/string';\r\nimport {compose} from './function/compose';\r\nimport {join} from './jsPlatform/array';\r\nimport {_errorIfNotType} from './object/errorThrowing';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:string.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a string on all '\\s' and/or all '\\t' characters.\r\n     * @function module:string.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:string.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:string.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n'),\r\n\r\n    /**\r\n     * Lower cases first character of a non-empty string.\r\n     * @function module:string.lcaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    lcaseFirst = xs => {\r\n        _errorIfNotType(String, 'lcaseFirst', 'xs', xs);\r\n        return xs[0].toLowerCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Upper cases first character of a non-empty string.\r\n     * @function module:string.ucaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    ucaseFirst = xs => {\r\n        _errorIfNotType(String, 'ucaseFirst', 'xs', xs);\r\n        return xs[0].toUpperCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Camel cases (class case) a string.\r\n     * @function module:string.camelCase\r\n     * @param xs {String}\r\n     * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Pattern to split on.  Optional.\r\n     * @throws {Error} - Throws error if param `xs` is not a string.\r\n     * @returns {string}\r\n     * @curried\r\n     */\r\n    camelCase = (xs, pattern = /[^a-z\\d]/i) => compose(\r\n            join(''),\r\n            map(str => ucaseFirst(str.toLowerCase())),\r\n            filter(x => !!x),\r\n            split(pattern)\r\n        )(_errorIfNotType(String, 'camelCase', 'xs', xs)),\r\n\r\n    /**\r\n     * Class cases a string.  Uses pattern /[^a-z\\d/i]/ to split on.\r\n     * If you require a different pattern use `string.camelCase(str, pattern)`\r\n     * and then upper case first character (`ucaseFirst`).\r\n     * @function module:string.classCase\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if `xs` is not a string (via `camelCase` call).\r\n     */\r\n    classCase = compose(ucaseFirst, camelCase)\r\n\r\n;\r\n","/**\r\n * @module fjl\r\n * @description Exports all module methods (object, list, string modules etc.).\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n */\r\nexport * from './object';\r\nexport * from './boolean';\r\nexport * from './function';\r\nexport * from './list';\r\nexport * from './string';\r\nexport * from './utils';\r\nexport * from './list/utils';\r\n"],"names":["_Number","Number","name","_NaN","_Null","_Undefined","typeOf","value","retVal","undefined","constructorName","constructor","isNaN","fnOrError","symbolName","f","Error","curryNotFnErrPrefix","curry","fn","argsToCurry","curryN","length","executeArity","curriedArgs","args","concatedArgs","concat","canBeCalled","apply","curry2","curry3","curry4","curry5","fPureTakesOne","arg","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","instanceConstructor","instance","hasOwnProperty","x","keys","Object","assign","obj0","objs","reduce","topAgg","obj","agg","key","_String","String","_Object","_Boolean","Boolean","_Function","Function","_Array","Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","instanceOf","isType","type","isFunction","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isUsableImmutablePrimitive","typeOfX","isset","some","Type","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","typeOfValue","prop","call","of","fromNamespace","nsString","indexOf","parts","split","limit","ind","parent","node","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","slice","includes","prototype","xs","lastIndexOf","negateF","a","b","negateF3","c","negateF4","d","negateF5","e","negateP","negateFN","isTruthy","isFalsy","alwaysTrue","alwaysFalse","map","out","push","aggregateStr","item","aggregateArr$","aggregateObj","aggregatorByType","sliceFrom","startInd","arr","sliceTo","toInd","copy","sliceCopy","genericAscOrdering","lengths","lists","lengthsToSmallest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceRightUntil","reduceRight","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","defineReverse","reverse","filter","forEach","every","join","append","listAppend","appendMany","head","last","tail","init","uncons","unconsr","concatMap","foldableOfA","foldr","intersperse","between","lastInd","foldl","intercalate","xss","transpose","numLists","ind2","longestListLen","maximum","outLists","outList","subsequences","listLen","pow","i","entry","j","swapped","ind1","tmp","permutations","repeat","foldl1","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","lastX","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","splitAt","takeWhile","dropWhile","splitPoint","list2","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","lookup","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","lenOfTrimmed","zip3","arr3","zip4","arr4","zip5","arr5","zipWith","zipWithN","zipWith3","xs3","zipWith4","xs4","zipWith5","xs5","unzip","unzipN","lenItem0","any","p","all","and","or","not","sum","product","sortBy","minimum","scanl","scanl1","scanr","scanr1","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","a0","b0","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","x2","unionBy","alreadyAdded","union","intersect","intersectBy","list1","difference","array1","array2","complement","arr0","arrays","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","log","console","bind","error","peek","pop","isCheckableType","errorIfNotCheckableType","contextName","getTypeName","_defaultTypeChecker","multiTypesToString","types","defaultErrorMessageCall","tmplContext","valueName","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","typesCopy","typesToMatchCopy","_getErrorIfNotTypeThrower","errorMessageCall","typeChecker","ValueType","_getErrorIfNotTypesThrower","valueTypes","expectedTypeNames","matchFound","_errorIfNotType","_errorIfNotTypes","defaultTypeChecker","errorIfNotType","errorIfNotTypes","getErrorIfNotTypeThrower","getErrorIfNotTypesThrower","jsonClone","JSON","parse","stringify","toAssocList","toAssocListDeep","TypeConstraint","fromAssocList","OutType","fromAssocListDeep","toArray","from","compose","arg0","PlaceHolder","notFnErrPrefix","placeHolderInstance","isPlaceHolder","replacePlaceHolders","array","element","shift","curry_","curryN_","placeHolders","__","freeze","curry2_","curry3_","curry4_","curry5_","flipN","flip3","flip4","flip5","flip","id","until","predicate","operation","typeInstance","lines","words","unwords","unlines","lcaseFirst","toLowerCase","substring","ucaseFirst","toUpperCase","camelCase","pattern","str","classCase"],"mappings":";;;AAAA;;;;AAIA,IAAMA,UAAUC,OAAOC,IAAvB;IACIC,OAAO,KADX;IAEIC,QAAQ,MAFZ;IAGIC,aAAa,WAHjB;;;;;;;;;;;;;;AAiBA,AAAO,SAASC,MAAT,CAAiBC,KAAjB,EAAwB;QACvBC,eAAJ;QACID,UAAUE,SAAd,EAAyB;iBACZJ,UAAT;KADJ,MAGK,IAAIE,UAAU,IAAd,EAAoB;iBACZH,KAAT;KADC,MAGA;YACGM,kBAAmBH,KAAD,CAAQI,WAAR,CAAoBT,IAA1C;iBACSQ,oBAAoBV,OAApB,IAA+BY,MAAML,KAAN,CAA/B,GACLJ,IADK,GACEO,eADX;;WAGGF,MAAP;;;AChCJ,IASIK,cAAY,SAAZA,SAAY,CAACC,UAAD,EAAaC,CAAb,EAAmB;QACvB,CAACA,CAAD,IAAM,OAAOA,CAAP,KAAa,UAAvB,EAAmC;cACzB,IAAIC,KAAJ,CAAaF,UAAH,oDACMR,OAAOS,CAAP,CADN,2BACqCA,CADrC,OAAV,CAAN;;WAGGA,CAAP;CAdR;;ACAA;;;;;;;AAOA,AAAO,IAMHE,sBAAsB,8BANnB;IAeHC,QAAQ,SAARA,KAAQ,CAACC,EAAD;sCAAQC,WAAR;mBAAA;;;WAAwBC,yBAAOR,YAAUI,mBAAV,EAA+BE,EAA/B,EAAmCG,MAA1C,EAAkDH,EAAlD,SAAyDC,WAAzD,EAAxB;CAfL;IAyBHC,SAAS,SAATA,MAAS,CAACE,YAAD,EAAeJ,EAAf,EAAsC;uCAAhBK,WAAgB;mBAAA;;;WACpC,YAAa;2CAATC,IAAS;gBAAA;;;YACZC,eAAeF,YAAYG,MAAZ,CAAmBF,IAAnB,CAAnB;YACIG,cAAeF,aAAaJ,MAAb,IAAuBC,YAAxB,IAAyC,CAACA,YAD5D;eAEO,CAACK,WAAD,GAAeP,OAAOQ,KAAP,CAAa,IAAb,EAAmB,CAACN,YAAD,EAAeV,YAAUI,mBAAV,EAA+BE,EAA/B,CAAf,EAAmDQ,MAAnD,CAA0DD,YAA1D,CAAnB,CAAf,GACHb,YAAUI,mBAAV,EAA+BE,EAA/B,EAAmCU,KAAnC,CAAyC,IAAzC,EAA+CH,YAA/C,CADJ;KAHJ;CA1BD;IAwCHI,SAAS,SAATA,MAAS;WAAMT,OAAO,CAAP,EAAUF,EAAV,CAAN;CAxCN;IAgDHY,SAAS,SAATA,MAAS;WAAMV,OAAO,CAAP,EAAUF,EAAV,CAAN;CAhDN;IAwDHa,SAAS,SAATA,MAAS;WAAMX,OAAO,CAAP,EAAUF,EAAV,CAAN;CAxDN;IAgEHc,SAAS,SAATA,MAAS;WAAMZ,OAAO,CAAP,EAAUF,EAAV,CAAN;CAhEN;;ACNA,IAEHe,gBAAgB,SAAhBA,aAAgB;WAAQhB,MAAM,UAACiB,GAAD,EAAMpB,CAAN;eAAYA,EAAEb,IAAF,EAAQiC,GAAR,CAAZ;KAAN,CAAR;CAFb;IAIHC,cAAc,SAAdA,WAAc;WAAQlB,MAAM,UAACmB,IAAD,EAAOC,IAAP,EAAavB,CAAb;eAAmBA,EAAEb,IAAF,EAAQmC,IAAR,EAAcC,IAAd,CAAnB;KAAN,CAAR;CAJX;IAMHC,cAAc,SAAdA,WAAc;WAAQrB,MAAM,UAACmB,IAAD,EAAOC,IAAP,EAAaE,IAAb,EAAmBzB,CAAnB;eAAyBA,EAAEb,IAAF,EAAQmC,IAAR,EAAcC,IAAd,EAAoBE,IAApB,CAAzB;KAAN,CAAR;CANX;IAQHC,cAAc,SAAdA,WAAc;WAAQvB,MAAM,UAACmB,IAAD,EAAOC,IAAP,EAAaE,IAAb,EAAmBE,IAAnB,EAAyB3B,CAAzB;eAA+BA,EAAEb,IAAF,EAAQmC,IAAR,EAAcC,IAAd,EAAoBE,IAApB,EAA0BE,IAA1B,CAA/B;KAAN,CAAR;CARX;IAUHC,cAAc,SAAdA,WAAc;WAAQzB,MAAM,UAACmB,IAAD,EAAOC,IAAP,EAAaE,IAAb,EAAmBE,IAAnB,EAAyBE,IAAzB,EAA+B7B,CAA/B;eAAqCA,EAAEb,IAAF,EAAQmC,IAAR,EAAcC,IAAd,EAAoBE,IAApB,EAA0BE,IAA1B,EAAgCE,IAAhC,CAArC;KAAN,CAAR;CAVX;IAYHC,sBAAsB,SAAtBA,mBAAsB;WAAQf,OAAO,UAACf,CAAD;0CAAOU,IAAP;gBAAA;;;eAAgBV,EAAEb,IAAF,WAAWuB,IAAX,CAAhB;KAAP,CAAR;CAZnB;IAcHZ,YAAY,SAAZA,SAAY,CAACC,UAAD,EAAaC,CAAb,EAAmB;QACvB,CAACA,CAAD,IAAM,OAAOA,CAAP,KAAa,UAAvB,EAAmC;cACzB,IAAIC,KAAJ,CAAcF,UAAH,oDACKR,OAAOS,CAAP,CADL,2BACoCA,CADpC,OAAX,CAAN;;WAGGA,CAAP;CAnBD;;ACHP;;;;;;;;AAQA,AAKI;;;;;;;;AAQA,iBAAaG,MAAM,UAAC4B,mBAAD,EAAsBC,QAAtB;WACfA,oBAAoBD,mBADL;CAAN,CAAb;IASAE,cATA,GASiBd,cAAc,gBAAd,CATjB;IAkBAZ,MAlBA,GAkBS,SAATA,MAAS;WAAK2B,EAAE3B,MAAP;CAlBT;IA0BC4B,IA1BD,GA0BSC,MA1BT,CA0BCD,IA1BD;IAmCAE,MAnCA,GAmCU;WAAMD,OAAOC,MAAP,GACR,UAACC,IAAD;0CAAUC,IAAV;gBAAA;;;eAAmBH,OAAOC,MAAP,gBAAcC,IAAd,SAAuBC,IAAvB,EAAnB;KADQ,GAER,UAACD,IAAD;2CAAUC,IAAV;gBAAA;;;eAAmBA,KAAKC,MAAL,CAAY,UAACC,MAAD,EAASC,GAAT,EAAiB;mBACrCP,KAAKO,GAAL,EAAUF,MAAV,CAAiB,UAACG,GAAD,EAAMC,GAAN,EAAc;oBAC9BA,GAAJ,IAAWF,IAAIE,GAAJ,CAAX;uBACOD,GAAP;aAFG,EAGJF,MAHI,CAAP;SADe,EAKhBH,IALgB,CAAnB;KAFE;CAAD,EAnCT;;ACrBJ;;;;;AAKA,AAIA,IAAIO,UAAUC,OAAO3D,IAArB;IACIF,YAAUC,OAAOC,IADrB;IAEI4D,UAAUX,OAAOjD,IAFrB;IAGI6D,WAAWC,QAAQ9D,IAHvB;IAII+D,YAAYC,SAAShE,IAJzB;IAKIiE,SAASC,MAAMlE,IALnB;IAMImE,UAAU,QANd;IAOIC,OAAO,KAPX;IAQIC,OAAO,KARX;IASIC,WAAW,SATf;IAUIC,WAAW,SAVf;IAWIrE,UAAQ,MAXZ;IAYIC,eAAa,WAZjB;;;;;;;;AAsBI,iBAAaqE,WAAWR,QAAX,CAAb;IAeAS,MAfA,GAeSzD,MAAM,UAAC0D,IAAD,EAAOnB,GAAP;WAAenD,OAAOmD,GAAP,OAAiBoB,WAAWD,IAAX,IAAmBA,KAAK1E,IAAxB,GAA+B0E,IAAhD,CAAf;CAAN,CAfT;IAuBAE,OAvBA,GAuBU,SAAVA,OAAU;WAAK7B,KAAK,uBAAuB8B,IAAvB,CAA4B,CAAC9B,IAAI,EAAL,EAAS+B,MAAT,CAAgB,CAAhB,EAAmB,EAAnB,CAA5B,CAAV;CAvBV;IAgCAC,UAhCA,GAgCa,SAAbA,UAAa;WAAKJ,WAAW5B,CAAX,KAAiB,CAAC6B,QAAQ7B,CAAR,CAAvB;CAhCb;IAwCCiC,OAxCD,GAwCYd,KAxCZ,CAwCCc,OAxCD;IAgDAC,QAhDA,GAgDWR,OAAOb,OAAP,CAhDX;IAwDAsB,SAxDA,GAwDYT,OAAOZ,QAAP,CAxDZ;IAgEAsB,QAhEA,GAgEWV,OAAO3E,SAAP,CAhEX;IAwEAsF,QAxEA,GAwEWX,OAAOf,OAAP,CAxEX;IAgFA2B,KAhFA,GAgFQZ,OAAOL,IAAP,CAhFR;IAwFAkB,KAxFA,GAwFQb,OAAOJ,IAAP,CAxFR;IAgGAkB,SAhGA,GAgGWd,OAAOH,QAAP,CAhGX;IAwGAkB,SAxGA,GAwGYf,OAAOF,QAAP,CAxGZ;IAgHAkB,WAhHA,GAgHchB,OAAOtE,YAAP,CAhHd;IAwHAuF,MAxHA,GAwHSjB,OAAOvE,OAAP,CAxHT;IAgIAyF,QAhIA,GAgIWlB,OAAON,OAAP,CAhIX;IA0IAyB,0BA1IA,GA0I6B,SAA7BA,0BAA6B,IAAK;QACxBC,UAAUzF,OAAO2C,CAAP,CAAhB;WACO+C,MAAM/C,CAAN,KACH,CAACW,OAAD,EAAU5D,SAAV,EAAmB+D,QAAnB,EAA6BM,OAA7B,EACK4B,IADL,CACU;eAAQC,SAASH,OAAjB;KADV,CADJ;CA5IJ;IAuJAI,WAvJA,GAuJc,SAAdA,WAAc;WAAK,CAAC7E,OAAO2B,CAAP,CAAN;CAvJd;IA+JAmD,aA/JA,GA+JgB,SAAhBA,aAAgB;WAAOD,YAAYjD,KAAKO,GAAL,CAAZ,CAAP;CA/JhB;IAuKA4C,iBAvKA,GAuKoB,SAApBA,iBAAoB;WAAKpD,EAAEqD,IAAF,KAAW,CAAhB;CAvKpB;IAiLAC,OAjLA,GAiLU,SAAVA,OAAU,QAAS;QACX/F,eAAJ;QACI,CAACD,KAAL,EAAY;;iBACC,IAAT;;QAEEiG,cAAclG,OAAOC,KAAP,CAApB;QACIiG,gBAAgBrC,MAAhB,IAA0BqC,gBAAgBvC,SAA9C,EAAyD;iBAC5CkC,YAAY5F,KAAZ,CAAT;KADJ,MAGK,IAAIiG,gBAAgBxG,SAApB,EAA6B;iBACrB,KAAT;KADC,MAGA,IAAIwG,gBAAgB1C,OAApB,EAA6B;iBACrBsC,cAAc7F,KAAd,CAAT;KADC,MAGA,IAAIyC,eAAe,MAAf,EAAuBzC,KAAvB,KAAiC8E,SAAS9E,MAAM+F,IAAf,CAArC,EAA2D;iBACnDD,kBAAkB9F,KAAlB,CAAT;KADC,MAGA;iBACQ,CAACA,KAAV;;WAEGC,MAAP;CAtMJ;IA+MAwF,KA/MA,GA+MQ,SAARA,KAAQ;WAAK/C,MAAM,IAAN,IAAcA,MAAMxC,SAAzB;CA/MR;;AC/BJ;;;;AAIA,AAGA;;;;;;;;AAQA,AAAO,IAAMgG,OAAOvF,MAAM,UAAChB,IAAD,EAAOuD,GAAP;SAAeuC,MAAMvC,GAAN,IAAaA,IAAIvD,IAAJ,CAAb,GAAyBO,SAAxC;CAAN,CAAb;;ACbP;;;;;AAKA,AAAO,IASHoB,QAAQX,MAAM,UAACC,EAAD,EAAKM,IAAL;SAAcN,GAAGU,KAAH,CAAS,IAAT,EAAeJ,IAAf,CAAd;CAAN,CATL;IAkBHiF,OAAO5E,OAAO,UAACX,EAAD;oCAAQM,IAAR;QAAA;;;SAAiBI,MAAMV,EAAN,EAAUM,IAAV,CAAjB;CAAP,CAlBJ;;ACHP;;;;;;;;;;;;;;AAcA,AAAO,IAAMkF,KAAK,SAALA,EAAK,CAAC1D,CAAD,EAAgB;sCAATxB,IAAS;YAAA;;;QAC1B,CAACuE,MAAM/C,CAAN,CAAL,EAAe;eAASxC,SAAP;;QACXE,cAAcsC,EAAEtC,WAAtB;QACIqC,eAAe,IAAf,EAAqBrC,WAArB,CAAJ,EAAuC;eAC5BkB,MAAMlB,YAAYgG,EAAlB,EAAsBlF,IAAtB,CAAP;KADJ,MAGK,IAAIqE,2BAA2B7C,CAA3B,CAAJ,EAAmC;eAC7BpB,MAAMlB,WAAN,EAAmBc,IAAnB,CAAP;KADC,MAGA,IAAIoD,WAAWlE,WAAX,CAAJ,EAA6B;kDACnBA,WAAX,gBAA0Bc,IAA1B;;WAEGhB,SAAP;CAZG;;ACfA,IAYHmG,gBAAgB1F,MAAM,UAAC2F,QAAD,EAAWpD,GAAX,EAAmB;QACjC,CAACA,GAAL,EAAU;eAASA,GAAP;;QACRoD,SAASC,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;eACvBrD,IAAIoD,QAAJ,CAAP;;QAEEE,QAAQF,SAASG,KAAT,CAAe,GAAf,CAAd;QACIC,QAAQF,MAAMzF,MADlB;QAEI4F,MAAM,CAAV;QACIC,SAAS1D,GADb;WAEOyD,MAAMD,KAAb,EAAoBC,OAAO,CAA3B,EAA8B;YACpBE,OAAOD,OAAOJ,MAAMG,GAAN,CAAP,CAAb;YACI,CAAClB,MAAMoB,IAAN,CAAL,EAAkB;mBACPA,IAAP;;iBAEKA,IAAT;;WAEGD,MAAP;CAhBY,CAZb;;ACEA,IAQHE,aAAavF,OAAO,UAACuB,IAAD;sCAAUC,IAAV;YAAA;;;WAChBA,KAAKC,MAAL,CAAY,UAACC,MAAD,EAASC,GAAT;eACR,CAACA,GAAD,GAAOD,MAAP,GAAgBN,KAAKO,GAAL,EAAUF,MAAV,CAAiB,UAACG,GAAD,EAAMC,GAAN,EAAc;gBACvC2D,kBAAkBnE,OAAOoE,wBAAP,CAAgC7D,GAAhC,EAAqCC,GAArC,CAAtB;;gBAEIX,eAAeW,GAAf,EAAoBD,GAApB,KAA4B4D,eAA5B,IACA,EAAEA,gBAAgBE,GAAhB,IAAuBF,gBAAgBG,GAAzC,CADA,IAEA,CAACH,gBAAgBI,QAFrB,EAE+B;uBACpBhE,GAAP;;gBAEAyB,SAASzB,IAAIC,GAAJ,CAAT,KAAsBwB,SAAS1B,IAAIE,GAAJ,CAAT,CAA1B,EAA8C;2BAC/BD,IAAIC,GAAJ,CAAX,EAAqBF,IAAIE,GAAJ,CAArB;aADJ,MAGK;oBAAMA,GAAJ,IAAWF,IAAIE,GAAJ,CAAX;;mBACAD,GAAP;SAZY,EAabF,MAba,CADR;KAAZ,EAeEH,IAfF,CADgB;CAAP,CARV;;ACLP;;;;;AAKA,AAEO,IAWH1B,WAASkB,oBAAoB,QAApB,CAXN;IAoBH8E,QAAQvF,YAAY,OAAZ,CApBL;IA6BHwF,WAAY;SAAM,cAAcxD,MAAMyD,SAApB,GACV3F,cAAc,UAAd,CADU,GAEV,UAAC3B,KAAD,EAAQuH,EAAR;WAAeA,GAAGhB,OAAH,CAAWvG,KAAX,IAAoB,CAAC,CAApC;GAFI;CAAD,EA7BR;IAwCHuG,UAAU5E,cAAc,SAAd,CAxCP;IAiDH6F,cAAc7F,cAAc,aAAd,CAjDX;;ACPP;;;;AAIA,AAGO,IASH8F,UAAU,SAAVA,OAAU;SAAM9G,MAAM,UAAC+G,CAAD,EAAIC,CAAJ;WAAU,CAAC/G,GAAG8G,CAAH,EAAMC,CAAN,CAAX;GAAN,CAAN;CATP;IAkBHC,WAAW,SAAXA,QAAW;SAAMjH,MAAM,UAAC+G,CAAD,EAAIC,CAAJ,EAAOE,CAAP;WAAa,CAACjH,GAAG8G,CAAH,EAAMC,CAAN,EAASE,CAAT,CAAd;GAAN,CAAN;CAlBR;IA2BHC,WAAW,SAAXA,QAAW;SAAMnH,MAAM,UAAC+G,CAAD,EAAIC,CAAJ,EAAOE,CAAP,EAAUE,CAAV;WAAgB,CAACnH,GAAG8G,CAAH,EAAMC,CAAN,EAASE,CAAT,EAAYE,CAAZ,CAAjB;GAAN,CAAN;CA3BR;IAoCHC,WAAW,SAAXA,QAAW;SAAMrH,MAAM,UAAC+G,CAAD,EAAIC,CAAJ,EAAOE,CAAP,EAAUE,CAAV,EAAaE,CAAb;WAAmB,CAACrH,GAAG8G,CAAH,EAAMC,CAAN,EAASE,CAAT,EAAYE,CAAZ,EAAeE,CAAf,CAApB;GAAN,CAAN;CApCR;IA4CHC,UAAUN,QA5CP;IAqDHO,cAAc,SAAdA,WAAc;SAAM;sCAAIjH,IAAJ;UAAA;;;WAAa,CAACI,MAAMV,EAAN,EAAUM,IAAV,CAAd;GAAN;CArDX;;ACPP;;;;;AAKA,AAAO,IAQHkH,WAAW,SAAXA,QAAW;SAAS,CAAC,CAACpI,KAAX;CARR;IAgBHqI,UAAU,SAAVA,OAAU;SAAS,CAACrI,KAAV;CAhBP;IAuBHsI,aAAa,SAAbA,UAAa;SAAM,IAAN;CAvBV;IA8BHC,cAAc,SAAdA,WAAc;SAAM,KAAN;CA9BX;;ACFP;;;;;;AAMA,IAAMC,MAAM7H,MAAM,UAACC,EAAD,EAAK2G,EAAL,EAAa;QACvBZ,MAAM,CAAV;QACID,QAAQ3F,OAAOwG,EAAP,CADZ;QAEIkB,MAAM,EAFV;QAGI,CAAC/B,KAAL,EAAY;eAAS+B,GAAP;;WACP9B,MAAMD,KAAb,EAAoB;YACZgC,IAAJ,CAAS9H,GAAG2G,GAAGZ,GAAH,CAAH,EAAYA,GAAZ,EAAiBY,EAAjB,CAAT;eACO,CAAP;;WAEGkB,GAAP;CATQ,CAAZ;;ACPO,IAEHE,eAAe,SAAfA,YAAe,CAACxF,GAAD,EAAMyF,IAAN;WAAezF,MAAMyF,IAArB;CAFZ;IAIHC,eAAe,SAAfA,YAAe,CAAC1F,GAAD,EAAMyF,IAAN,EAAe;QACtBF,IAAJ,CAASE,IAAT;WACOzF,GAAP;CAND;IASH2F,eAAe,SAAfA,YAAe,CAAC3F,GAAD,EAAMyF,IAAN,EAAYjC,GAAZ,EAAoB;QAC3BA,GAAJ,IAAWiC,IAAX;WACOzF,GAAP;CAXD;IAcH4F,mBAAmB,SAAnBA,gBAAmB,IAAK;YACZhJ,OAAO2C,CAAP,CAAR;aACS,QAAL;mBAAsBiG,YAAP;aACV,OAAL;mBAAqBE,YAAP;aACT,QAAL;;mBACgBC,YAAP;;CAnBd;;ACFP;;;;;AAKA,AASO,IASHE,YAAYrI,MAAM,UAACsI,QAAD,EAAWC,GAAX;WAAmB9B,MAAM6B,QAAN,EAAgB/I,SAAhB,EAA2BgJ,GAA3B,CAAnB;CAAN,CATT;IAkBHC,UAAUxI,MAAM,UAACyI,KAAD,EAAQ7B,EAAR;WAAeH,MAAM,CAAN,EAASgC,KAAT,EAAgB7B,EAAhB,CAAf;CAAN,CAlBP;IA0BH8B,OAAOL,UAAU,CAAV,CA1BJ;IAkCHM,YAAYD,IAlCT;IA2CHE,qBAAqB5I,MAAM,UAAC+G,CAAD,EAAIC,CAAJ,EAAU;QAC7BD,IAAIC,CAAR,EAAW;eAAS,CAAP;KAAb,MACK,IAAID,IAAIC,CAAR,EAAW;eAAS,CAAC,CAAR;;WACX,CAAP;CAHiB,CA3ClB;IAuDH6B,UAAU,SAAVA,OAAU;sCAAIC,KAAJ;aAAA;;;WAAc1I,OAAO0I,KAAP,IAAgBjB,IAAIzH,MAAJ,EAAY0I,KAAZ,CAAhB,GAAqC,EAAnD;CAvDP;IA8DHC,oBAAoB,SAApBA,iBAAoB,GAAc;uCAAVD,KAAU;aAAA;;;QACxBE,cAAcrI,MAAMkI,OAAN,EAAeC,KAAf,CAApB;QACIG,WAAWC,KAAKC,GAAL,CAASxI,KAAT,CAAeuI,IAAf,EAAqBF,WAArB,CADf;WAEOnB,IAAI,UAACuB,IAAD,EAAOpD,GAAP;eAAegD,YAAYhD,GAAZ,IAAmBiD,QAAnB,GACtBT,QAAQS,QAAR,EAAkBG,IAAlB,CADsB,GACIV,KAAKU,IAAL,CADnB;KAAJ,EACmCN,KADnC,CAAP;CAjED;IA6EHO,cAAcrJ,MAAM,UAACsJ,IAAD,EAAOC,EAAP,EAAW/G,GAAX,EAAgB+F,GAAhB,EAAwB;QAClCxC,QAAQ3F,OAAOmI,GAAP,CAAd;QACI,CAACxC,KAAL,EAAY;eAASvD,GAAP;;QACVwD,MAAM,CAAV;QACIwD,SAAShH,GADb;WAEOwD,MAAMD,KAAb,EAAoBC,KAApB,EAA2B;YACnBsD,KAAKf,IAAIvC,GAAJ,CAAL,EAAeA,GAAf,EAAoBuC,GAApB,CAAJ,EAA8B;;;iBACrBgB,GAAGC,MAAH,EAAWjB,IAAIvC,GAAJ,CAAX,EAAqBA,GAArB,EAA0BuC,GAA1B,CAAT;;WAEGiB,MAAP;CATU,CA7EX;IAiGHC,mBAAmBzJ,MAAM,UAACsJ,IAAD,EAAOC,EAAP,EAAW/G,GAAX,EAAgB+F,GAAhB,EAAwB;QACvCxC,QAAQ3F,OAAOmI,GAAP,CAAd;QACI,CAACxC,KAAL,EAAY;eAASvD,GAAP;;QACVwD,MAAMD,QAAQ,CAAlB;QACIyD,SAAShH,GADb;WAEOwD,OAAO,CAAd,EAAiBA,KAAjB,EAAwB;YAChBsD,KAAKf,IAAIvC,GAAJ,CAAL,EAAeA,GAAf,EAAoBuC,GAApB,CAAJ,EAA8B;;;iBACrBgB,GAAGC,MAAH,EAAWjB,IAAIvC,GAAJ,CAAX,EAAqBA,GAArB,EAA0BuC,GAA1B,CAAT;;WAEGiB,MAAP;CATe,CAjGhB;IA6GHnH,SAASgH,YAAYzB,WAAZ,CA7GN;IA+GH8B,cAAcD,iBAAiB7B,WAAjB,CA/GX;IAuHH+B,YAAY,SAAZA,SAAY,IAAK;QAAQC,MAAMxJ,OAAO2B,CAAP,CAAZ,CAAuB,OAAO6H,MAAMA,MAAM,CAAZ,GAAgB,CAAvB;CAvHvC;IAgIHC,iBAAiB7J,MAAM,UAACsJ,IAAD,EAAOf,GAAP,EAAe;QAC9BvC,MAAM,CAAC,CAAX;QACI8D,qBAAqB,KADzB;QAEM/D,QAAQ3F,OAAOmI,GAAP,CAAd;WACOvC,MAAMD,KAAN,IAAe,CAAC+D,kBAAvB,EAA2C;6BAClBR,KAAKf,IAAI,EAAEvC,GAAN,CAAL,EAAiBA,GAAjB,EAAsBuC,GAAtB,CAArB;;WAEGvC,GAAP;CAPa,CAhId;IAiJH+D,sBAAsB/J,MAAM,UAACsJ,IAAD,EAAOf,GAAP,EAAe;QACjCxC,QAAQ3F,OAAOmI,GAAP,CAAd;QACIvC,MAAMD,KAAV;QACI+D,qBAAqB,KADzB;WAEO9D,OAAO,CAAP,IAAY,CAAC8D,kBAApB,EAAwC,EAAE9D,GAA1C,EAA+C;6BACtBsD,KAAKf,IAAIvC,GAAJ,CAAL,EAAeA,GAAf,EAAoBuC,GAApB,CAArB;;WAEGvC,GAAP;CAPkB,CAjJnB;IAgKHgE,mBAAmBhK,MAAM,UAACsJ,IAAD,EAAO1C,EAAP,EAAc;QAC/B,CAACA,EAAD,IAAO,CAACA,GAAGxG,MAAf,EAAuB;eAASb,SAAP;;QACnBwG,QAAQ3F,OAAOwG,EAAP,CAAd;QACIZ,MAAM,CAAV;QACI8B,MAAM,EADV;WAEO9B,MAAMD,KAAb,EAAoBC,KAApB,EAA2B;YACnBsD,KAAK1C,GAAGZ,GAAH,CAAL,EAAcA,GAAd,EAAmBY,EAAnB,CAAJ,EAA4B;gBAAMmB,IAAJ,CAAS/B,GAAT;;;WAE3B8B,IAAI1H,MAAJ,GAAa0H,GAAb,GAAmBvI,SAA1B;CARe,CAhKhB;IAiLH0K,YAAYjK,MAAM,UAACsJ,IAAD,EAAO1C,EAAP,EAAc;QACxBZ,MAAM,CAAV;QACID,QAAQ3F,OAAOwG,EAAP,CADZ;QAEI,CAACb,KAAL,EAAY;;;WACLC,MAAMD,KAAb,EAAoBC,KAApB,EAA2B;YACnBkE,MAAMtD,GAAGZ,GAAH,CAAV;YACIsD,KAAKY,GAAL,EAAUlE,GAAV,EAAeY,EAAf,CAAJ,EAAwB;mBAASsD,GAAP;;;CANtB,CAjLT;;ACdP;;;;;;;;AAQA,AAEO,IAOHC,gBAAgB,SAAhBA,aAAgB;SACZjH,MAAMyD,SAAN,CAAgByD,OAAhB,GAA0B;WAAKrI,EAAEqI,OAAF,EAAL;GAA1B,GACI;WAAKrI,EAAE2H,WAAF,CAAc,UAAClH,GAAD,EAAMyF,IAAN,EAAe;UAC1BF,IAAJ,CAASE,IAAT;aACOzF,GAAP;KAFC,EAGF,EAHE,CAAL;GAFQ;CAPb;IAqBHqF,QAAM7G,cAAc,KAAd,CArBH;IA8BHqJ,WAASrJ,cAAc,QAAd,CA9BN;IAuCHqB,WAASnB,YAAY,QAAZ,CAvCN;IAgDHwI,gBAAcxI,YAAY,aAAZ,CAhDX;IAyDHoJ,UAAUtJ,cAAc,SAAd,CAzDP;IAmEH+D,OAAO/D,cAAc,MAAd,CAnEJ;IA4EHuJ,QAAQvJ,cAAc,OAAd,CA5EL;IAqFHwJ,OAAOxJ,cAAc,MAAd,CArFJ;IA6FH+G,OAAOpG,oBAAoB,MAApB,CA7FJ;IAoGHyI,YAAUD,eApGP;;ACVP;;;;AAIA,AAEA;;;;;;;AAOA,AAAO,IAAMrE,QAAQ9E,cAAc,OAAd,CAAd;;ACbP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;AAKA,AAqBO,IAeHyJ,SAASC,QAfN;IA0BHC,aAAa/J,OAAO,YAAa;sCAATL,IAAS;YAAA;;;QACzBH,OAAOG,IAAP,CAAJ,EAAkB;eAASI,MAAM+J,QAAN,EAAkBnK,IAAlB,CAAP;;UACd,IAAIT,KAAJ,CAAU,yCAAV,CAAN;CAFS,CA1BV;IAsCH8K,OAAO,SAAPA,IAAO;WAAK7I,EAAE,CAAF,CAAL;CAtCJ;IA+CH8I,OAAO,SAAPA,IAAO;WAAMjE,GAAG+C,UAAU/C,EAAV,CAAH,CAAN;CA/CJ;IAwDHkE,OAAO,SAAPA,IAAO;WAAMzC,UAAU,CAAV,EAAazB,EAAb,CAAN;CAxDJ;IAiEHmE,OAAO,SAAPA,IAAO;WAAMvC,QAAQmB,UAAU/C,EAAV,CAAR,EAAuBA,EAAvB,CAAN;CAjEJ;IA0EHoE,SAAS,SAATA,MAAS;WACL,CAACpE,EAAD,IAAOxG,OAAOwG,EAAP,MAAe,CAAtB,GAA0BrH,SAA1B,GAAsC,CAACqL,KAAKhE,EAAL,CAAD,EAAWkE,KAAKlE,EAAL,CAAX,CADjC;CA1EN;IAoFHqE,UAAU,SAAVA,OAAU;WAAM,CAACrE,EAAD,IAAOxG,OAAOwG,EAAP,MAAe,CAAtB,GAA0BrH,SAA1B,GAAsC,CAACwL,KAAKnE,EAAL,CAAD,EAAWiE,KAAKjE,EAAL,CAAX,CAA5C;CApFP;IA6FHnG,YAAS,SAATA,SAAS;WAAM,CAACL,OAAOwG,EAAP,CAAD,GAAc8B,KAAK9B,EAAL,CAAd,GAAyBjG,MAAMgK,UAAN,EAAkB/D,EAAlB,CAA/B;CA7FN;IAuGHsE,YAAYlL,MAAM,UAACC,EAAD,EAAKkL,WAAL;WAAqB1K,UAAOoH,IAAI5H,EAAJ,EAAQkL,WAAR,CAAP,CAArB;CAAN,CAvGT;IAgHHf,UAAU,SAAVA,OAAU;WAAKgB,MAAM,UAAC5I,GAAD,EAAMyF,IAAN;eAAgBzF,IAAIuF,IAAJ,CAASE,IAAT,GAAgBzF,GAAhC;KAAN,EAA4C,EAA5C,EAAgDT,CAAhD,CAAL;CAhHP;IA2HHsJ,cAAcrL,MAAM,UAACsL,OAAD,EAAU/C,GAAV,EAAkB;QAC5BxC,QAAQ3F,OAAOmI,GAAP,CAAd;QACIgD,UAAUxF,QAAQ,CADtB;QAEI+B,MAAM,EAFV;QAGI,CAAC/B,KAAL,EAAY;eACD+B,GAAP;;WAEG0D,MAAM,UAAChJ,GAAD,EAAMyF,IAAN,EAAYjC,GAAZ;eACLA,QAAQuF,OAAR,GACI/I,IAAIuF,IAAJ,CAASE,IAAT,CADJ,GAEIzF,IAAIuF,IAAJ,CAASE,IAAT,EAAeqD,OAAf,CAFJ,EAGA9I,GAJK;KAAN,EAKAsF,GALA,EAKKS,GALL,CAAP;CAPU,CA3HX;IAkJHkD,cAAczL,MAAM,UAAC4G,EAAD,EAAK8E,GAAL;WAAajL,UAAO4K,YAAYzE,EAAZ,EAAgB8E,GAAhB,CAAP,CAAb;CAAN,CAlJX;IAqKHC,YAAY,SAAZA,SAAY,MAAO;QACXC,WAAWxL,OAAOsL,GAAP,CAAf;QACI1F,MAAM,CADV;QACa6F,aADb;QAEI,CAACD,QAAL,EAAe;eACJ,EAAP;;QAEE5C,cAAcrI,MAAMkI,OAAN,EAAe6C,GAAf,CAApB;QACII,iBAAiBC,QAAQ/C,WAAR,CADrB;QAEIgD,WAAW,EAFf;WAGOhG,MAAM8F,cAAb,EAA6B9F,OAAO,CAApC,EAAuC;YAC7BiG,UAAU,EAAhB;aACKJ,OAAO,CAAZ,EAAeA,OAAOD,QAAtB,EAAgCC,QAAQ,CAAxC,EAA2C;gBACnC7C,YAAY6C,IAAZ,IAAoB7F,MAAM,CAA9B,EAAiC;;;oBAGzB+B,IAAR,CAAa2D,IAAIG,IAAJ,EAAU7F,GAAV,CAAb;;iBAEK+B,IAAT,CAAckE,OAAd;;WAEG5B,OAAO;eAAKjK,OAAO2B,CAAP,CAAL;KAAP,EAAuBiK,QAAvB,CAAP;CAxLD;IAuMHE,eAAe,SAAfA,YAAe,KAAM;QACXC,UAAU/L,OAAOwG,EAAP,CAAhB;QACIgD,MAAMV,KAAKkD,GAAL,CAAS,CAAT,EAAYD,OAAZ,CADV;QAEIrE,MAAM,EAFV;SAGK,IAAIuE,IAAI,CAAb,EAAgBA,IAAIzC,GAApB,EAAyByC,KAAK,CAA9B,EAAiC;YACzBC,QAAQ,EAAZ;aACK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,OAApB,EAA6BI,KAAK,CAAlC,EAAqC;gBAC7BF,IAAK,KAAKE,CAAd,EAAkB;sBACRxE,IAAN,CAAWnB,GAAG2F,CAAH,CAAX;;;YAGJxE,IAAJ,CAASuE,KAAT;;WAEGxE,GAAP;CApND;IA+NH0E,UAAUxM,MAAM,UAACyM,IAAD,EAAOZ,IAAP,EAAazC,IAAb,EAAsB;QAC5BtB,MAAMY,KAAKU,IAAL,CAAZ;QACIsD,MAAM5E,IAAI2E,IAAJ,CADV;QAEIA,IAAJ,IAAY3E,IAAI+D,IAAJ,CAAZ;QACIA,IAAJ,IAAYa,GAAZ;WACO5E,GAAP;CALM,CA/NP;IA+OH6E,eAAe,SAAfA,YAAe,KAAM;QACX5G,QAAQ3F,OAAOwG,EAAP,CAAd;;QAEI,CAACb,KAAD,IAAUA,UAAU,CAAxB,EAA2B;eAChB,CAACa,EAAD,CAAP;;;QAGAwC,OAAOV,KAAK9B,EAAL,CAAX;QACIM,IAAI0F,OAAO7G,KAAP,EAAc,CAAd,CADR;QAEIsG,IAAI,CAFR;;QAIMvE,MAAM,CAACsB,IAAD,CAAZ;;WAEOiD,IAAItG,KAAX,EAAkBsG,GAAlB,EAAuB;YACfnF,EAAEmF,CAAF,IAAOA,CAAX,EAAc;mBACHG,QAAQH,IAAI,CAAJ,KAAU,CAAV,GAAc,CAAd,GAAkBnF,EAAEmF,CAAF,CAA1B,EAAgCA,CAAhC,EAAmCjD,IAAnC,CAAP;gBACIrB,IAAJ,CAASqB,IAAT;cACEiD,CAAF,KAAQ,CAAR;gBACI,CAAJ;;;UAGFA,CAAF,IAAO,CAAP;;;WAGGvE,GAAP;CAvQD;IAkRH0D,QAAQnJ,MAlRL;IA4RH+I,QAAQ1B,WA5RL;IAsSHmD,SAAS7M,MAAM,UAACuJ,EAAD,EAAK3C,EAAL,EAAY;QACjBf,QAAQmF,OAAOpE,EAAP,CAAd;WACO,CAACf,KAAD,GAAS,EAAT,GAAcxD,OAAOkH,EAAP,EAAW1D,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,CAArB;CAFK,CAtSN;IAmTHiH,SAAS9M,MAAM,UAACuJ,EAAD,EAAK3C,EAAL,EAAY;QACjBf,QAAQoF,QAAQrE,EAAR,CAAd;WACO,CAACf,KAAD,GAAS,EAAT,GAAc6D,YAAYH,EAAZ,EAAgB1D,MAAM,CAAN,CAAhB,EAA0BA,MAAM,CAAN,CAA1B,CAArB;CAFK,CAnTN;IAiUHkH,YAAY/M,MAAM,UAACuJ,EAAD,EAAKyD,IAAL,EAAWpG,EAAX,EAAkB;QAC1BwC,OAAOV,KAAK9B,EAAL,CAAb;QACIb,QAAQ3F,OAAOwG,EAAP,CADZ;QAEI,CAACb,KAAL,EAAY;eACD,CAACiH,IAAD,EAAO5D,IAAP,CAAP;;QAEApD,MAAM,CAAV;QACIxD,MAAMwK,IADV;QAEIC,SAAS,EAFb;QAGIC,cAHJ;WAIOlH,MAAMD,KAAb,EAAoBC,KAApB,EAA2B;gBACfuD,GAAG/G,GAAH,EAAQ4G,KAAKpD,GAAL,CAAR,EAAmBA,GAAnB,CAAR;cACMkH,MAAM,CAAN,CAAN;iBACSA,MAAM,CAAN,CAAT;;WAEG,CAAC1K,GAAD,EAAMyK,MAAN,CAAP;CAfQ,CAjUT;IA4VHE,YAAYnN,MAAM,UAACuJ,EAAD,EAAKyD,IAAL,EAAWpG,EAAX,EAAkB;QAC1BwC,OAAOV,KAAK9B,EAAL,CAAb;QACIb,QAAQ3F,OAAOwG,EAAP,CADZ;QAEI,CAACb,KAAL,EAAY;eACD,CAACiH,IAAD,EAAO5D,IAAP,CAAP;;QAEApD,MAAMD,QAAQ,CAAlB;QACIvD,MAAMwK,IADV;QAEIC,SAAS,EAFb;QAGIC,cAHJ;WAIOlH,OAAO,CAAd,EAAiBA,KAAjB,EAAwB;gBACZuD,GAAG/G,GAAH,EAAQ4G,KAAKpD,GAAL,CAAR,EAAmBA,GAAnB,CAAR;cACMkH,MAAM,CAAN,CAAN;iBACSA,MAAM,CAAN,CAAT;;WAEG,CAAC1K,GAAD,EAAMyK,MAAN,CAAP;CAfQ,CA5VT;IAuXHG,UAAUpN,MAAM,UAAC+F,KAAD,EAAQwD,EAAR,EAAYxH,CAAZ,EAAkB;QAC1BiE,MAAM,CAAV;QACI8B,MAAM,EADV;QAEIuF,QAAQtL,CAFZ;WAGOiE,MAAMD,KAAb,EAAoBC,OAAO,CAA3B,EAA8B;YACtB+B,IAAJ,CAASsF,KAAT;gBACQ9D,GAAG8D,KAAH,EAAUrH,GAAV,CAAR;;WAEG8B,GAAP;CARM,CAvXP;IAyYH8E,SAAS5M,MAAM,UAAC+F,KAAD,EAAQhE,CAAR;WAAcqL,QAAQrH,KAAR,EAAe;eAAKgB,CAAL;KAAf,EAAuBhF,CAAvB,CAAd;CAAN,CAzYN;IAkZHuL,YAAYV,MAlZT;IA2ZHW,QAAQvN,MAAM,UAAC+F,KAAD,EAAQa,EAAR;WAAenG,UAAO6M,UAAUvH,KAAV,EAAiBa,EAAjB,CAAP,CAAf;CAAN,CA3ZL;IAqaH4G,UAAUxN,MAAM,UAACuJ,EAAD,EAAKxH,CAAL,EAAW;QACnBiE,MAAM,CAAV;QACI8B,MAAM,EADV;QAEI2F,cAAclE,GAAGxH,CAAH,EAAMiE,GAAN,EAAW8B,GAAX,CAFlB;WAGO2F,WAAP,EAAoB;YACZ1F,IAAJ,CAAS0F,YAAY,CAAZ,CAAT;sBACclE,GAAGkE,YAAY,CAAZ,CAAH,EAAmB,EAAEzH,GAArB,EAA0B8B,GAA1B,CAAd;;WAEGA,GAAP;CARM,CAraP;IAubH4F,YAAY7D,cAvbT;IA+bH8D,cAAc3D,gBA/bX;IAucH4D,YAAY5N,MAAM,UAAC+B,CAAD,EAAI6E,EAAJ,EAAW;QACnBiH,WAAWjI,QAAQ7D,CAAR,EAAW6E,EAAX,CAAjB;WACOiH,aAAa,CAAC,CAAd,GAAkBA,QAAlB,GAA6BtO,SAApC;CAFQ,CAvcT;IAkdHuO,cAAc9N,MAAM,UAACX,KAAD,EAAQuH,EAAR;WAAe+G,YAAY;eAAK5L,MAAM1C,KAAX;KAAZ,EAA8BuH,EAA9B,CAAf;CAAN,CAldX;IA2dHmH,OAAOvF,OA3dJ;IAoeHwF,OAAO3F,SApeJ;IA8eH4F,UAAU,SAAVA,OAAU,CAACjI,GAAD,EAAMoD,IAAN;WAAe,CAAEZ,QAAQxC,GAAR,EAAaoD,IAAb,CAAF,EAAsBf,UAAUrC,GAAV,EAAeoD,IAAf,CAAtB,CAAf;CA9eP;IAufH8E,YAAYlO,MAAM,UAACsJ,IAAD,EAAOF,IAAP;WACdC,YACI9B,QAAQ+B,IAAR,CADJ;gBAAA;MAAA;QAAA,CADc;CAAN,CAvfT;IAugBH6E,YAAYnO,MAAM,UAACsJ,IAAD,EAAOF,IAAP,EAAgB;QACxBrD,QAAQ3F,OAAOgJ,IAAP,CAAd;QACIgF,aACIvE,eAAe,UAAC5B,IAAD,EAAOjC,GAAP,EAAYqI,KAAZ;eACX,CAAC/E,KAAKF,KAAKpD,GAAL,CAAL,EAAgBA,GAAhB,EAAqBqI,KAArB,CADU;KAAf,EACkCjF,IADlC,CAFR;;WAKOgF,eAAe,CAAC,CAAhB,GACH5F,QAAQzC,KAAR,EAAeqD,IAAf,CADG,GAEH3C,MAAM2H,UAAN,EAAkBrI,KAAlB,EAAyBqD,IAAzB,CAFJ;CANQ,CAvgBT;IAyhBHkF,eAAetO,MAAM,UAACsJ,IAAD,EAAOF,IAAP,EAAgB;QAC3BrD,QAAQ3F,OAAOgJ,IAAP,CAAd;QACIgF,aACIrE,oBAAoB,UAAC9B,IAAD,EAAOjC,GAAP,EAAYqI,KAAZ;eAChB,CAAC/E,KAAKF,KAAKpD,GAAL,CAAL,EAAgBA,GAAhB,EAAqBqI,KAArB,CADe;KAApB,EACkCjF,IADlC,CAFR;;WAKOgF,eAAe,CAAC,CAAhB,GACH5F,QAAQzC,KAAR,EAAeqD,IAAf,CADG,GAEHZ,QAAQ4F,aAAa,CAArB,EAAwBhF,IAAxB,CAFJ;CANW,CAzhBZ;IA6iBHmF,OAAOvO,MAAM,UAACsJ,IAAD,EAAOF,IAAP,EAAgB;QACnBgF,aAAavE,eAAetC,QAAQ+B,IAAR,CAAf,EAA8BF,IAA9B,CAAnB;WACOgF,eAAe,CAAC,CAAhB,GACHH,QAAQ,CAAR,EAAW7E,IAAX,CADG,GACgB6E,QAAQG,UAAR,EAAoBhF,IAApB,CADvB;CAFG,CA7iBJ;IAmkBHoF,cAAcxO,MAAM,UAACsJ,IAAD,EAAOF,IAAP,EAAgB;QAC1BgF,aAAavE,eAAeP,IAAf,EAAqBF,IAArB,CAAnB;WACOgF,eAAe,CAAC,CAAhB,GACHH,QAAQ,CAAR,EAAW7E,IAAX,CADG,GACgB6E,QAAQG,UAAR,EAAoBhF,IAApB,CADvB;CAFU,CAnkBX;IAglBHqF,KAAKlJ,IAhlBF;IAylBHmJ,OAAOzE,SAzlBJ;IAkmBHI,SAASrK,MAAM,UAACsJ,IAAD,EAAO1C,EAAP,EAAc;QACrBZ,MAAM,CAAV;QACID,QAAQ3F,OAAOwG,EAAP,CADZ;QAEIkB,MAAM,EAFV;QAGI,CAAC/B,KAAL,EAAY;eACD+B,GAAP;;WAEG9B,MAAMD,KAAb,EAAoBC,KAApB,EAA2B;YACnBsD,KAAK1C,GAAGZ,GAAH,CAAL,EAAcA,GAAd,EAAmBY,EAAnB,CAAJ,EAA4B;gBACpBmB,IAAJ,CAASnB,GAAGZ,GAAH,CAAT;;;WAGD8B,GAAP;CAZK,CAlmBN;IA0nBH6G,YAAY3O,MAAM,UAACsJ,IAAD,EAAOF,IAAP;WACd,CAAChJ,OAAOgJ,IAAP,CAAD,GACI,CAAC,EAAD,EAAK,EAAL,CADJ,GAEQ,CAACiB,OAAOf,IAAP,EAAaF,IAAb,CAAD,EAAqBiB,OAAO9C,QAAQ+B,IAAR,CAAP,EAAsBF,IAAtB,CAArB,CAHM;CAAN,CA1nBT;IAsoBHwF,OAAOlI,QAtoBJ;IA+oBHmI,UAAU/H,QAAQJ,QAAR,CA/oBP;IAspBHoI,SAASL,EAtpBN;IA+pBHM,aAAa/O,MAAM,UAACgP,GAAD,EAAMC,GAAN,EAAc;QACvBC,SAAS9O,OAAO4O,GAAP,CAAf;QACIG,SAAS/O,OAAO6O,GAAP,CADb;QAEIE,SAASD,MAAT,IAAmB,CAACA,MAApB,IAA8B,CAACC,MAA/B,IAAyCvJ,QAAQoJ,IAAI,CAAJ,CAAR,EAAgBC,GAAhB,MAAyB,CAAC,CAAvE,EAA0E;eAC/D,KAAP;;QAEAjJ,MAAM,CAAV;WACOA,MAAMkJ,MAAb,EAAqBlJ,KAArB,EAA4B;YACpBgJ,IAAIhJ,GAAJ,MAAaiJ,IAAIjJ,GAAJ,CAAjB,EAA2B;mBAChB,KAAP;;;WAGD,IAAP;CAZS,CA/pBV;IAqrBHoJ,aAAapP,MAAM,UAACgP,GAAD,EAAMC,GAAN,EAAc;QACvBC,SAAS9O,OAAO4O,GAAP,CAAf;QACIG,SAAS/O,OAAO6O,GAAP,CADb;QAEIE,SAASD,MAAT,IAAmB,CAACA,MAApB,IAA8B,CAACC,MAA/B,IAAyCvJ,QAAQoJ,IAAI,CAAJ,CAAR,EAAgBC,GAAhB,MAAyB,CAAC,CAAvE,EAA0E;eAC/D,KAAP;;QAEAxC,OAAOyC,SAAS,CAApB;QACIrD,OAAOsD,SAAS,CADpB;WAEO1C,QAAQ,CAAf,EAAkBA,MAAlB,EAA0B;YAClBuC,IAAIvC,IAAJ,MAAcwC,IAAIpD,IAAJ,CAAlB,EAA6B;mBAClB,KAAP;;gBAEI,CAAR;;WAEG,IAAP;CAdS,CArrBV;IA6sBHwD,YAAYrP,MAAM,UAACgP,GAAD,EAAMC,GAAN,EAAc;QACtBC,SAAS9O,OAAO4O,GAAP,CAAf;QACIG,SAAS/O,OAAO6O,GAAP,CADb;QAEIE,SAASD,MAAT,IAAmB,CAACA,MAApB,IAA8B,CAACC,MAAnC,EAA2C;eAChC,KAAP;;QAEA1C,aAAJ;QACI6C,iBADJ;QAEItJ,MAAM,CAFV;WAGOA,MAAMmJ,MAAb,EAAqBnJ,OAAO,CAA5B,EAA+B;mBAChB,CAAX;aACKyG,OAAO,CAAZ,EAAeA,OAAOyC,MAAtB,EAA8BzC,QAAQ,CAAtC,EAAyC;gBACjCwC,IAAIxC,OAAOzG,GAAX,MAAoBgJ,IAAIvC,IAAJ,CAAxB,EAAmC;4BACnB,CAAZ;;gBAEA6C,aAAaJ,MAAjB,EAAyB;uBACd,IAAP;;;;WAIL,KAAP;CApBQ,CA7sBT;IA2uBHK,kBAAkBvP,MAAM,UAACgP,GAAD,EAAMC,GAAN,EAAc;QAC5BrF,MAAMV,KAAKkD,GAAL,CAAS,CAAT,EAAYhM,OAAO6O,GAAP,CAAZ,CAAZ;QACIO,SAASpP,OAAO4O,GAAP,CADb;QAEIM,iBAAJ;QACIjD,UADJ;SAEKA,IAAI,CAAT,EAAYA,IAAIzC,GAAhB,EAAqByC,KAAK,CAA1B,EAA6B;mBACd,CAAX;aACK,IAAIE,IAAI,CAAb,EAAgBA,IAAI3C,GAApB,EAAyB2C,KAAK,CAA9B,EAAiC;gBACzBF,IAAK,KAAKE,CAAV,IAAgB3G,QAAQqJ,IAAI1C,CAAJ,CAAR,EAAgByC,GAAhB,IAAuB,CAAC,CAA5C,EAA+C;4BAC/B,CAAZ;;gBAEAM,aAAaE,MAAjB,EAAyB;uBACd,IAAP;;;;WAIL,KAAP;CAhBc,CA3uBf;IA0wBHC,QAAQ,SAARA,KAAQ;WAAMC,QAAQ,UAAC3I,CAAD,EAAIC,CAAJ;eAAUD,MAAMC,CAAhB;KAAR,EAA2BJ,EAA3B,CAAN;CA1wBL;IAqxBH8I,UAAU1P,MAAM,UAAC2P,UAAD,EAAa/I,EAAb,EAAoB;QAC1Bb,QAAQ3F,OAAOwG,EAAP,CAAd;QACI,CAACb,KAAL,EAAY;eACD2C,KAAK9B,EAAL,CAAP;;QAEAZ,MAAM,CAAV;QACI4J,iBADJ;QAEI3H,aAFJ;QAGI4H,SAAS,SAATA,MAAS,IAAK;YACNF,WAAW5N,CAAX,EAAc6N,QAAd,CAAJ,EAA6B;;;YAGzBD,WAAW5N,CAAX,EAAckG,IAAd,CAAJ,EAAyB;uBACVlG,CAAX;mBACO,IAAP;;eAEG,KAAP;KAXR;QAaIS,MAAM,EAbV;WAcOwD,MAAMD,KAAb,EAAoBC,OAAO,CAA3B,EAA8B;eACnBY,GAAGZ,GAAH,CAAP;YACI+B,IAAJ,CAASmG,UAAU2B,MAAV,EAAkBpJ,MAAMT,GAAN,EAAWD,KAAX,EAAkBa,EAAlB,CAAlB,CAAT;;WAEGpE,GAAP;CAvBM,CArxBP;IAyzBHsN,QAAQ,SAARA,KAAQ,KAAM;QACN/J,QAAQ3F,OAAOwG,EAAP,CAAZ;QACIZ,MAAM,CADV;QAEIxD,MAAM,EAFV;QAGI,CAACuD,KAAL,EAAY;eACD,EAAP;;WAEGC,OAAOD,KAAd,EAAqBC,OAAO,CAA5B,EAA+B;YACvB+B,IAAJ,CAASS,QAAQxC,GAAR,EAAaY,EAAb,CAAT;;WAEGpE,GAAP;CAn0BD;IAg1BHuN,QAAQ,SAARA,KAAQ,KAAM;QACNhK,QAAQ3F,OAAOwG,EAAP,CAAZ;QACIZ,MAAM,CADV;QAEIxD,MAAM,EAFV;QAGI,CAACuD,KAAL,EAAY;eACD,EAAP;;WAEGC,OAAOD,KAAd,EAAqBC,OAAO,CAA5B,EAA+B;YACvB+B,IAAJ,CAAStB,MAAMT,GAAN,EAAWD,KAAX,EAAkBa,EAAlB,CAAT;;WAEGpE,GAAP;CA11BD;IAo2BHwN,cAAchQ,MAAM,UAACiQ,MAAD,EAAS7G,IAAT;WAChB2F,WAAWkB,MAAX,EAAmB7G,IAAnB,IACI6E,QAAQ7N,OAAO6P,MAAP,CAAR,EAAwB7G,IAAxB,EAA8B,CAA9B,CADJ,GAEIV,KAAKU,IAAL,CAHY;CAAN,CAp2BX;IAk3BH8G,MAAMlQ,MAAM,UAACmQ,IAAD,EAAOC,IAAP,EAAgB;QACpB,CAAChQ,OAAO+P,IAAP,CAAD,IAAiB,CAAC/P,OAAOgQ,IAAP,CAAtB,EAAoC;eACzB,EAAP;;;6BAEarH,kBAAkBoH,IAAlB,EAAwBC,IAAxB,CAJO;;QAIjBC,EAJiB;QAIbC,EAJa;;WAKjBjO,OAAO,UAACG,GAAD,EAAMyF,IAAN,EAAYjC,GAAZ;eACNkC,aAAa1F,GAAb,EAAkB,CAACyF,IAAD,EAAOqI,GAAGtK,GAAH,CAAP,CAAlB,CADM;KAAP,EAEH,EAFG,EAECqK,EAFD,CAAP;CALE,CAl3BH;IAo4BHE,OAAO,SAAPA,IAAO,GAAc;uCAAVzH,KAAU;aAAA;;;QACX0H,eAAe7P,MAAMoI,iBAAN,EAAyBsB,OAAOjK,MAAP,EAAe0I,KAAf,CAAzB,CAArB;QACI2H,eAAerQ,OAAOoQ,YAAP,CADnB;QAEI,CAACC,YAAL,EAAmB;eACR,EAAP;KADJ,MAGK,IAAIA,iBAAiB,CAArB,EAAwB;eAClBjI,QAAQpI,OAAOoQ,aAAa,CAAb,CAAP,CAAR,EAAiCA,aAAa,CAAb,CAAjC,CAAP;;WAEGnO,OAAO,UAACG,GAAD,EAAMyF,IAAN,EAAYjC,GAAZ;eACNkC,aAAa1F,GAAb,EAAkBqF,IAAI;mBAAMjB,GAAGZ,GAAH,CAAN;SAAJ,EAAmBwK,YAAnB,CAAlB,CADM;KAAP,EAEH,EAFG,EAECA,aAAa,CAAb,CAFD,CAAP;CA74BD;IA05BHE,OAAO1Q,MAAM,UAACmQ,IAAD,EAAOC,IAAP,EAAaO,IAAb;WAAsBJ,KAAKJ,IAAL,EAAWC,IAAX,EAAiBO,IAAjB,CAAtB;CAAN,CA15BJ;IAq6BHC,OAAO5Q,MAAM,UAACmQ,IAAD,EAAOC,IAAP,EAAaO,IAAb,EAAmBE,IAAnB;WAA4BN,KAAKJ,IAAL,EAAWC,IAAX,EAAiBO,IAAjB,EAAuBE,IAAvB,CAA5B;CAAN,CAr6BJ;IAi7BHC,OAAO9Q,MAAM,UAACmQ,IAAD,EAAOC,IAAP,EAAaO,IAAb,EAAmBE,IAAnB,EAAyBE,IAAzB;WAAkCR,KAAKJ,IAAL,EAAWC,IAAX,EAAiBO,IAAjB,EAAuBE,IAAvB,EAA6BE,IAA7B,CAAlC;CAAN,CAj7BJ;IAw8BHC,UAAUhR,MAAM,UAACuJ,EAAD,EAAKyF,GAAL,EAAUC,GAAV,EAAkB;QAC1B,CAAC7O,OAAO4O,GAAP,CAAD,IAAgB,CAAC5O,OAAO6O,GAAP,CAArB,EAAkC;eACvB,EAAP;;;8BAEalG,kBAAkBiG,GAAlB,EAAuBC,GAAvB,CAJa;;QAIvBoB,EAJuB;QAInBC,EAJmB;;WAKvBjO,OAAO,UAACG,GAAD,EAAMyF,IAAN,EAAYjC,GAAZ;eACNkC,aAAa1F,GAAb,EAAkB+G,GAAGtB,IAAH,EAASqI,GAAGtK,GAAH,CAAT,CAAlB,CADM;KAAP,EAEH,EAFG,EAECqK,EAFD,CAAP;CALM,CAx8BP;IA+9BHY,WAAWjR,MAAM,UAACuJ,EAAD,EAAkB;uCAAVT,KAAU;aAAA;;;QACzB0H,eAAe7P,MAAMoI,iBAAN,EAAyBD,KAAzB,CAArB;QACI2H,eAAerQ,OAAOoQ,YAAP,CADnB;QAEI,CAACC,YAAL,EAAmB;eACR,EAAP;KADJ,MAGK,IAAIA,iBAAiB,CAArB,EAAwB;eAClBjI,QAAQpI,OAAOoQ,aAAa,CAAb,CAAP,CAAR,EAAiCA,aAAa,CAAb,CAAjC,CAAP;;WAEGnO,OAAO,UAACG,GAAD,EAAMyF,IAAN,EAAYjC,GAAZ;eACNkC,aAAa1F,GAAb,EAAkB7B,MAAM4I,EAAN,EAAU1B,IAAI;mBAAMjB,GAAGZ,GAAH,CAAN;SAAJ,EAAmBwK,YAAnB,CAAV,CAAlB,CADM;KAAP,EAEH,EAFG,EAECA,aAAa,CAAb,CAFD,CAAP;CATO,CA/9BR;IAy/BHU,WAAWlR,MAAM,UAACuJ,EAAD,EAAKyF,GAAL,EAAUC,GAAV,EAAekC,GAAf;WAAuBF,SAAS1H,EAAT,EAAayF,GAAb,EAAkBC,GAAlB,EAAuBkC,GAAvB,CAAvB;CAAN,CAz/BR;IAwgCHC,WAAWpR,MAAM,UAACuJ,EAAD,EAAKyF,GAAL,EAAUC,GAAV,EAAekC,GAAf,EAAoBE,GAApB;WAA4BJ,SAAS1H,EAAT,EAAayF,GAAb,EAAkBC,GAAlB,EAAuBkC,GAAvB,EAA4BE,GAA5B,CAA5B;CAAN,CAxgCR;IAwhCHC,WAAWtR,MAAM,UAACuJ,EAAD,EAAKyF,GAAL,EAAUC,GAAV,EAAekC,GAAf,EAAoBE,GAApB,EAAyBE,GAAzB;WAAiCN,SAAS1H,EAAT,EAAayF,GAAb,EAAkBC,GAAlB,EAAuBkC,GAAvB,EAA4BE,GAA5B,EAAiCE,GAAjC,CAAjC;CAAN,CAxhCR;IAkiCHC,QAAQ,SAARA,KAAQ;WACJhG,MAAM,UAAChJ,GAAD,EAAMyF,IAAN,EAAe;YACb,CAAJ,EAAOF,IAAP,CAAYE,KAAK,CAAL,CAAZ;YACI,CAAJ,EAAOF,IAAP,CAAYE,KAAK,CAAL,CAAZ;eACOzF,GAAP;KAHJ,EAIG,CAAC,EAAD,EAAK,EAAL,CAJH,EAIa+F,GAJb,CADI;CAliCL;IAijCHkJ,SAAS,SAATA,MAAS,OAAQ;QACT,CAACrR,OAAOgJ,IAAP,CAAL,EAAmB;eACR,EAAP;;QAEEsI,WAAWtR,OAAOgJ,KAAK,CAAL,CAAP,CAAjB;QACI4D,OAAO0E,WACPlE,QAAQ;eAAY5B,aAAa,CAAC,EAAD,EAAKA,QAAL,CAAb,GAA8BrM,SAA1C;KAAR,EAA6DmS,QAA7D,CADO,GAEP,EAFJ;WAGOlG,MAAM,UAAChJ,GAAD,EAAMyF,IAAN,EAAe;YACpBqC,OAAJ,CAAY,UAAC2B,OAAD,EAAUjG,GAAV;mBAAkBiG,QAAQlE,IAAR,CAAaE,KAAKjC,GAAL,CAAb,CAAlB;SAAZ;eACOxD,GAAP;KAFG,EAGJwK,IAHI,EAGE5D,IAHF,CAAP;CAzjCD;IAskCHuI,MAAM3R,MAAM,UAAC4R,CAAD,EAAIhL,EAAJ,EAAW;QACfZ,MAAM,CAAV;QACID,QAAQ3F,OAAOwG,EAAP,CADZ;QAEI,CAACb,KAAL,EAAY;eACD,KAAP;;WAEGC,MAAMD,KAAb,EAAoBC,OAAO,CAA3B,EAA8B;YACtB4L,EAAEhL,GAAGZ,GAAH,CAAF,CAAJ,EAAgB;mBACL,IAAP;;;WAGD,KAAP;CAXE,CAtkCH;IA2lCH6L,MAAM7R,MAAM,UAAC4R,CAAD,EAAIhL,EAAJ,EAAW;QACbb,QAAQ3F,OAAOwG,EAAP,CAAd;QACIZ,MAAM,CAAV;QACID,UAAU,CAAd,EAAiB;eACN,KAAP;;WAEGC,MAAMD,KAAb,EAAoBC,KAApB,EAA2B;YACnB,CAAC4L,EAAEhL,GAAGZ,GAAH,CAAF,EAAWA,GAAX,EAAgBY,EAAhB,CAAL,EAA0B;mBACf,KAAP;;;WAGD,IAAP;CAXE,CA3lCH;IAgnCHkL,MAAM,SAANA,GAAM;WAAMD,IAAIpK,QAAJ,EAAcb,EAAd,CAAN;CAhnCH;IA2nCHmL,KAAK,SAALA,EAAK;WAAMJ,IAAIlK,QAAJ,EAAcb,EAAd,CAAN;CA3nCF;IAsoCHoL,MAAM,SAANA,GAAM;WAAMH,IAAInK,OAAJ,EAAad,EAAb,CAAN;CAtoCH;IA+oCHqL,MAAM,SAANA,GAAM;WAAQzG,MAAM,UAAChJ,GAAD,EAAMT,CAAN;eAAYS,MAAMT,CAAlB;KAAN,EAA2B,CAA3B,EAA8BqH,IAA9B,CAAR;CA/oCH;IAwpCH8I,UAAU,SAAVA,OAAU;WAAQ1G,MAAM,UAAChJ,GAAD,EAAMT,CAAN;eAAYS,MAAMT,CAAlB;KAAN,EAA2B,CAA3B,EAA8BqH,IAA9B,CAAR;CAxpCP;IAiqCH2C,UAAU,SAAVA,OAAU;WAAQlB,KAAKsH,OAAOvJ,kBAAP,EAA2BQ,IAA3B,CAAL,CAAR;CAjqCP;IA0qCHgJ,UAAU,SAAVA,OAAU;WAAQxH,KAAKuH,OAAOvJ,kBAAP,EAA2BQ,IAA3B,CAAL,CAAR;CA1qCP;IA2rCHiJ,QAAQrS,MAAM,UAACC,EAAD,EAAK+M,IAAL,EAAWpG,EAAX,EAAkB;QACxB,CAACA,EAAD,IAAO,CAACxG,OAAOwG,EAAP,CAAZ,EAAwB;eACb,EAAP;;QAEEb,QAAQ3F,OAAOwG,EAAP,CAAd;QACIZ,MAAM,CAAV;QACIwD,SAASwD,IADb;QAEIlF,MAAM,EAFV;WAGO9B,MAAMD,KAAb,EAAoB;iBACP9F,GAAGuJ,MAAH,EAAW5C,GAAGZ,GAAH,CAAX,EAAoBA,GAApB,EAAyBY,EAAzB,CAAT;YACImB,IAAJ,CAASyB,MAAT;;;WAGG1B,GAAP;CAbI,CA3rCL;IAmtCHwK,SAAStS,MAAM,UAACC,EAAD,EAAK2G,EAAL,EAAY;QACnB,CAACA,EAAD,IAAO,CAACA,GAAGxG,MAAf,EAAuB;eAAS,EAAP;;WAClBiS,MAAMpS,EAAN,EAAU2K,KAAKhE,EAAL,CAAV,EAAoBkE,KAAKlE,EAAL,CAApB,CAAP;CAFK,CAntCN;IAkuCH2L,QAAQvS,MAAM,UAACC,EAAD,EAAK+M,IAAL,EAAWpG,EAAX,EAAkB;QACxB,CAACA,EAAD,IAAO,CAACxG,OAAOwG,EAAP,CAAZ,EAAwB;eACb,EAAP;;QAEEb,QAAQ3F,OAAOwG,EAAP,CAAd;QACIZ,MAAMD,QAAQ,CAAlB;QACIyD,SAAS5C,GAAG,CAAH,CADb;QAEIkB,MAAM,EAFV;WAGO9B,MAAM,CAAC,CAAd,EAAiB;iBACJ/F,GAAGuJ,MAAH,EAAW5C,GAAGZ,GAAH,CAAX,EAAoBA,GAApB,EAAyBY,EAAzB,CAAT;YACImB,IAAJ,CAASyB,MAAT;;;WAGG1B,GAAP;CAbI,CAluCL;IAyvCH0K,SAASxS,MAAM,UAACC,EAAD,EAAK2G,EAAL,EAAY;QACnB,CAACA,EAAD,IAAO,CAACA,GAAGxG,MAAf,EAAuB;eAAS,EAAP;;WAClBmS,MAAMtS,EAAN,EAAU4K,KAAKjE,EAAL,CAAV,EAAoBmE,KAAKnE,EAAL,CAApB,CAAP;CAFK,CAzvCN;IAwwCH6L,MAAM,SAANA,GAAM;WAAQC,MAAM,UAAC3L,CAAD,EAAIC,CAAJ;eAAUD,MAAMC,CAAhB;KAAN,EAAyBoC,IAAzB,CAAR;CAxwCH;IAkxCHuJ,SAAS3S,MAAM,UAAC+B,CAAD,EAAIqH,IAAJ;WAAawJ,SAAS,UAAC7L,CAAD,EAAIC,CAAJ;eAAUD,MAAMC,CAAhB;KAAT,EAA4BjF,CAA5B,EAA+BqH,IAA/B,CAAb;CAAN,CAlxCN;IA6xCHyJ,OAAO,SAAPA,IAAO;WAAMV,OAAOvJ,kBAAP,EAA2BhC,EAA3B,CAAN;CA7xCJ;IAqzCHkM,SAAS9S,MAAM,UAAC+S,OAAD,EAAUnM,EAAV;;;;YAGP;mBAAaoM,UAAU,CAAV,CAAb;SAAJ;;;;;;;gBAKUC,EAAF;;;gBAAQC,EAAR;;mBAAgBtK,mBAAmBqK,EAAnB,EAAuBC,EAAvB,CAAhB;SAFJ;;;YAKQ;mBAAQ,CAACH,QAAQ9K,IAAR,CAAD,EAAgBA,IAAhB,CAAR;SAAJ,EAAmCrB,EAAnC,CALJ,CAHJ;;CAHK,CArzCN;IAg1CHuL,SAASnS,MAAM,UAACmT,UAAD,EAAavM,EAAb;WAAoB8B,KAAK9B,EAAL,EAASiM,IAAT,CAAcM,cAAcvK,kBAA5B,CAApB;CAAN,CAh1CN;IA61CHwK,SAASpT,MAAM,UAAC+B,CAAD,EAAI6E,EAAJ,EAAW;QAClB,CAACxG,OAAOwG,EAAP,CAAL,EAAiB;eACN,CAAC7E,CAAD,CAAP;;QAEEsR,aAAa3F,UAAU;eAAQ3L,KAAKkG,IAAb;KAAV,EAA6BrB,EAA7B,CAAnB;WACOyM,eAAe,CAAC,CAAhB,GAAoB,CAACtR,CAAD,CAApB,GACHtB,UAAO4K,YAAY,CAACtJ,CAAD,CAAZ,EAAiBkM,QAAQoF,UAAR,EAAoBzM,EAApB,CAAjB,CAAP,CADJ;CALK,CA71CN;IAm3CH0M,WAAWtT,MAAM,UAACmT,UAAD,EAAapR,CAAb,EAAgB6E,EAAhB,EAAuB;QAC9Bb,QAAQ3F,OAAOwG,EAAP,CAAd;QACI,CAACb,KAAL,EAAY;eACD,CAAChE,CAAD,CAAP;;QAEAiE,MAAM,CAAV;WACOA,MAAMD,KAAb,EAAoBC,OAAO,CAA3B,EAA8B;YACtBmN,WAAWpR,CAAX,EAAc6E,GAAGZ,GAAH,CAAd,KAA0B,CAA9B,EAAiC;gBACvBH,QAAQoI,QAAQjI,GAAR,EAAaY,EAAb,CAAd;mBACOnG,UAAO,CAACoF,MAAM,CAAN,CAAD,EAAW,CAAC9D,CAAD,CAAX,EAAgB8D,MAAM,CAAN,CAAhB,CAAP,CAAP;;;WAGDqC,aAAaQ,KAAK9B,EAAL,CAAb,EAAuB7E,CAAvB,CAAP;CAZO,CAn3CR;IAy4CH2Q,QAAQ1S,MAAM,UAACsJ,IAAD,EAAOF,IAAP,EAAgB;QACtB,CAAChJ,OAAOgJ,IAAP,CAAL,EAAmB;eACR,EAAP;;QAEErD,QAAQ3F,OAAOgJ,IAAP,CAAd;QACIpD,MAAM,CAAV;QACIuN,iBADJ;QAEIzL,MAAM,EAFV;QAGI0L,QAAQ,SAARA,KAAQ;eAAclK,KAAKiK,QAAL,EAAeE,UAAf,CAAd;KAHZ;WAIOzN,MAAMD,KAAb,EAAoBC,OAAO,CAA3B,EAA8B;mBACfoD,KAAKpD,GAAL,CAAX;YACI2L,IAAI6B,KAAJ,EAAW1L,GAAX,CAAJ,EAAqB;;;YAGjBC,IAAJ,CAASwL,QAAT;;WAEGzL,GAAP;CAhBI,CAz4CL;IAo6CH8K,WAAW5S,MAAM,UAACsJ,IAAD,EAAOvH,CAAP,EAAUqH,IAAV,EAAmB;;QAC1BiK,aAAa3F,UAAU;eAAQpE,KAAKvH,CAAL,EAAQkG,IAAR,CAAR;KAAV,EAAiCmB,IAAjC,CAAnB;QACIvD,QAAQoI,QAAQoF,aAAa,CAAC,CAAd,GAAkBA,UAAlB,GAA+B,CAAvC,EAA0CjK,IAA1C,CADZ,CADgC;WAGzBqB,OAAO5E,MAAM,CAAN,CAAP,EAAiBiF,KAAKjF,MAAM,CAAN,CAAL,CAAjB,CAAP;CAHO,CAp6CR;IAk7CH6N,iBAAiB1T,MAAM,UAACsJ,IAAD,EAAO0F,GAAP,EAAYC,GAAZ;WACnBzD,MAAM,UAAChJ,GAAD,EAAMmR,EAAN;eAAaf,SAAStJ,IAAT,EAAeqK,EAAf,EAAmBnR,GAAnB,CAAb;KAAN,EAA4CwM,GAA5C,EAAiDC,GAAjD,CADmB;CAAN,CAl7Cd;IA67CH2E,UAAU5T,MAAM,UAACsJ,IAAD,EAAO6G,IAAP,EAAaC,IAAb;WACZ5E,MAAM,UAAChJ,GAAD,EAAMwE,CAAN,EAAY;YACJ6M,eAAelC,IAAI;mBAAKrI,KAAKvC,CAAL,EAAQC,CAAR,CAAL;SAAJ,EAAqBxE,GAArB,CAArB;eACO,CAACqR,YAAD,IAAiBrR,IAAIuF,IAAJ,CAASf,CAAT,GAAaxE,GAA9B,IAAqCA,GAA5C;KAFR,EAGOkG,KAAKyH,IAAL,CAHP,EAGmBC,IAHnB,CADY;CAAN,CA77CP;IA28CH0D,QAAQ9T,MAAM,UAACmQ,IAAD,EAAOC,IAAP;WACV3F,OAAO0F,IAAP,EACI9F,OAAO;eAAO,CAAC3D,SAASwD,GAAT,EAAciG,IAAd,CAAR;KAAP,EAAoCC,IAApC,CADJ,CADU;CAAN,CA38CL;IAs9CH2D,YAAY/T,MAAM,UAACmQ,IAAD,EAAOC,IAAP;WACd,CAACD,IAAD,IAAS,CAACC,IAAV,IAAmB,CAACD,IAAD,IAAS,CAACC,IAA7B,GAAqC,EAArC,GACI/F,OAAO;eAAO3D,SAASwD,GAAT,EAAckG,IAAd,CAAP;KAAP,EAAmCD,IAAnC,CAFU;CAAN,CAt9CT;IAk+CH6D,cAAchU,MAAM,UAACsJ,IAAD,EAAO2K,KAAP,EAAc5F,KAAd;WAChB7C,MAAM,UAAChJ,GAAD,EAAMuE,CAAN;eACE4K,IAAI;mBAAKrI,KAAKvC,CAAL,EAAQC,CAAR,CAAL;SAAJ,EAAqBqH,KAArB,KAA+B7L,IAAIuF,IAAJ,CAAShB,CAAT,GAAavE,GAA5C,IAAmDA,GADrD;KAAN,EAEM,EAFN,EAEUyR,KAFV,CADgB;CAAN,CAl+CX;IA++CHC,aAAalU,MAAM,UAACmU,MAAD,EAASC,MAAT,EAAoB;;QAC/BD,UAAU,CAACC,MAAf,EAAuB;eACZ1L,KAAKyL,MAAL,CAAP;KADJ,MAGK,IAAI,CAACA,MAAD,IAAWC,MAAX,IAAsB,CAACD,MAAD,IAAW,CAACC,MAAtC,EAA+C;eACzC,EAAP;;WAEG/R,OAAO,UAACG,GAAD,EAAM0H,GAAN;eACN,CAACxD,SAASwD,GAAT,EAAckK,MAAd,CAAD,IAA0B5R,IAAIuF,IAAJ,CAASmC,GAAT,GAAe1H,GAAzC,IAAgDA,GAD1C;KAAP,EAED,EAFC,EAEG2R,MAFH,CAAP;CAPS,CA/+CV;IAkgDHE,aAAarU,MAAM,UAACsU,IAAD;uCAAUC,MAAV;cAAA;;;WACflS,OAAO,UAACG,GAAD,EAAM+F,GAAN;eAAckC,OAAOjI,GAAP,EAAY0R,WAAW3L,GAAX,EAAgB+L,IAAhB,CAAZ,CAAd;KAAP,EAAyD,EAAzD,EAA6DC,MAA7D,CADe;CAAN,CAlgDV;;ACrBA,IAEHC,WAAWxU,MAAM,UAACyU,IAAD,EAAOC,IAAP;WAAgBvO,WAAWsO,IAAX,EAAiBC,IAAjB,CAAhB;CAAN,CAFR;IAIHC,eAAe3U,MAAM,UAACyU,IAAD,EAAOC,IAAP;WAAgBlJ,MAAM,UAAChJ,GAAD,EAAMC,GAAN,EAAc;YACjDX,eAAeW,GAAf,EAAoBiS,IAApB,CAAJ,EAA+B;gBACvBjS,GAAJ,IAAWiS,KAAKjS,GAAL,CAAX;;eAEGD,GAAP;KAJiC,EAKlC,EALkC,EAK9BR,KAAKyS,IAAL,CAL8B,CAAhB;CAAN,CAJZ;IAWHG,gBAAgB5U,MAAM,UAACyU,IAAD,EAAOC,IAAP;WAAgBlJ,MAAM,UAAChJ,GAAD,EAAMC,GAAN,EAAc;YAClD,CAACX,eAAeW,GAAf,EAAoBiS,IAApB,CAAL,EAAgC;gBACxBjS,GAAJ,IAAWgS,KAAKhS,GAAL,CAAX;;eAEGD,GAAP;KAJkC,EAKnC,EALmC,EAK/BR,KAAKyS,IAAL,CAL+B,CAAhB;CAAN,CAXb;IAkBHI,gBAAgB7U,MAAM,UAACmC,IAAD;sCAAUC,IAAV;YAAA;;;WAAmBoJ,MAAM,UAAChJ,GAAD,EAAMD,GAAN;eAC3C4D,WAAW3D,GAAX,EAAgBoS,cAAcrS,GAAd,EAAmBJ,IAAnB,CAAhB,CAD2C;KAAN,EACM,EADN,EACUC,IADV,CAAnB;CAAN,CAlBb;;ACLA,IAQH0S,MAAMC,QAAQD,GAAR,CAAYE,IAAZ,CAAiBD,OAAjB,CARH;IAgBHE,QAAQF,QAAQE,KAAR,CAAcD,IAAd,CAAmBD,OAAnB,CAhBL;IAwBHG,OAAO,SAAPA,IAAO;oCAAI3U,IAAJ;QAAA;;;SAAcuU,qBAAOvU,IAAP,GAAcA,KAAK4U,GAAL,EAA5B;CAxBJ;;ACAP;;;;;AAKA,AAIO,IASHC,kBAAkB,SAAlBA,eAAkB;WAAQhR,SAASV,IAAT,KAAkBC,WAAWD,IAAX,CAA1B;CATf;IAmBH2R,0BAA0B,SAA1BA,uBAA0B,CAACC,WAAD,EAAc5R,IAAd,EAAuB;QACzC,CAAC0R,gBAAgB1R,IAAhB,CAAL,EAA4B;cAClB,IAAI5D,KAAJ,CAAcwV,WAAH,oFACQlW,OAAOsE,IAAP,CADR,mBACoCA,IADpC,QAAX,CAAN;;WAGGA,IAAP;CAxBD;IAkCH6R,cAAc,SAAdA,WAAc,OAAQ;4BACM,aAAxB,EAAuC7R,IAAvC;WACOA,KAAK1E,IAAL,IAAa0E,IAApB;CApCD;IA+CH8R,sBAAsB,SAAtBA,mBAAsB,CAACxQ,IAAD,EAAO3F,KAAP;WAAiBoE,OAAO8R,YAAYvQ,IAAZ,CAAP,EAA0B3F,KAA1B,KACnCsE,WAAWqB,IAAX,KAAoBF,MAAMzF,KAAN,CAApB,IAAoCA,iBAAiB2F,IADnC;CA/CnB;IA0DHyQ,qBAAqB,SAArBA,kBAAqB;WAASC,MAAMtV,MAAN,GACrBsV,MAAM7N,GAAN,CAAU;qBAAa0N,YAAY7R,IAAZ,CAAb;KAAV,EAA8C8G,IAA9C,CAAmD,IAAnD,CADqB,GACsC,EAD/C;CA1DlB;IAqEHmL,0BAA0B,SAA1BA,uBAA0B,cAAe;QAEjCL,WAFiC,GAIjCM,WAJiC,CAEjCN,WAFiC;QAEpBO,SAFoB,GAIjCD,WAJiC,CAEpBC,SAFoB;QAETxW,KAFS,GAIjCuW,WAJiC,CAETvW,KAFS;QAEFyW,gBAFE,GAIjCF,WAJiC,CAEFE,gBAFE;QAGjCC,aAHiC,GAIjCH,WAJiC,CAGjCG,aAHiC;QAGlBC,aAHkB,GAIjCJ,WAJiC,CAGlBI,aAHkB;QAKjCC,gBALiC,GAKdjS,QAAQ8R,gBAAR,CALc;QAMjCI,SANiC,GAMrBD,mBAAmB,SAAnB,GAA+B,qBANV;QAOjCE,gBAPiC,GAOdF,mBAAmBR,mBAAmBK,gBAAnB,CAAnB,GAA0DA,gBAP5C;;WAQ9B,CAACR,oBAAmBA,WAAnB,SAAoC,GAArC,KACAO,SADA,iBACsBK,SADtB,UACoCC,gBADpC,iCAEeJ,aAFf,kBAEyC1W,KAFzC,iBAGA2W,gBAAiB,OAAOA,aAAP,GAAuB,GAAxC,GAA8C,EAH9C,EAAP;CA7ED;IA0FHI,4BAA4B,SAA5BA,yBAA4B,CAACC,gBAAD;QAAmBC,WAAnB,uEAAiCd,mBAAjC;WAC1B,UAACe,SAAD,EAAYjB,WAAZ,EAAyBO,SAAzB,EAAoCxW,KAApC,EAAoE;YAAzB2W,aAAyB,uEAAT,IAAS;;YAC5DF,mBAAmBP,YAAYgB,SAAZ,CAAzB;YACIR,gBAAgB3W,OAAOC,KAAP,CADpB;YAEIiX,YAAYC,SAAZ,EAAuBlX,KAAvB,CAAJ,EAAmC;mBAASA,KAAP;SAH6B;cAI5D,IAAIS,KAAJ,CAAUuW,iBACZ,EAACf,wBAAD,EAAcO,oBAAd,EAAyBxW,YAAzB,EAAgCyW,kCAAhC,EAAkDC,4BAAlD,EAAiEC,4BAAjE,EADY,CAAV,CAAN;KALwB;CA1FzB;IA2GHQ,6BAA6B,SAA7BA,0BAA6B,CAACH,gBAAD;QAAmBC,WAAnB,uEAAiCd,mBAAjC;WAC3B,UAACiB,UAAD,EAAanB,WAAb,EAA0BO,SAA1B,EAAqCxW,KAArC,EAA+C;YACnCqX,oBAAoBD,WAAW5O,GAAX,CAAe0N,WAAf,CAA1B;YACIoB,aAAaF,WAAW1R,IAAX,CAAgB;mBAAauR,YAAYC,SAAZ,EAAuBlX,KAAvB,CAAb;SAAhB,CADjB;YAEI0W,gBAAgB3W,OAAOC,KAAP,CAFpB;YAGIsX,UAAJ,EAAgB;mBAAStX,KAAP;;cACZ,IAAIS,KAAJ,CACFuW,iBAAiB;oCAAA,EACAR,oBADA,EACWxW,YADX;8BAEKqX,iBAFL,EAEwBX;SAFzC,CADE,CAAN;KANqB;CA3G1B;IAsIHa,kBAAkBR,0BAA0BT,uBAA1B,CAtIf;IAqJHkB,mBAAmBL,2BAA2Bb,uBAA3B,CArJhB;IAgKHmB,qBAAqB9W,MAAMwV,mBAAN,CAhKlB;IA8KHuB,iBAAiB/W,MAAM4W,eAAN,CA9Kd;IA2LHI,kBAAkBlW,OAAO+V,gBAAP,CA3Lf;IAqMHI,2BAA2B,SAA3BA,wBAA2B;WAAoBjX,MAAMoW,0BAA0BC,gBAA1B,CAAN,CAApB;CArMxB;IA+MHa,4BAA4B,SAA5BA,yBAA4B;WAAoBpW,OAAO0V,2BAA2BH,gBAA3B,CAAP,CAApB;CA/MzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA,IAQHc,YAAY,SAAZA,SAAY;SAAKC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAevV,CAAf,CAAX,CAAL;CART;;ACGA,IASHwV,cAAc,SAAdA,WAAc;WAAOvV,KAAKO,GAAL,EAAUsF,GAAV,CAAc;eAAO,CAACpF,GAAD,EAAMF,IAAIE,GAAJ,CAAN,CAAP;KAAd,CAAP;CATX;IAmBH+U,kBAAkB,SAAlBA,eAAkB,CAACjV,GAAD;QAAMkV,cAAN,uEAAuBxV,MAAvB;WAAkCD,KAAKO,GAAL,EAAUsF,GAAV,CAAc;eAC9D4P,kBAAkBhU,OAAOgU,cAAP,EAAuBlV,IAAIE,GAAJ,CAAvB,CAAlB,GACI,CAACA,GAAD,EAAM+U,gBAAgBjV,IAAIE,GAAJ,CAAhB,EAA0BgV,cAA1B,CAAN,CADJ,GAEI,CAAChV,GAAD,EAAMF,IAAIE,GAAJ,CAAN,CAH0D;KAAd,CAAlC;CAnBf;IAgCHiV,gBAAgB,SAAhBA,aAAgB,CAAC9Q,EAAD;QAAK+Q,OAAL,uEAAe1V,MAAf;WAA0B2E,GAAGvE,MAAH,CAAU,UAACG,GAAD,QAAuB;;YAAhBC,GAAgB;YAAXpD,KAAW;;YACnEoD,GAAJ,IAAWpD,KAAX;eACOmD,GAAP;KAFsC,EAGvC,IAAImV,OAAJ,EAHuC,CAA1B;CAhCb;IA6CHC,oBAAoB,SAApBA,iBAAoB,CAAChR,EAAD;QAAK+Q,OAAL,uEAAe1V,MAAf;WAA0B2E,GAAGvE,MAAH,CAAU,UAACG,GAAD,SAAuB;;YAAhBC,GAAgB;YAAXpD,KAAW;;YACvE2E,QAAQ3E,KAAR,KAAkB2E,QAAQ3E,MAAM,CAAN,CAAR,CAAlB,IAAuCA,MAAM,CAAN,EAASe,MAAT,KAAoB,CAA/D,EAAkE;gBAC1DqC,GAAJ,IAAWmV,kBAAkBvY,KAAlB,EAAyBsY,OAAzB,CAAX;mBACOnV,GAAP;;YAEAC,GAAJ,IAAWpD,KAAX;eACOmD,GAAP;KAN0C,EAO3C,IAAImV,OAAJ,EAP2C,CAA1B;CA7CjB;;ACAA,IAWHE,YAAU,SAAVA,OAAU,IAAK;YACHzY,OAAO2C,CAAP,CAAR;aACS,MAAL;aACK,WAAL;mBACW,EAAP;aACCY,OAAO3D,IAAZ;aACKkE,MAAMlE,IAAX;aACK,SAAL;aACK,SAAL;aACK,KAAL;aACK,KAAL;mBACWkE,MAAM4U,IAAN,CAAW/V,CAAX,CAAP;aACCE,OAAOjD,IAAZ;;mBAEWuY,YAAYxV,CAAZ,CAAP;;CAzBT;;ACHP;;;;;ACEA;;;;;;;;AAQA,AAAO,IAAMgW,UAAU,SAAVA,OAAU;oCAAIxX,IAAJ;QAAA;;;SACf;WAAQmJ,cAAY,UAACrK,KAAD,EAAQY,EAAR;aAAeA,GAAGZ,KAAH,CAAf;KAAZ,EAAsC2Y,IAAtC,EAA4CzX,IAA5C,CAAR;GADe;CAAhB;;ACVP;;;;;AAKA,AAEA;;;;;AAKA,IAAM0X,cAAc,SAASA,WAAT,GAAuB,EAA3C;IAEIC,iBAAiB,+BAFrB;IASIC,sBAAsB,IAAIF,WAAJ,EAT1B;;;;;;;;AAiBA,SAASG,aAAT,CAAwBvW,QAAxB,EAAkC;WACvBA,oBAAoBoW,WAA3B;;;;;;;;;;;AAWJ,SAASI,mBAAT,CAA8BC,KAA9B,EAAqC/X,IAArC,EAA2C;QACnCuH,MAAMwQ,MAAMzQ,GAAN,CAAU,mBAAW;YACnB,CAACuQ,cAAcG,OAAd,CAAL,EAA6B;mBAASA,OAAP;SAA/B,MACK,IAAIhY,KAAKH,MAAT,EAAiB;mBAASG,KAAKiY,KAAL,EAAP;;eACjBD,OAAP;KAHE,CAAV;WAKOhY,KAAKH,MAAL,GAAc0H,IAAIrH,MAAJ,CAAWF,IAAX,CAAd,GAAiCuH,GAAxC;;;;;;;;;;AAUJ,AAAO,SAAS2Q,MAAT,CAAiBxY,EAAjB,EAAqC;sCAAbC,WAAa;mBAAA;;;WACjCwY,0BAAQ/Y,YAAUuY,cAAV,EAA0BjY,EAA1B,EAA8BG,MAAtC,EAA8CH,EAA9C,SAAqDC,WAArD,EAAP;;;;;;;;;;;AAWJ,AAAO,SAASwY,OAAT,CAAkBrY,YAAlB,EAAgCJ,EAAhC,EAAoD;uCAAbK,WAAa;mBAAA;;;WAChD,YAAa;2CAATC,IAAS;gBAAA;;;YACZC,eAAe6X,oBAAoB/X,WAApB,EAAiCC,IAAjC,CAAnB;YACIoY,eAAenY,aAAa6J,MAAb,CAAoB+N,aAApB,CADnB;YAEI1X,cAAeF,aAAaJ,MAAb,GAAsBuY,aAAavY,MAAnC,IAA6CC,YAA9C,IAA+D,CAACA,YAFlF;eAGO,CAACK,WAAD,GACHgY,QAAQ/X,KAAR,CAAc,IAAd,EAAoB,CAACN,YAAD,EAAeV,YAAUuY,cAAV,EAA0BjY,EAA1B,CAAf,EAA8CQ,MAA9C,CAAqDD,YAArD,CAApB,CADG,GAEHb,YAAUuY,cAAV,EAA0BjY,EAA1B,EAA8BU,KAA9B,CAAoC,IAApC,EAA0CH,YAA1C,CAFJ;KAJJ;;;;;;;;AAeJ,AAAO,IAAIoY,KAAK3W,OAAO4W,MAAP,GAAgB5W,OAAO4W,MAAP,CAAcV,mBAAd,CAAhB,GAAqDA,mBAA9D;IAQHW,UAAU,SAAVA,OAAU;WAAMJ,QAAQ,CAAR,EAAWzY,EAAX,CAAN;CARP;IAgBH8Y,UAAU,SAAVA,OAAU;WAAML,QAAQ,CAAR,EAAWzY,EAAX,CAAN;CAhBP;IAwBH+Y,UAAU,SAAVA,OAAU;WAAMN,QAAQ,CAAR,EAAWzY,EAAX,CAAN;CAxBP;IAgCHgZ,UAAU,SAAVA,OAAU;WAAMP,QAAQ,CAAR,EAAWzY,EAAX,CAAN;CAhCP;;ACjFA,IAQHiZ,QAAQ,SAARA,KAAQ;SAAMtY,OAAO;sCAAIL,IAAJ;UAAA;;;WAAaI,MAAMV,EAAN,EAAUmK,UAAQ7J,IAAR,CAAV,CAAb;GAAP,CAAN;CARL;IAgBH4Y,QAAQ,SAARA,KAAQ;SAAMnZ,MAAM,UAAC+G,CAAD,EAAIC,CAAJ,EAAOE,CAAP;WAAa1B,KAAKvF,EAAL,EAASiH,CAAT,EAAYF,CAAZ,EAAeD,CAAf,CAAb;GAAN,CAAN;CAhBL;IAwBHqS,QAAQ,SAARA,KAAQ;SAAMpZ,MAAM,UAAC+G,CAAD,EAAIC,CAAJ,EAAOE,CAAP,EAAUE,CAAV;WAAgB5B,KAAKvF,EAAL,EAASmH,CAAT,EAAYF,CAAZ,EAAeF,CAAf,EAAkBD,CAAlB,CAAhB;GAAN,CAAN;CAxBL;IAgCHsS,QAAQ,SAARA,KAAQ;SAAMrZ,MAAM,UAAC+G,CAAD,EAAIC,CAAJ,EAAOE,CAAP,EAAUE,CAAV,EAAaE,CAAb;WAAmB9B,KAAKvF,EAAL,EAASqH,CAAT,EAAYF,CAAZ,EAAeF,CAAf,EAAkBF,CAAlB,EAAqBD,CAArB,CAAnB;GAAN,CAAN;CAhCL;IAwCHuS,OAAO,SAAPA,IAAO;SAAMtZ,MAAM,UAACgH,CAAD,EAAID,CAAJ;WAAUvB,KAAKvF,EAAL,EAAS8G,CAAT,EAAYC,CAAZ,CAAV;GAAN,CAAN;CAxCJ;;ACJP;;;;;;;;;;;AAWA,AAAO,IAAMuS,KAAK,SAALA,EAAK;SAAKxX,CAAL;CAAX;;ACTA,IAUHyX,QAAQxZ,MAAM,UAACyZ,SAAD,EAAYC,SAAZ,EAAuBC,YAAvB,EAAwC;QAC9CnQ,SAASmQ,YAAb;WACO,CAACF,UAAUjQ,MAAV,CAAR,EAA2B;iBACdkQ,UAAUlQ,MAAV,CAAT;;WAEGA,MAAP;CALI,CAVL;;ACFP;;;;ACAA;;;;;;AAMA,AAMO,IAQHoQ,QAAQ9T,MAAM,UAAN,CARL;IAgBH+T,QAAQ/T,MAAM,UAAN,CAhBL;IAwBHgU,UAAUrO,YAAY,GAAZ,CAxBP;IAgCHsO,UAAUtO,YAAY,IAAZ,CAhCP;IAyCHuO,aAAa,SAAbA,UAAa,KAAM;oBACCrX,MAAhB,EAAwB,YAAxB,EAAsC,IAAtC,EAA4CiE,EAA5C;WACOA,GAAG,CAAH,EAAMqT,WAAN,KAAsBrT,GAAGsT,SAAH,CAAa,CAAb,CAA7B;CA3CD;IAqDHC,aAAa,SAAbA,UAAa,KAAM;oBACCxX,MAAhB,EAAwB,YAAxB,EAAsC,IAAtC,EAA4CiE,EAA5C;WACOA,GAAG,CAAH,EAAMwT,WAAN,KAAsBxT,GAAGsT,SAAH,CAAa,CAAb,CAA7B;CAvDD;IAmEHG,YAAY,SAAZA,SAAY,CAACzT,EAAD;QAAK0T,OAAL,uEAAe,WAAf;WAA+BvC,QACnCvN,KAAK,EAAL,CADmC,EAEnC3C,IAAI;eAAOsS,WAAWI,IAAIN,WAAJ,EAAX,CAAP;KAAJ,CAFmC,EAGnC5P,OAAO;eAAK,CAAC,CAACtI,CAAP;KAAP,CAHmC,EAInC+D,MAAMwU,OAAN,CAJmC,EAKrC1D,gBAAgBjU,MAAhB,EAAwB,WAAxB,EAAqC,IAArC,EAA2CiE,EAA3C,CALqC,CAA/B;CAnET;IAmFH4T,YAAYzC,QAAQoC,UAAR,EAAoBE,SAApB,CAnFT;;ACZP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}