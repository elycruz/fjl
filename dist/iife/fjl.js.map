{"version":3,"file":"fjl.js","sources":["../../src/function/curry.js","../../src/utils.js","../../src/jsPlatform/object.js","../../src/object/typeOf.js","../../src/object/is.js","../../src/object/lookup.js","../../src/jsPlatform/function.js","../../src/object/of.js","../../src/object/copy.js","../../src/object/searchObj.js","../../src/object/assignDeep.js","../../src/jsPlatform/list.js","../../src/function/negate.js","../../src/boolean.js","../../src/list/map.js","../../src/list/aggregation.js","../../src/list/utils.js","../../src/list/range.js","../../src/jsPlatform/array.js","../../src/jsPlatform/string.js","../../src/jsPlatform.js","../../src/list.js","../../src/object/setTheory.js","../../src/object/console.js","../../src/object/jsonClone.js","../../src/object/assocList.js","../../src/object/toArray.js","../../src/object.js","../../src/function/compose.js","../../src/function/flip.js","../../src/function/id.js","../../src/function/until.js","../../src/function/fnOrError.js","../../src/function/noop.js","../../src/function.js","../../src/errorThrowing.js","../../src/string.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf function\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\r\n\r\n/**\r\n * @private\r\n * @type {string}\r\n */\r\nconst\r\n\r\n    returnCurried = (executeArity, unmetArityNum, fn, argsToCurry) => {\r\n        switch (unmetArityNum) {\r\n            case 1:\r\n                return function func(x) {\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 2:\r\n                return function func(a, b) {\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 3:\r\n                return function func(a, b, c) {\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 4:\r\n                return function func(a, b, c, d) {\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 5:\r\n                return function func(a, b, c, d, e) {\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            default:\r\n                return (...args) => executeAsCurriedFunc(fn, executeArity, unmetArityNum, args, argsToCurry);\r\n        }\r\n    },\r\n    executeAsCurriedFunc = (fn, executeArity, unmetArity, args, argsToCurry) => {\r\n        let concatedArgs = argsToCurry.concat(args),\r\n            canBeCalled = (concatedArgs.length >= executeArity) || !executeArity,\r\n            newExpectedArity = executeArity - concatedArgs.length;\r\n        return !canBeCalled ?\r\n            returnCurried(executeArity, newExpectedArity, fn, concatedArgs) :\r\n            fn(...concatedArgs);\r\n    }\r\n;\r\n\r\nexport const\r\n\r\n    /**\r\n     * Curries a function up to a given arity.\r\n     * @function module:function.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     * @throws {Error} - When `fn` is not a function.\r\n     */\r\n    curryN = (executeArity, fn, ...argsToCurry) => {\r\n        if (!fn || !(fn instanceof Function)) {\r\n            throw new Error(`\\`curry*\\` functions expect first parameter to be of type \\`Function\\` though received ${fn}?`);\r\n        }\r\n        return returnCurried(executeArity, executeArity - argsToCurry.length, fn, argsToCurry);\r\n    },\r\n\r\n    /**\r\n     * Curries a function based on it's defined arity (note: rest args param (`...rest`) are not counted in arity).\r\n     * @function module:function.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => curryN((fn || {}).length, fn, ...argsToCurry),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (won't call function until 2 or more args).\r\n     * @function module:function.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (won't call function until 3 or more args).\r\n     * @function module:function.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (won't call function until 4 or more args).\r\n     * @function module:function.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5 (won't call function until 5 or more args).\r\n     * @function module:function.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","/**\r\n * @module utils\r\n */\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a function that takes an argument and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakesOne\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakesOne = name => curry((arg, f) => f[name](arg)),\r\n\r\n    /**\r\n     * Returns a function that takes 2 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes2\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes2 = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    /**\r\n     * Returns a function that takes 3 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes3\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes3 = name => curry((arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3)),\r\n\r\n    /**\r\n     * Returns a function that takes 4 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes4\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes4 = name => curry((arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4)),\r\n\r\n    /**\r\n     * Returns a function that takes 5 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes5\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes5 = name => curry((arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5)),\r\n\r\n    /**\r\n     * Returns a function that takes an object and one or more arguments on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakesOneOrMore\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakesOneOrMore = name => curry2((f, ...args) => f[name](...args))\r\n\r\n;\r\n","/**\r\n * @memberOf object\r\n * @description Defines some of the platform methods for objects (the ones used within `fjl`).\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\nimport {curry, curry2} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived object.\r\n     * @function module:_jsPlatformobject.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = curry((instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor),\r\n\r\n    /**\r\n     * @function module:_jsPlatformobject.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:_jsPlatformobject.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * Gets own enumerable keys of passed in object (`Object.keys`).\r\n     * @function module:_jsPlatformobject.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    {keys} = Object,\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:_jsPlatformobject.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() => Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            curry2((obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0))\r\n        )();\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\n/**\r\n * Returns the constructor/class/type name of a value.\r\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n * @note Returns 'Undefined' if value is `undefined`\r\n * @note Returns 'Null' if value is `null`\r\n * For values that have no concrete constructors and/or casters\r\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n * @function module:object.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (value === undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\n\r\nimport {typeOf} from './typeOf';\r\nimport {instanceOf, length, keys} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined',\r\n    _NaN = 'NaN';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @function module:object.toTypeRef\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    toTypeRef = type => {\r\n        if (!type) {\r\n            return typeOf(type);\r\n        }\r\n        else if (type.constructor === String || (type instanceof Function)) {\r\n            return type;\r\n        }\r\n        return typeOf(type);\r\n    },\r\n\r\n    toTypeRefName = Type => {\r\n        const ref = toTypeRef(Type);\r\n        return ref instanceof Function ? ref.name : ref;\r\n    },\r\n\r\n    /**\r\n     * Returns whether a value is a function or not.\r\n     * @function module:object.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = instanceOf(Function),\r\n\r\n    /**\r\n     * Strict type checker.  Checks if given value is a direct instance of given type;  E.g.,\r\n     * @example\r\n     *   isType(String, 'abcdefg')  === true // true\r\n     *   isType(String.name, 'abcdefg') === true\r\n     *   isType(Number, NaN) === false\r\n     *   isType(Number, 99) === true\r\n     *   isType('Null', 99) === false // though, for `null` and `undefined` checks\r\n     *                                // @see `isset`, in this module, instead\r\n     *   isType('Undefined', undefined) === true // true\r\n     *\r\n     * @note Useful where absolute types, or some semblance thereof, are required.\r\n     * @function module:object.isType\r\n     * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry((type, obj) => typeOf(obj) === toTypeRefName(type)),\r\n\r\n    /**\r\n     * Loose type checker;  E.g., If `type` is not a constructor, but a constructor name, does a type check on\r\n     * constructor names, else if first check fails and `type` is a constructor, performs an `instanceof` check\r\n     * on value with constructor.\r\n     * @note Use care when checking for `Array` and/or `Object` since the both are considered objects by `instanceof` checker.\r\n     * @note For `null` and `undefined` their class cased names can be used for type checks\r\n     * `isOfType('Null', null) === true (passes strict type check)` (or better yet `isset` can be used).\r\n     * @throwsafe - Doesn't throw on `null` or `undefined` `obj` values.\r\n     * @example\r\n     * isOfType(Number, 99) === true        // true  (passes strict type check (numbers are not instances of `Number`\r\n     *                                      //        constructor)\r\n     * isOfType('Number', 99) === true      // true  (passes strict type check)\r\n     * isOfType(Number, NaN) === true       // true. (passes instance of check)\r\n     *                                      //        If you want \"true\" strict type checking use `isType`\r\n     * isOfType(Object, []) === true        // true  (passes instance of check)\r\n     * isOfType(Array, []) === true         // true  (passes instance of check)\r\n     * isOfType(Object, {}) === true        // true  (passes instance of check)\r\n     * isOfType(Object.name, {}) === true   // true  (Passes strict type check)\r\n     * class Abc extends String {}\r\n     * isOfType(String, new Abc('abcd')) // true (passes instanceof check)\r\n     *\r\n     * @function module:is.isOfType\r\n     * @param type {Function|String} - Type reference (constructor or `constructor.name`).\r\n     * @param x {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isOfType = curry((type, x) => isType(type, x) || instanceOf(type, x)),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:object.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a boolean depicting whether a value is callable or not.\r\n     * @function module:object.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an array (same as `Array.isArray`).\r\n     * @function module:object.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    {isArray} = Array,\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:object.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = isType(_Object),\r\n\r\n    /**\r\n     * Checks if value is a boolean.\r\n     * @function module:object.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = isType(_Boolean),\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:object.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = isType(_Number),\r\n\r\n    /**\r\n     * Checks whether value is a string or not.\r\n     * @function module:object.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = isType(_String),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:object.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = isType(_Map),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:object.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = isType(_Set),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:object.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap =isType(_WeakMap),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:object.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = isType(_WeakSet),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:object.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = isType(_Undefined),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:object.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = isType(_Null),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:object.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = isType(_Symbol),\r\n\r\n    /**\r\n     * Checks if given `x` is set and of one of\r\n     *  [String, Boolean, Number, Symbol] (null and undefined are immutable\r\n     *  but are not \"usable\" (usually not what we want to operate on).\r\n     * @function module:object.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return isset(x) &&\r\n            [_String, _Number, _Boolean, _Symbol]\r\n                .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:object.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => !length(x),\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:object.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:object.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in value is empty;  I.e.,\r\n     *  check for one of '', 0, `null`, `undefined`, `false`, empty array, empty object, empty function (zero arity),\r\n     *  or empty collection (es6 Map, Set, WeakMap, or WeakSet etc. (`!value.size`);\r\n     * @function module:object.isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        if (!value) { // if '', 0, `null`, `undefined`, or `false` then is empty\r\n            return true;\r\n        }\r\n        switch (typeOf(value)) {\r\n            case _Array:\r\n            case _Function:\r\n                return !value.length;\r\n            case _Number: // zero and NaN checks happened above so `if number` then it's 'not-an-empty-number' (lol)\r\n                return false;\r\n            case _Object:\r\n                return !keys(value).length;\r\n            case _Map:\r\n            case _Set:\r\n            case _WeakSet:\r\n            case _WeakMap:\r\n                return !value.size;\r\n            case _NaN:\r\n                return true;\r\n            default:\r\n                return !value;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null or not.\r\n     * @function module:object.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => x !== null && x !== undefined;\r\n","/**\r\n * @memberOf object\r\n */\r\n\r\nimport {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Looks up property and returns it's value; Else `undefined`.\r\n * Method is null safe (will not throw on `null` or `undefined`).\r\n * @function module:object.lookup\r\n * @param key {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\r\nexport const lookup = curry((key, obj) => isset(obj) ? obj[key] : undefined);\r\n","import {curry, curry2} from '../function/curry';\r\n\r\n/**\r\n * Created by elydelacruz on 9/7/2017.\r\n * @module _jsPlatform_function\r\n * @private\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:_jsPlatform_function.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry((fn, args) => fn.apply(null, args)),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:_jsPlatform_function.call\r\n     * @param fn {Function}\r\n     * @param args {...*}\r\n     * @returns {*}\r\n     */\r\n    call = curry2((fn, ...args) => apply(fn, args));\r\n","import {isFunction, isset, isUsableImmutablePrimitive} from './is';\r\nimport {hasOwnProperty} from '../jsPlatform/object';\r\nimport {apply} from '../jsPlatform/function';\r\n\r\n/**\r\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n * @example\r\n * // - If exists `(value).constructor.of` uses this.\r\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\r\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n * // - Else if constructor is a function, thus far, then calls constructor using\r\n * //      the `new` keyword (with any passed in args).\r\n\r\n * @function module:object.of\r\n * @param x {*} - Value to derive returned value's type from.\r\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n */\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","import {typeOf} from './typeOf';\r\nimport {of} from './of';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Make a copy of a value or optionally copy incoming value onto an outgoing value (second parameter).\r\n     * @note If incoming thing is an immmutable primitive (string, number, symbol, null, undefined, boolean)\r\n     *  it is returned as is.\r\n     * @function module:object.copy\r\n     * @param x {*} - Thing to copy.\r\n     * @param [out = undefined] {*} - Optional value to copy on to.  Not required.\r\n     * @returns {*} - Copied thing or optionally outgoing value copied onto.\r\n     */\r\n    copy = (x, out) => {\r\n        // if `null`, `undefined`, `''`, `0`, `false` return\r\n        if (!x) { return x; }\r\n        switch (typeOf(x)) {\r\n            case Array.name:\r\n                return !out ? x.slice(0) : Object.assign(out, x);\r\n\r\n            // If immutable primitive, return it\r\n            case Symbol.name:\r\n            case Boolean.name:\r\n            case String.name:\r\n            case Number.name:\r\n            case Promise.name:\r\n            case Function.name:\r\n            case 'NaN':\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return x;\r\n\r\n            case 'Map':\r\n            case 'Set':\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n                return new x.constructor(Array.from(x));\r\n\r\n            // Else make copy\r\n            default:\r\n                return Object.assign(!out ? of(x) : out, x);\r\n        }\r\n    }\r\n;\r\n\r\nexport default copy;\r\n","import {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Gives you value at key/namespace-key within `obj`;  E.g.,\r\n     * searchObj('all.your.base', {all: {your: {base: 99}}}) === 99 // `true`\r\n     * @note If key is unreachable (undefined) returns `undefined`.\r\n     *  Useful in cases where we do not want to check each key along the way before getting/checking value;  E.g.,\r\n     * @example\r\n     * ```\r\n     * if (obj && obj.all && obj.all.your && obj.all.your.base) {\r\n     *   // Thing we want to do\r\n     * }\r\n     *\r\n     * // So with our function becomes\r\n     * if (searchObj('all.your.base', obj)) {\r\n     *   // Thing we want to do\r\n     * }\r\n     * ```\r\n     * @function module:object.searchObj\r\n     * @param nsString {String}\r\n     * @param obj {*}\r\n     * @returns {*}\r\n     */\r\n    searchObj = curry((nsString, obj) => {\r\n        if (!obj) { return obj; }\r\n        if (nsString.indexOf('.') === -1) {\r\n            return obj[nsString];\r\n        }\r\n        const parts = nsString.split('.'),\r\n            limit = parts.length;\r\n        let ind = 0,\r\n            parent = obj;\r\n        for (; ind < limit; ind += 1) {\r\n            const node = parent[parts[ind]];\r\n            if (!isset(node)) {\r\n                return node;\r\n            }\r\n            parent = node;\r\n        }\r\n        return parent;\r\n    })\r\n;\r\n","\r\nimport {isObject} from './is';\r\nimport {keys, hasOwnProperty} from '../jsPlatform/object';\r\nimport {curry2} from '../function/curry';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one (takes two or more args).\r\n     * @function module:object.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param [objs] {...{Object}} - One or more objects to merge onto `obj0`.\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = curry2((obj0, ...objs) =>\r\n        !obj0 ? obj0 : objs.reduce((topAgg, obj) =>\r\n            !obj ? topAgg : keys(obj).reduce((agg, key) => {\r\n                let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                // If property is not writable move to next item in collection\r\n                if (hasOwnProperty(key, agg) && propDescription &&\r\n                    !(propDescription.get && propDescription.set) &&\r\n                    !propDescription.writable) {\r\n                    return agg;\r\n                }\r\n                if (isObject(agg[key]) && isObject(obj[key])) {\r\n                    assignDeep(agg[key], obj[key]);\r\n                }\r\n                else { agg[key] = obj[key]; }\r\n                return agg;\r\n            }, topAgg)\r\n        , obj0));\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n *      on both strings and arrays.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:_jsPlatform_list.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:_jsPlatform_list.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:_jsPlatform_list.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:_jsPlatform_list.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:_jsPlatform_list.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\nimport {apply} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Negates a function that takes one/no argument.\r\n     * @function module:function.negateF\r\n     * @param fn {Function}\r\n     * @returns {function(*=): boolean}\r\n     */\r\n    negateF = fn => x => !fn(x),\r\n\r\n    /**\r\n     * Takes a function that takes two parameters and returns a negated version of given\r\n     * function.\r\n     * @function module:_negate.negateF2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF2 = fn => curry((a, b) => !fn(a, b)),\r\n\r\n    /**\r\n     * Takes a function that takes three parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF3 = fn => curry((a, b, c) => !fn(a, b, c)),\r\n\r\n    /**\r\n     * Returns a negated version of given function.\r\n     * Returned function is variadiac (takes one or more arguments).\r\n     * @note function returned is uncurried.\r\n     * @uncurried\r\n     * @function module:function.negateFN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFN = fn => curry2((...args) => !apply(fn, args));\r\n","/**\r\n * @module boolean\r\n * @description Contains functional version of 'always-true', 'always-false', 'is-truthy', and 'is-falsy'.\r\n */\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:boolean.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:boolean.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value,\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:boolean.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:boolean.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false,\r\n\r\n    /**\r\n     * Equality operator.\r\n     * @function module:boolean.equal\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {boolean}\r\n     */\r\n    equal = curry((a, b) => a === b),\r\n\r\n    /**\r\n     * Equality operator for all.\r\n     * @function module:boolean.equalAll\r\n     * @param a {*} - Item `0`.\r\n     * @param args {...*} - Others\r\n     * @returns {boolean}\r\n     */\r\n    equalAll = curry2((a, ...args) => args.every(b => equal(a, b)))\r\n\r\n;\r\n","import {length} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * @function module:list.map\r\n * @param fn {Function} - Function to map on array.\r\n * @param xs {Array}\r\n * @returns {Array}\r\n */\r\nconst map = curry((fn, xs) =>  {\r\n    let ind = 0,\r\n        limit = length(xs),\r\n        out = [];\r\n    if (!limit) { return out; }\r\n    while (ind < limit) {\r\n        out.push(fn(xs[ind], ind, xs));\r\n        ind += 1;\r\n    }\r\n    return out;\r\n});\r\n\r\nexport default map;\r\n","\r\nexport const\r\n\r\n    /**\r\n     * Pushes incoming `item` onto array (`agg`) and return array (`agg`).\r\n     * @private\r\n     * @param agg {Array}\r\n     * @param item {*}\r\n     * @returns {Array}\r\n     */\r\n    aggregateArr$ = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    }\r\n\r\n;\r\n","/**\r\n * List operator utils module.\r\n * @module _listOpUtils.\r\n * @private\r\n */\r\nimport {apply}          from '../jsPlatform/function';  // un-curried version\r\nimport {slice}          from '../jsPlatform/list';      // un-curried version good for both strings and arrays\r\nimport {length}         from '../jsPlatform/object';\r\nimport {alwaysFalse}    from '../boolean';\r\nimport map              from './map';\r\nimport {curry, curry2}  from '../function/curry';\r\n\r\nexport * from './aggregation';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @function module:listUtils.sliceFrom\r\n     * @param startInd {Number}\r\n     * @param arr {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = curry((startInd, arr) => slice(startInd, undefined, arr)),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @function module:listUtils.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = curry((toInd, xs) => slice(0, toInd, xs)),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function _listOpUtils.sliceCopy\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceCopy = sliceFrom(0),\r\n\r\n    /**\r\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n     * @function module:listUtils.genericAscOrdering\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {number}\r\n     */\r\n    genericAscOrdering = curry((a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    }),\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @function module:listUtils.lengths\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = curry2((...lists) => map(length, lists)),\r\n\r\n    /**\r\n     * Returns a list of lists trimmed to the shortest length in given list of lists.   @background This method is used by the `zip*` functions to achieve their\r\n     *  'slice to smallest' functionality.\r\n     * @function module:listUtils.toShortest\r\n     * @param lists {...(Array|String|*)}\r\n     * @returns {Array|String|*}\r\n     */\r\n    toShortest = curry2((...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : sliceCopy(list), lists);\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate.\r\n     * @param pred\r\n     * @param op\r\n     * @param agg\r\n     * @param arr\r\n     * @returns {*}\r\n     */\r\n    reduceUntil = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate (from the right).\r\n     * @param pred\r\n     * @param op\r\n     * @param agg\r\n     * @param arr\r\n     * @returns {*}\r\n     */\r\n    reduceUntilRight = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    reduce = reduceUntil(alwaysFalse),\r\n\r\n    reduceRight = reduceUntilRight(alwaysFalse),\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:listOpUtils.lastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:listOpUtils.findIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = curry((pred, arr) => {\r\n        let ind = 0;\r\n        const limit = length(arr);\r\n        for (; ind < limit; ind += 1) {\r\n            const predicateFulfilled = !!pred(arr[ind], ind, arr);\r\n            if (predicateFulfilled) {\r\n                return ind;\r\n            }\r\n        }\r\n        return -1;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:listOpUtils.findIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = curry((pred, arr) => {\r\n        let ind = length(arr) - 1;\r\n        for (; ind >= 0; ind -= 1) {\r\n            const predicateFulfilled = !!pred(arr[ind], ind, arr);\r\n            if (predicateFulfilled) {\r\n                return ind;\r\n            }\r\n        }\r\n        return -1;\r\n    }),\r\n\r\n    /**\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = curry((pred, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out.length ? out : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listOpUtils.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    })\r\n\r\n;\r\n","/**\r\n * @module object\r\n */\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Normalizes step for `from` and `to` combination.\r\n * @function module:list.normalizeStep\r\n * @param from {Number}\r\n * @param to {Number}\r\n * @param [step = 1] {Number}\r\n * @returns {Number}\r\n * @private\r\n */\r\nconst normalizeStep = (from, to, step) => {\r\n    if (from > to) {\r\n        return step > 0 ? -step : step; // make step negative\r\n    }\r\n    return step < 0 ? -1 * step : step; // make step positive\r\n};\r\n\r\nexport const\r\n\r\n    /**\r\n     * @note normalizes `step` to be of valid\r\n     *  direction (negative if range required is in the negative direction\r\n     *  and positive otherwise).\r\n     * @function module:list.range\r\n     * @param from {Number}\r\n     * @param to {Number}\r\n     * @param [step = 1] {Number}\r\n     * @returns {Array.<Number>}\r\n     */\r\n    range = curry((from, to, step = 1) => {\r\n        let i = from;\r\n        const out = [];\r\n        step = normalizeStep(from, to, step);\r\n        if (step === 0 || from === to) { return [from]; }\r\n        for (; (to - i) * step >= 0; i += step) { out.push(i); }\r\n        return out;\r\n    })\r\n;\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n * @module _jsPlatform_arrayOps\r\n * @private\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Array.prototype.reverse generator (generates a function that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, []),\r\n\r\n    /**\r\n     * Maps a function to functor (list etc.).\r\n     * @function module:_jsPlatform_array.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from the right with passed in function.\r\n     * @function module:_jsPlatform_array.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an list (shimmed if not exists).\r\n     * @function module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:_string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * @module jsPlatform_\r\n * @private\r\n */\r\nexport * from './jsPlatform/object';\r\nexport * from './jsPlatform/array';\r\nexport * from './jsPlatform/list';\r\nexport * from './jsPlatform/string';\r\nexport * from './jsPlatform/function';\r\n","/**\r\n * List operations module.\r\n * @module list\r\n */\r\nimport {concat as listAppend, indexOf, slice, includes} from './jsPlatform/list';\r\nimport {apply}              from './jsPlatform/function';\r\nimport {negateF3, negateF2}   from './function/negate';\r\nimport {curry, curry2, curry3} from './function/curry';\r\nimport {isTruthy, isFalsy} from './boolean';\r\nimport {lookup, length, of, isString}       from './object';\r\nimport map                  from './list/map';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    toShortest, aggregateArr$,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, sliceCopy, genericAscOrdering\r\n}\r\n    from './list/utils';\r\n\r\nexport * from './list/range';\r\n\r\nexport {map};\r\n\r\nexport {slice, includes, indexOf, lastIndexOf, push} from './jsPlatform';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Append two, or more, lists, i.e.,\r\n     * @example\r\n     * expectEqual(append(take(13, alphabetString), drop(13, alphabetString)), alphabetString); // true\r\n     *\r\n     * // Another example\r\n     * const result = append(\r\n     *   alphabetStr.split(''),\r\n     *   alphabetStr.split('')\r\n     * ),\r\n     * expected = repeat(2, alphabetStr).split('');\r\n     *\r\n     * shallowEquals(result, expected) === true // `true`\r\n     *\r\n     * @function module:list.append\r\n     * @param [args] {...(Array|String|*)} - One or more lists or list likes (strings etc.).\r\n     * @returns {(Array|String|*)} - Same type as list like passed in.\r\n     */\r\n    append = curry2((...args) => apply(listAppend, args)),\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:list.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:list.last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:list.tail\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:list.init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:list.uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|undefined}\r\n     */\r\n    uncons = xs =>\r\n        !xs || length(xs) === 0 ? undefined : [head(xs), tail(xs)],\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:list.unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    unconsr = xs => !xs || length(xs) === 0 ? undefined : [init(xs), last(xs)],\r\n\r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:list.concat\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    concat = xs => {\r\n        switch (length(xs)) {\r\n            case undefined:\r\n            case 0:\r\n                return [];\r\n            case 1:\r\n                return xs[0] && xs[0].slice ? sliceCopy(xs[0]) : xs[0];\r\n            case 2:\r\n            default:\r\n                return apply(append, xs);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:list.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array}\r\n     * @returns {Array}\r\n     */\r\n    concatMap = curry((fn, foldableOfA) => concat(map(fn, foldableOfA))),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:list.reverse\r\n     * @param x {Array}\r\n     * @returns {Array}\r\n     */\r\n    reverse = x => foldr((agg, item) => (agg.push(item), agg), [], x),\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:list.intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array} - List.\r\n     * @returns {Array}\r\n     */\r\n    intersperse = curry((between, arr) => {\r\n        const limit = length(arr),\r\n            lastInd = limit - 1,\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        return foldl((agg, item, ind) => {\r\n            if (ind === lastInd) {\r\n                agg.push(item);\r\n            }\r\n            else {\r\n                agg.push(item, between);\r\n            }\r\n            return agg;\r\n        }, out, arr);\r\n    }),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:list.intercalate\r\n     * @param xs {Array}\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    intercalate = curry((xs, xss) => concat(intersperse(xs, xss))),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:list.transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return [];\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return filter(x => length(x) > 0, outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:list.subsequences\r\n     * @jsperftest https://jsperf.com/subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array.<Array>}\r\n     */\r\n    subsequences = xs => {\r\n        const listLen = length(xs),\r\n            len = Math.pow(2, listLen),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            let entry = [];\r\n            for (let j = 0; j < listLen; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with the given indices swapped.\r\n     * @function module:list.swapped\r\n     * @param ind1 {Number}\r\n     * @param ind2 {Number}\r\n     * @param list {Array}\r\n     * @returns {Array} - Copy of incoming with swapped values at indices.\r\n     */\r\n    swapped = curry((ind1, ind2, list) => {\r\n        const out = sliceCopy(list),\r\n            tmp = out[ind1];\r\n        out[ind1] = out[ind2];\r\n        out[ind2] = tmp;\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Returns a list of permutations for passed in list.\r\n     *  Use caution with lists above a length of 15 (will take long due to nature of\r\n     *  algorithm).\r\n     * @function module:list.permutations\r\n     * @param xs {Array} - List.\r\n     * @returns {Array<Array|String|*>} - Array of permutations.\r\n     */\r\n    permutations = xs => {\r\n        const limit = length(xs);\r\n\r\n        if (!limit || limit === 1) {\r\n            return [xs];\r\n        }\r\n\r\n        let list = sliceCopy(xs),\r\n            c = repeat(limit, 0),\r\n            i = 0;\r\n\r\n        const out = [list];\r\n\r\n        for (; i < limit; i++) {\r\n            if (c[i] < i) {\r\n                list = swapped(i % 2 === 0 ? 0 : c[i], i, list);\r\n                out.push(list);\r\n                c[i] += 1;\r\n                i = 0;\r\n                continue;\r\n            }\r\n            c[i] = 0;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\r\n     * @function module:list.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldl = reduce,\r\n\r\n    /**\r\n     * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\r\n     * @function module:list.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldr = reduceRight,\r\n\r\n    /**\r\n     * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldl1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldl1 = curry((op, xs) => {\r\n        const parts = uncons(xs);\r\n        return !parts ? [] : reduce(op, parts[0], parts[1]);\r\n    }),\r\n\r\n    /**\r\n     * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldr1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldr1 = curry((op, xs) => {\r\n        const parts = unconsr(xs);\r\n        return !parts ? [] : reduceRight(op, parts[1], parts[0]);\r\n    }),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * iterate f x returns an infinite list of repeated applications of f to x.\r\n     * @function module:list.iterate\r\n     * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation.\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry((limit, op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            lastX = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out.push(lastX);\r\n            lastX = op(lastX, ind);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times.\r\n     * @function module:list.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    repeat = curry((limit, x) => iterate(limit, a => a, x)),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:list.replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    replicate = repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:list.cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    cycle = curry((limit, xs) => concat(replicate(limit, xs))),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:list.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry((op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:list.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:list.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:list.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry((x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry((value, xs) => findIndices(x => x === value, xs)),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:list.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = sliceTo,\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:list.drop\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = sliceFrom,\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:list.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String} - functor (list or string) to split.\r\n     * @returns {Array|String} - List like type passed\r\n     */\r\n    splitAt = (ind, list) => [ sliceTo(ind, list), sliceFrom(ind, list) ],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:list.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry((pred, list) =>\r\n        reduceUntil(\r\n            negateF3(pred),  // predicate\r\n            aggregateArr$,   // operation\r\n            [],             // aggregator\r\n            list\r\n        )),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:list.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry((pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere(\r\n                    (x, i, xs) => !pred(x, i, xs),\r\n                    list\r\n                );\r\n\r\n        return splitPoint === -1 ?\r\n            sliceFrom(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.dropWhileEnd\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry((pred, list) => {\r\n        const splitPoint =\r\n                findIndexWhereRight(\r\n                    (x, i, xs) => !pred(x, i, xs),\r\n                    list\r\n                );\r\n\r\n        if (splitPoint === -1) {\r\n            return of(list);\r\n        }\r\n\r\n        const out = reverse(list);\r\n        return sliceTo(\r\n            splitPoint + 1,\r\n            isString(list) ? out.join('') : out\r\n        );\r\n    }),\r\n\r\n    span = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(negateF3(pred), list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * breakOnList, applied to a predicate p and a list xs, returns a tuple\r\n     * where first element is longest prefix (possibly empty) of xs of elements\r\n     * that do not satisfy p and second element is the remainder of the list:\r\n     * @haskellExample\r\n     * Replace `break` with `breakOnList` for our version.\r\n     * ```\r\n     * break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\r\n     * break (< 9) [1,2,3] == ([],[1,2,3])\r\n     * break (> 9) [1,2,3] == ([1,2,3],[])\r\n     * ```\r\n     * @function module:list.breakOnList\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    breakOnList = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(pred, list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * Gets item at index.\r\n     * @function module:list.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*|undefined} - Item or `undefined`.\r\n     */\r\n    at = lookup,\r\n\r\n    /**\r\n     * Find an item in structure of elements based on given predicate (`pred`).\r\n     * @function module:list.find\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*} - Found item.\r\n     */\r\n    find = findWhere,\r\n\r\n    /**\r\n     * For each function (same as `[].forEach` except in functional format).\r\n     * @function module:list.forEach\r\n     * @param fn {Function} - Operation (`(element, index, list) => {...}`, etc.)\r\n     * @param xs {(Array|String)}\r\n     * @returns {void}\r\n     */\r\n    forEach = curry((fn, list) => {\r\n        const limit = length(list);\r\n        if (!limit) {\r\n            return;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            fn(list[ind], ind, list);\r\n        }\r\n    }),\r\n\r\n    /**\r\n     * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\r\n     * @function module:list.filter\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array} - Structure of filtered elements.\r\n     */\r\n    filter = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out.push(xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateF3(p), xs)]`.\r\n     * @function module:list.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry((pred, list) =>\r\n        !length(list) ?\r\n            [[], []] :\r\n                [filter(pred, list), filter(negateF3(pred), list)]),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether an element exists in given structure of elements.\r\n     * @function module:list.elem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    elem = includes,\r\n\r\n    /**\r\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\r\n     * @function module:list.notElem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    notElem = negateF2(includes),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a prefix of list `xs2`\r\n     * @function module:list.isPrefixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isPrefixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a suffix of list `xs2`\r\n     * @function module:list.isSuffixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSuffixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is an infix of list `xs2`\r\n     * @function module:list.isInfixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isInfixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a sub-sequence of list `xs2`\r\n     * @function module:list.isSubsequenceOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSubsequenceOf = curry((xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:list.group\r\n     * @param xs {Array|String}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    group = xs => groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:list.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry((equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return sliceCopy(xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    }),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(inits('abc'), ['','a','ab','abc'])\r\n     * ```\r\n     * @function module:list.inits\r\n     * @haskellType `inits :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => init(list), xs),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\r\n     * ```\r\n     * @function module:list.tails\r\n     * @haskellType `tails :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => tail(list), xs),\r\n\r\n    /**\r\n     * Strips prefix list from given list\r\n     * @function module:list.stripPrefix\r\n     * @param prefix {Array|String|*}\r\n     * @param list {Array|string|*}\r\n     * @returns {Array|*}\r\n     */\r\n    stripPrefix = curry((prefix, list) =>\r\n        isPrefixOf(prefix, list) ?\r\n            splitAt(length(prefix), list)[1] :\r\n            sliceCopy(list)),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:list.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry((arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = toShortest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:list.zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    zipN = curry2((...lists) => {\r\n        const trimmedLists = apply(toShortest, lists);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:list.zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip3 = curry((arr1, arr2, arr3) => zipN(arr1, arr2, arr3)),\r\n\r\n    /**\r\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:list.zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip4 = curry((arr1, arr2, arr3, arr4) => zipN(arr1, arr2, arr3, arr4)),\r\n\r\n    /**\r\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:list.zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @param arr5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip5 = curry((arr1, arr2, arr3, arr4, arr5) => zipN(arr1, arr2, arr3, arr4, arr5)),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:list.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry((op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = toShortest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:list.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = curry3((op, ...lists) => {\r\n        const trimmedLists = apply(toShortest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, apply(op, map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:list.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = curry((op, xs1, xs2, xs3) => zipWithN(op, xs1, xs2, xs3)),\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:list.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = curry((op, xs1, xs2, xs3, xs4) => zipWithN(op, xs1, xs2, xs3, xs4)),\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:list.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @param xs5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = curry((op, xs1, xs2, xs3, xs4, xs5) => zipWithN(op, xs1, xs2, xs3, xs4, xs5)),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @function module:list.unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    unzip = foldl((agg, item) => {\r\n            agg[0].push(item[0]);\r\n            agg[1].push(item[1]);\r\n            return agg;\r\n        }, [[], []]),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @function module:list.unzipN\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    /**\r\n     * Returns true if any item in container passes predicate `p`.\r\n     * @function module:list.any\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    any = curry((p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Returns true if all items in container pass predicate `p`.\r\n     * @function module:list.all\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    all = curry((p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Conjuction of container of bools (or truthy and/or falsy values);  Returns\r\n     * `true` if all in container are 'truthy' else returns `false`\r\n     * @function module:list.and\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    and = xs => all(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether any item in container is 'truthy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.or\r\n     * @haskellType `or :: Bool -> Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    or = xs => any(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether all items in container are 'falsy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.not\r\n     * @haskellType `not :: Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    not = xs => all(isFalsy, xs),\r\n\r\n    /**\r\n     * Computes the sum of the numbers of a structure.\r\n     * @function module:list.sum\r\n     * @haskellType `sum :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    sum = list => foldl((agg, x) => agg + x, 0, list),\r\n\r\n    /**\r\n     * Computes the product of the numbers of a structure.\r\n     * @function module:list.product\r\n     * @haskellType `product :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    product = list => foldl((agg, x) => agg * x, 1, list),\r\n\r\n    /**\r\n     * Returns the largest element in a non-empty structure of elements.\r\n     * @function module:list.maximum\r\n     * @haskellType `maximum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    maximum = list => last(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * Returns the smallest element in a non-empty structure of elements.\r\n     * @function module:list.minimum\r\n     * @haskellType `minimum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    minimum = list => head(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\r\n     * ```\r\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\r\n     * ```\r\n     * Also note that:\r\n     * ```\r\n     * last (scanl f z xs) == foldl f z xs.\r\n     * ```\r\n     * @function module:list.scanl\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            result = zero,\r\n            out = [];\r\n        while (ind < limit) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind++;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `scanl1` is a variant of `scanl` that has no starting value argument:\r\n     * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\r\n     * @function module:list.scanl1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) { return []; }\r\n        return scanl(fn, head(xs), tail(xs));\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanl` but from the right (similiar to `foldr`'s relationship to `foldl`).\r\n     * Note also `scanr`'s relationship ot `foldr`:\r\n     * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\r\n     * @function module:list.scanr\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = limit - 1,\r\n            result = xs[0],\r\n            out = [];\r\n        while (ind > -1) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind--;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanr` but takes no zero/accumulator value.\r\n     * @function module:list.scanr1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) { return []; }\r\n        return scanr(fn, last(xs), init(xs));\r\n    }),\r\n\r\n    /**\r\n     * The nub function removes duplicate elements from a list.\r\n     * In particular, it keeps only the first occurrence of each element.\r\n     * (The name nub means `essence'.) It is a special case of nubBy, which\r\n     * allows the programmer to supply their own equality test.\r\n     * ```shallowCompare( nub ([1,2,3,4,3,2,1,2,4,3,5]), [1,2,3,4,5] )```\r\n     * @function module:list.nub\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nub = list => nubBy((a, b) => a === b, list),\r\n\r\n    /**\r\n     * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\r\n     * For example, `remove('a', 'banana') === 'bnana';`\r\n     * @function module:list.remove\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    remove = curry((x, list) => removeBy((a, b) => a === b, x, list)),\r\n\r\n    /**\r\n     * The sort function implements a stable sorting algorithm.\r\n     * It is a special case of sortBy, which allows the programmer\r\n     * to supply their own comparison function.\r\n     * ```shallowCompare(sort ([1,6,4,3,2,5]), [1,2,3,4,5,6]) // true```\r\n     * @function module:list.sort\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sort = xs => sortBy(genericAscOrdering, xs),\r\n\r\n    /**\r\n     * Sort a list by comparing the results of a key function applied to each\r\n     * element. sortOn f is equivalent to sortBy (comparing f), but has the\r\n     * performance advantage of only evaluating f once for each element in the\r\n     * input list. This is called the decorate-sort-undecorate paradigm, or\r\n     * Schwartzian transform.\r\n     *\r\n     * Elements are arranged from from lowest to highest, keeping duplicates\r\n     * in the order they appeared in the input.\r\n     *\r\n     * Ex:\r\n     * ```\r\n     * shallowEquals(\r\n     *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\r\n     *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\r\n     * ) // true\r\n     * ```\r\n     * @function module:list.sortOn\r\n     * @param valueFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sortOn = curry((valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            sortBy(\r\n                // Ordering\r\n                ([a0], [b0]) => genericAscOrdering(a0, b0),\r\n\r\n                // Decorate\r\n                map(item => [valueFn(item), item], xs)\r\n            )\r\n        )\r\n    ),\r\n\r\n    /**\r\n     * The sortBy function is the non-overloaded (in haskell terms) version of sort.\r\n     * @haskellExample ```\r\n     *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\r\n     *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\r\n     * ```\r\n     * @function module:list.sortBy\r\n     * @param orderingFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sortBy = curry((orderingFn, xs) => sliceCopy(xs).sort(orderingFn || genericAscOrdering)),\r\n\r\n    /**\r\n     * The insert function takes an element and a list and inserts the element\r\n     * into the list at the first position where it is less than or equal to the\r\n     * next element. In particular, if the list is sorted before the call, the\r\n     * result will also be sorted. It is a special case of insertBy, which allows\r\n     * the programmer to supply their own comparison function.\r\n     * @function module:list.insert\r\n     * @param x {*}\r\n     * @param xs {Array|*}\r\n     * @returns {Array}\r\n     */\r\n    insert = curry((x, xs) => {\r\n        if (!length(xs)) {\r\n            return [x];\r\n        }\r\n        const foundIndex = findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? [x] :\r\n            concat(intersperse([x], splitAt(foundIndex, xs)));\r\n    }),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:list.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` means 'something that is order-able'\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array} - List to insert into (note new list is returned)\r\n     * @returns {Array} - New list.\r\n     */\r\n    insertBy = curry((orderingFn, x, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return [x];\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = splitAt(ind, xs);\r\n                return concat([parts[0], [x], parts[1]]);\r\n            }\r\n        }\r\n        return aggregateArr$(sliceCopy(xs), x);\r\n    }),\r\n\r\n    /**\r\n     * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\r\n     * @function module:list.nubBy\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nubBy = curry((pred, list) => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = [],\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out.push(currItem);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Behaves the same as `remove`, but takes a user-supplied equality predicate.\r\n     * @function module:list.removeBy\r\n     * @param pred {Function} - Equality predicate `(a, b) => bool`\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeBy = curry((pred, x, list) => {\r\n        const foundIndex = findIndex(item => pred(x, item), list);\r\n        if (foundIndex > -1) {\r\n            const parts = splitAt(foundIndex, list);\r\n            return append(parts[0], tail(parts[1]));\r\n        }\r\n        return sliceCopy(list);\r\n    }),\r\n\r\n    /**\r\n     * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\r\n     * occurrence of each element of the second list removed.\r\n     * @function module:list.removeFirstBy\r\n     * @param pred {Function}\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeFirstsBy = curry((pred, xs1, xs2) =>\r\n        foldl((agg, x) => removeBy(pred, x, agg), xs1, xs2)),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:list.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    unionBy = curry((pred, arr1, arr2) =>\r\n        foldl((agg, b) => {\r\n                const alreadyAdded = any(a => pred(a, b), agg);\r\n                return !alreadyAdded ? (agg.push(b), agg) : agg;\r\n            }, sliceCopy(arr1), arr2\r\n        )),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:list.union\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    union = curry((arr1, arr2) =>\r\n        append(arr1,\r\n            filter(elm => !includes(elm, arr1), arr2))),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:list.intersect\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    intersect = curry((arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            filter(elm => includes(elm, arr2), arr1)),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:list.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array}\r\n     * @param list2 {Array}\r\n     * @return {Array}\r\n     */\r\n    intersectBy = curry((pred, list1, list2) =>\r\n        foldl((agg, a) =>\r\n                any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg\r\n            , [], list1)),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:list.difference\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    difference = curry((array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return sliceCopy(array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? (agg.push(elm), agg) : agg\r\n            , [], array1);\r\n    }),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:list.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = curry2((arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays));\r\n\r\n/**\r\n * Same as `Array.prototype.slice` though is functional version.\r\n * @function module:object.slice\r\n * @param fromIndex {Number}\r\n * @param toIndex {Number}\r\n * @param arr {Array}\r\n * @returns {Array}\r\n */\r\n\r\n/**\r\n * Same as `Array.prototype.includes` (functional version).\r\n * @function module:list.includes\r\n * @param value {*} - Value to search for.\r\n * @param xs {Array|String}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * Same as `Array.prototype.indexOf`.\r\n * @function module:list.indexOf\r\n * @param x {*} - Element to search for.\r\n * @param xs {Array|String|*} - list or list like to look in.\r\n * @returns {Number} - `-1` if element not found else index at which it is found.\r\n */\r\n\r\n/**\r\n * Same as `Array.prototype.lastIndexOf` (fp version).\r\n * @function module:list.lastIndexOf\r\n * @param x {*} - Element to search for.\r\n * @param xs {Array|String|*} - list or list like to look in.\r\n * @returns {Number} - `-1` if element not found else index at which it is found.\r\n */\r\n\r\n/**\r\n * Same as Array.prototype.push (though is functional version).\r\n * @function module:list.push\r\n * @param item {*}\r\n * @param arr {Array}\r\n * @returns {Number}\r\n */\r\n","import {assignDeep} from './assignDeep';\r\nimport {hasOwnProperty, keys} from '../jsPlatform/object';\r\nimport {foldl} from '../list';\r\nimport {curry, curry2} from '../function/curry';\r\n\r\nexport const\r\n\r\n    objUnion = curry((obj1, obj2) => assignDeep(obj1, obj2)),\r\n\r\n    objIntersect = curry((obj1, obj2) => foldl((agg, key) => {\r\n        if (hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objDifference = curry((obj1, obj2) => foldl((agg, key) => {\r\n        if (!hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objComplement = curry2((obj0, ...objs) => foldl((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs));\r\n","/**\r\n * @module console\r\n * @description Console exports.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * `Console.log` method.\r\n     * @function module:console.log\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    log = console.log.bind(console),\r\n\r\n    /**\r\n     * `Console.error` method.\r\n     * @function module:console.error\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    error = console.error.bind(console),\r\n\r\n    /**\r\n     * Peeks (console.log) at incoming value(s) and returns the last value.\r\n     * @function module:console.peek\r\n     * @param args {...*}\r\n     * @returns {*} Last given value (if one or more values) else first value.\r\n     */\r\n    peek = (...args) => (log(...args), args.pop())\r\n\r\n;\r\n","export const\r\n\r\n    /**\r\n     * Clones and object or array using `JSON.parse(JSON.stringify(...))` pattern.\r\n     * @function module:object.jsonClone\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    jsonClone = x => JSON.parse(JSON.stringify(x))\r\n\r\n;\r\n","import {isArray, isType} from './is';\r\nimport {keys} from '../jsPlatform/object';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns an associated list from given object.\r\n     * @note Useful for working with plain javascript objects.\r\n     * @function module:object.toAssocList\r\n     * @param obj {(Object|Array|*)}\r\n     * @returns {Array.<*, *>}\r\n     */\r\n    toAssocList = obj => keys(obj).map(key => [key, obj[key]]),\r\n\r\n    /**\r\n     * Returns an associated list from given object (deeply (on incoming object's type)).\r\n     * @note Does deep conversion on all values of passed in type's type.\r\n     * @function module:object.toAssocListDeep\r\n     * @param obj {*}\r\n     * @param [TypeConstraint = Object] {(Constructor|Function)} - Type constraint to convert on.\r\n     * @returns {*}\r\n     */\r\n    toAssocListDeep = (obj, TypeConstraint = Object) => keys(obj).map(key =>\r\n        TypeConstraint && isType(TypeConstraint, obj[key]) ?\r\n            [key, toAssocListDeep(obj[key], TypeConstraint)] :\r\n            [key, obj[key]]\r\n    ),\r\n\r\n    /**\r\n     * From associated list to object.\r\n     * @function module:object.fromAssocList\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocList = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType()),\r\n\r\n    /**\r\n     * From associated list to object (deep conversion on associative lists (array of 2 value arrays)).\r\n     * @note Considers array of arrays associated lists.\r\n     * @function module:object.fromAssocListDeep\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocListDeep = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        if (isArray(value) && isArray(value[0]) && value[0].length === 2) {\r\n            agg[key] = fromAssocListDeep(value, OutType);\r\n            return agg;\r\n        }\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType())\r\n;\r\n","import {typeOf} from './typeOf';\r\nimport {toAssocList} from './assocList';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Converts incoming value to an array.\r\n     * @note For `WeakMap`, `WeakSet`, `Map` and `Set` result is the same as calling `Array.from` on such.\r\n     * @note For `null`, `undefined`, `NaN`, `Number{}`, `Symbol{}`, `Boolean{}` returns an empty array.\r\n     * @note Method does a shallow conversion;\r\n     * @function module:object.toArray\r\n     * @param x {*} - Thing to convert from.\r\n     * @returns {Array}\r\n     */\r\n    toArray = x => {\r\n        switch (typeOf(x)) {\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return [];\r\n            case String.name:\r\n            case Array.name:\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n            case 'Map':\r\n            case 'Set':\r\n                return Array.from(x);\r\n            case Object.name:\r\n            default:\r\n                return toAssocList(x);\r\n        }\r\n    }\r\n\r\n;\r\n","/**\r\n * @module object\r\n * @description Object operations/combinators.\r\n */\r\n\r\nexport * from './jsPlatform/object';\r\nexport * from './object/lookup';\r\nexport * from './object/typeOf';\r\nexport * from './object/copy';\r\nexport * from './object/is';\r\nexport * from './object/of';\r\nexport * from './object/searchObj';\r\nexport * from './object/assignDeep';\r\nexport * from './object/setTheory';\r\nexport * from './object/console';\r\nexport * from './object/jsonClone';\r\nexport * from './object/toArray';\r\nexport * from './object/assocList';\r\n\r\n/**\r\n* Returns whether constructor has derived object.\r\n* @function module:object.instanceOf\r\n* @param instanceConstructor {Function} - Constructor.\r\n* @param instance {*}\r\n* @returns {Boolean}\r\n*/\r\n\r\n/**\r\n * @function module:object.hasOwnProperty\r\n * @param propName {*}\r\n * @param typeInstance {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @function module:object.length\r\n * @param x {*}\r\n * @returns {Number}\r\n * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n */\r\n\r\n/**\r\n * Gets own enumerable keys of passed in object (`Object.keys`).\r\n * @function module:object.keys\r\n * @param obj {*}\r\n * @returns {Array<String>}\r\n */\r\n\r\n/**\r\n * Defined as `Object.assign` else is the same thing but shimmed.\r\n * @function module:object.assign\r\n * @param objs {...{*}}\r\n * @returns {Object}\r\n*/\r\n","import {reduceRight} from '../jsPlatform/array';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the function on the left of itself.\r\n * @function module:function.compose\r\n * @type {Function}\r\n * @param args {...{Function}}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) =>\r\n        arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","import {reverse} from '../jsPlatform/array';\r\nimport {apply, call} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a curried function requiring given functions arguments in reverse\r\n     * (returned function expects 2 or more variables (curried at 2 or more args)).\r\n     * @function module:function.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     * @curried\r\n     */\r\n    flipN = fn => curry2((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\r\n     * @function module:function.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b));\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:function.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","import {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true` (like a functional\r\n     *  version of a while loop).\r\n     * @function module:function.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = curry((predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    });\r\n","import {typeOf} from '../object/typeOf';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a function or throws an error if given `f` is not a function.\r\n     * @function module:function.fnOrError\r\n     * @param symbolName {String} - Error message prefix.\r\n     * @param f {Function|*} - Expected function.\r\n     * @returns {Function}\r\n     * @throws {Error} - Error if `f` is not of `function`\r\n     */\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || !(f instanceof Function)) {\r\n            throw new Error(`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    }\r\n\r\n;\r\n","/**\r\n * No-op ('op' as in 'operation') - Performs no operation 'always' (good for places where\r\n * a value should always be a function etc.).\r\n * @function module:function.noop\r\n * @returns {undefined}\r\n */\r\nexport const noop = () => undefined;\r\n","/**\r\n * @module function\r\n */\r\nexport * from './jsPlatform/function';\r\nexport * from './function/compose';\r\nexport * from './function/curry';\r\nexport * from './function/flip';\r\nexport * from './function/id';\r\nexport * from './function/negate';\r\nexport * from './function/until';\r\nexport * from './function/fnOrError';\r\nexport * from './function/noop';\r\n","/**\r\n * @module errorThrowing\r\n * @description Contains error throwing facilities for when a value doesn't match a type.\r\n */\r\nimport {typeOf} from './object/typeOf';\r\nimport {isArray, toTypeRef, toTypeRefName, isOfType} from './object/is';\r\nimport {curry} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @function module:errorThrowing.typeRefsToStringOrError\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    typeRefsToStringOrError = types => types.length ?\r\n        types.map(type => `\\`${toTypeRefName(type)}\\``).join(', ') : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:errorThrowing.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n                contextName, valueName, value, expectedTypeName,\r\n                foundTypeName, messageSuffix\r\n            } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? typeRefsToStringOrError(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotType}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypeThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (ValueType, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeName = toTypeRef(ValueType),\r\n                foundTypeName = typeOf(value);\r\n            if (typeChecker(ValueType, value)) { return value; } // Value matches type\r\n            throw new Error(errorMessageCall(\r\n                {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n            ));\r\n        },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotTypes}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypesThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (valueTypes, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeNames = valueTypes.map(toTypeRef),\r\n                matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\r\n                foundTypeName = typeOf(value);\r\n            if (matchFound) { return value; }\r\n            throw new Error(\r\n                errorMessageCall({\r\n                    contextName, valueName, value,\r\n                    expectedTypeName: expectedTypeNames, foundTypeName,\r\n                    messageSuffix\r\n                })\r\n            );\r\n        },\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotType`.\r\n     * @function module:errorThrowing.errorIfNotType$\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotType = _getErrorIfNotTypeThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotTypes`.\r\n     * @type {Function|module:errorThrowing.errorIfNotTypes}\r\n     * @function module:errorThrowing.errorIfNotTypes$\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotTypes = _getErrorIfNotTypesThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n     */\r\n    getErrorIfNotTypeThrower = errorMessageCall => curry(_getErrorIfNotTypeThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n     */\r\n    getErrorIfNotTypesThrower = errorMessageCall => curry(_getErrorIfNotTypesThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotType\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotType = curry(_errorIfNotType),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotTypes\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotTypes = curry(_errorIfNotTypes)\r\n;\r\n\r\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\r\n\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\r\n */\r\n\r\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {*}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\r\n\r\n/**\r\n * @typedef {Array<(String|Function)>} TypesArray\r\n */\r\n\r\n/**\r\n * @typedef {Function} TypeChecker\r\n * @description Checks whether a value is of given type.\r\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorMessageCall\r\n * @description Error message template function.\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotType\r\n * @description Used to ensure value matches passed in type.\r\n * @param type {TypeRef} - Constructor name or constructor.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - What ever value is.\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotTypes\r\n * @description Used to ensure a value matches one of one or more types passed in.\r\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - Whatever value is.\r\n */\r\n","/**\r\n * @module string\r\n * @description Contains functions for strings.\r\n */\r\nimport {intercalate, map, filter} from './list';\r\nimport {split} from './jsPlatform/string';\r\nimport {compose} from './function/compose';\r\nimport {join} from './jsPlatform/array';\r\nimport {_errorIfNotType} from './errorThrowing';\r\n\r\nexport {split};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:string.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a string on all '\\s' and/or all '\\t' characters.\r\n     * @function module:string.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:string.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:string.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n'),\r\n\r\n    /**\r\n     * Lower cases first character of a non-empty string.\r\n     * @function module:string.lcaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    lcaseFirst = xs => {\r\n        _errorIfNotType(String, 'lcaseFirst', 'xs', xs);\r\n        return xs[0].toLowerCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Upper cases first character of a non-empty string.\r\n     * @function module:string.ucaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    ucaseFirst = xs => {\r\n        _errorIfNotType(String, 'ucaseFirst', 'xs', xs);\r\n        return xs[0].toUpperCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Camel cases (class case) a string.\r\n     * @function module:string.camelCase\r\n     * @param xs {String}\r\n     * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Pattern to split on.  Optional.\r\n     * @throws {Error} - Throws error if param `xs` is not a string.\r\n     * @returns {string}\r\n     * @curried\r\n     */\r\n    camelCase = (xs, pattern = /[^a-z\\d]/i) => compose(\r\n            join(''),\r\n            map(str => ucaseFirst(str.toLowerCase())),\r\n            filter(x => !!x),\r\n            split(pattern)\r\n        )(_errorIfNotType(String, 'camelCase', 'xs', xs)),\r\n\r\n    /**\r\n     * Class cases a string.  Uses pattern /[^a-z\\d/i]/ to split on.\r\n     * If you require a different pattern use `string.camelCase(str, pattern)`\r\n     * and then upper case first character (`ucaseFirst`).\r\n     * @function module:string.classCase\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if `xs` is not a string (via `camelCase` call).\r\n     */\r\n    classCase = compose(ucaseFirst, camelCase)\r\n\r\n;\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\n","/**\r\n * @module fjl\r\n * @description Exports all module methods (object, list, string modules etc.).\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n */\r\nexport * from './object';\r\nexport * from './boolean';\r\nexport * from './function';\r\nexport * from './list';\r\nexport * from './string';\r\nexport * from './utils';\r\nexport * from './errorThrowing';\r\nexport * from './list/utils';\r\n"],"names":["returnCurried","executeArity","unmetArityNum","fn","argsToCurry","func","x","executeAsCurriedFunc","Array","from","arguments","a","b","c","d","e","args","unmetArity","concatedArgs","concat","canBeCalled","length","newExpectedArity","curryN","Function","Error","curry","curry2","curry3","curry4","curry5","fPureTakesOne","arg","f","name","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","instanceConstructor","instance","hasOwnProperty","keys","Object","assign","obj0","objs","reduce","topAgg","obj","agg","key","_Number","Number","_NaN","_Null","_Undefined","typeOf","value","retVal","undefined","constructorName","constructor","isNaN","_String","String","_Object","_Boolean","Boolean","_Function","_Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","toTypeRef","type","toTypeRefName","ref","Type","isFunction","instanceOf","isType","isOfType","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isUsableImmutablePrimitive","typeOfX","isset","some","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","lookup","apply","call","of","copy","out","slice","Symbol","Promise","searchObj","nsString","indexOf","parts","split","limit","ind","parent","node","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","includes","prototype","xs","lastIndexOf","negateF","negateF2","negateF3","negateFN","isTruthy","isFalsy","alwaysTrue","alwaysFalse","equal","equalAll","every","map","push","aggregateArr$","item","sliceFrom","startInd","arr","sliceTo","toInd","sliceCopy","genericAscOrdering","lengths","lists","toShortest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceUntilRight","reduceRight","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","normalizeStep","to","step","range","i","defineReverse","reverse","filter","forEach","join","append","listAppend","head","last","tail","init","uncons","unconsr","concatMap","foldableOfA","foldr","intersperse","between","lastInd","foldl","intercalate","xss","transpose","numLists","ind2","longestListLen","maximum","outLists","outList","subsequences","listLen","pow","entry","j","swapped","ind1","tmp","permutations","repeat","foldl1","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","lastX","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","splitAt","takeWhile","dropWhile","splitPoint","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","zip3","arr3","zip4","arr4","zip5","arr5","zipWith","zipWithN","lenOfTrimmed","zipWith3","xs3","zipWith4","xs4","zipWith5","xs5","unzip","unzipN","lenItem0","any","p","all","and","or","not","sum","product","sortBy","minimum","scanl","scanl1","scanr","scanr1","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","a0","b0","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","unionBy","alreadyAdded","union","intersect","intersectBy","list1","list2","difference","array1","array2","complement","arr0","arrays","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","log","console","bind","error","peek","pop","jsonClone","JSON","parse","stringify","toAssocList","toAssocListDeep","TypeConstraint","fromAssocList","OutType","fromAssocListDeep","toArray","compose","arg0","flipN","flip","id","until","predicate","operation","typeInstance","fnOrError","symbolName","noop","typeRefsToStringOrError","types","defaultErrorMessageCall","contextName","tmplContext","valueName","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","typesCopy","typesToMatchCopy","_getErrorIfNotTypeThrower","errorMessageCall","typeChecker","ValueType","_getErrorIfNotTypesThrower","valueTypes","expectedTypeNames","matchFound","_errorIfNotType","_errorIfNotTypes","getErrorIfNotTypeThrower","getErrorIfNotTypesThrower","errorIfNotType","errorIfNotTypes","lines","words","unwords","unlines","lcaseFirst","toLowerCase","substring","ucaseFirst","toUpperCase","camelCase","pattern","str","classCase"],"mappings":"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"}