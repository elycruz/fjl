{"version":3,"file":"fjl.js","sources":["../../src/uncurried/utils_.js","../../src/uncurried/jsPlatform/object_.js","../../src/uncurried/jsPlatform/array_.js","../../src/uncurried/jsPlatform/list_.js","../../src/uncurried/jsPlatform/string_.js","../../src/uncurried/jsPlatform/function_.js","../../src/uncurried/jsPlatform_.js","../../src/uncurried/functionOps/curry_.js","../../src/uncurried/objectOps/typeOf_.js","../../src/uncurried/objectOps/is_.js","../../src/uncurried/objectOps/assignDeep_.js","../../src/objectOps/is.js","../../src/uncurried/functionOps/apply_.js","../../src/uncurried/objectOps/of_.js","../../src/uncurried/functionOps/negate_.js","../../src/booleanOps.js","../../src/uncurried/objectOps/prop_.js","../../src/uncurried/objectOps_.js","../../src/functionOps/apply.js","../../src/objectOps/of.js","../../src/uncurried/listOps/aggregation_.js","../../src/uncurried/listOps/map_.js","../../src/uncurried/listOps/utils_.js","../../src/uncurried/listOps_.js","../../src/uncurried/objectOps/setTheory_.js","../../src/objectOps/setTheory.js","../../src/objectOps.js","../../src/functionOps/call.js","../../src/uncurried/functionOps/curry__.js","../../src/uncurried/functionOps/id_.js","../../src/uncurried/functionOps/compose_.js","../../src/utils.js","../../src/jsPlatform/array.js","../../src/uncurried/functionOps/call_.js","../../src/uncurried/functionOps/until_.js","../../src/uncurried/functionOps_.js","../../src/functionOps/flip.js","../../src/functionOps/until.js","../../src/functionOps.js","../../src/listOps.js","../../src/jsPlatform/string.js","../../src/stringOps.js","../../src/generated/version.js","../../src/fjl.js"],"sourcesContent":["export const\r\n\r\n    fPureTakesOne = name => (arg, f) => f[name](arg),\r\n\r\n    fPureTakes2 = name => (arg1, arg2, f) => f[name](arg1, arg2),\r\n\r\n    fPureTakesOneOrMore = name => (f, ...args) => f[name](...args);\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n * Defines some of the platform methods for objects (the ones used within `fjl`) uncurried for use\r\n * throughout the library.  @note Doesn't include all methods for objects just the ones used in\r\n *  the library.\r\n * @todo change all files named '*UnCurried' to '*_'.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived objectOps.\r\n     * @function module:jsPlatform_objectOps_.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = (instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor,\r\n\r\n    /**\r\n     * @function module:jsPlatform_objectOps_.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:jsPlatform_objectOps_.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * @function module:jsPlatform_objectOps_.hasOwnProperty\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `toString`.\r\n     */\r\n    toString = x => x.toString(),\r\n\r\n    /**\r\n     * Gets own enumerable keys of passed in object (`Object.keys`).\r\n     * @function module:jsPlatform_objectOps_.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    keys = obj => Object.keys(obj),\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:jsPlatform_objectOps_.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() =>\r\n        Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            (obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0))();\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n * @module jsPlatform_arrayOps_\r\n * @private\r\n * @todo updated doc blocks to list correct/updated module name.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Array.prototype.reverse generator (generates a functionOps that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, []),\r\n\r\n    /**\r\n     * Maps a functionOps to functor (listOps etc.).\r\n     * @function module:jsPlatform_array_.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (listOps etc.) with passed in functionOps.\r\n     * @function module:jsPlatform_array_.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (listOps etc.) with passed in functionOps.\r\n     * @function module:jsPlatform_array_.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (listOps etc.) from the right with passed in functionOps.\r\n     * @function module:jsPlatform_array_.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an listOps (shimmed if not exists).\r\n     * @function module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length` and `toString`)\r\n *      on both strings and arrays.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils_';\r\n\r\n// export {length, toString} from './objectOps_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:jsPlatform_list_.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:jsPlatform_list_.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:jsPlatform_list_.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:jsPlatform_list_.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:jsPlatform_list_.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils_';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:stringOps_.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * Created by elydelacruz on 9/7/2017.\r\n * @module jsPlatform_function_\r\n * @private\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:jsPlatform_function_.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = (fn, args) => fn.apply(null, args),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:jsPlatform_function_.call\r\n     * @param fn {Function}\r\n     * @param args {...*}\r\n     * @returns {*}\r\n     */\r\n    call = (fn, ...args) => apply(fn, args);\r\n","/**\r\n * @module jsPlatform_\r\n * @private\r\n */\r\nexport * from './jsPlatform/object_';\r\nexport * from './jsPlatform/array_';\r\nexport * from './jsPlatform/list_';\r\nexport * from './jsPlatform/string_';\r\nexport * from './jsPlatform/function_';\r\n","/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf functionOps_\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\r\nimport {apply, length, concat} from '../jsPlatform_';\r\nexport const\r\n\r\n    /**\r\n     * Curries a functionOps based on it's defined arity (argument's arrayOps expected length).\r\n     * @function module:functionOps_.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => {\r\n        return (...args) => {\r\n            const concatedArgs = concat(argsToCurry, args);\r\n            return length(concatedArgs) < length(fn) ?\r\n                apply(curry, concat([fn], concatedArgs)) :\r\n                apply(fn, concatedArgs);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Curries a functionOps up to a given arity.\r\n     * @function module:functionOps_.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param curriedArgs {...*}\r\n     * @returns {Function}\r\n     */\r\n    curryN = (executeArity, fn, ...curriedArgs) => {\r\n        return (...args) => {\r\n            let concatedArgs = concat(curriedArgs, args),\r\n                canBeCalled = (length(concatedArgs) >= executeArity) || !executeArity;\r\n            return !canBeCalled ? apply(curryN, concat([executeArity, fn], concatedArgs)) :\r\n                apply(fn, concatedArgs);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 2 (won't call functionOps until 2 or more args).\r\n     * @function module:functionOps_.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 3 (won't call functionOps until 3 or more args).\r\n     * @function module:functionOps_.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 4 (won't call functionOps until 4 or more args).\r\n     * @function module:functionOps_.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 5 (won't call functionOps until 5 or more args).\r\n     * @function module:functionOps_.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf objectOps_\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined',\r\n    _undefined = 'undefined';\r\n\r\n/**\r\n * Returns the class name of an object from it's class stringOps.\r\n * @note Returns 'NaN' if value `isNaN` and value type is 'Number'.\r\n * @function module:objectOps_.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name property if not null or undefined (in which case a\r\n *  name representing those types is returned ('Null' and or 'Undefined' (es6 compliant))).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (typeof value === _undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf objectOps_\r\n */\r\n\r\nimport {typeOf} from './typeOf_';\r\nimport {instanceOf, length, keys, hasOwnProperty} from '../jsPlatform/object_';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether a value is a functionOps or not.\r\n     * @function module:objectOps_.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = value => instanceOf(Function, value),\r\n\r\n    /**\r\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\r\n     * be a named constructor/functionOps-instance;  E.g.,\r\n     * ```\r\n     *  functionOps SomeName () {} // or\r\n     *  var SomeName = functionOps SomeName () {} // or\r\n     *  class SomeName {}\r\n     * ```\r\n     * @function module:objectOps_.isType\r\n     * @param type {Function|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = (type, obj) => typeOf(obj) === (isFunction(type) ? type.name : type),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:objectOps_.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test(x.toString().substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a booleanOps depicting whether a value is callable or not.\r\n     * @function module:objectOps_.isCallable\r\n     * @tentative\r\n     * @private\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an arrayOps.\r\n     * @function module:objectOps_.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    isArray = value => isType(Array, value),\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:objectOps_.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = value => isType(_Object, value),\r\n\r\n    /**\r\n     * Checks if value is a booleanOps.\r\n     * @function module:objectOps_.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = value => isType(_Boolean, value),\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:objectOps_.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = value => isType(_Number, value),\r\n\r\n    /**\r\n     * Checks whether value is a stringOps or not.\r\n     * @function module:objectOps_.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = value => isType(_String, value),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:objectOps_.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = value => isType(_Map, value),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:objectOps_.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = value => isType(_Set, value),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:objectOps_.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap = value => isType(_WeakMap, value),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:objectOps_.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = value => isType(_WeakSet, value),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:objectOps_.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = value => isType(_Undefined, value),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:objectOps_.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = value => isType(_Null, value),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:objectOps_.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = value => isType(_Symbol, value),\r\n\r\n    /**\r\n     * @tentative\r\n     * @private\r\n     */\r\n    isPromise = value => isType('Promise', value),\r\n\r\n    /**\r\n     * Checks if given `x` is one of the four\r\n     * \"usable\" immutable JS primitives; I.e.,\r\n     *  One of [String, Boolean, Number, Symbol]\r\n     * @function module:objectOps_.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return [_String, _Number, _Boolean, _Symbol]\r\n            .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:objectOps.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => !length(x),\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:objectOps.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:objectOps_.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in argument is empty.\r\n     * @function module:objectOps_.isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        let typeOfValue = typeOf(value),\r\n            retVal;\r\n\r\n        if (!value) { // '', 0, `null`, `undefined` or `false` then is empty\r\n            retVal = true;\r\n        }\r\n        else if (typeOfValue === _Array || typeOfValue === _Function) {\r\n            retVal = isEmptyList(value);\r\n        }\r\n        else if (typeOfValue === _Number && value !== 0) {\r\n            retVal = false;\r\n        }\r\n        else if (typeOfValue === _Object) {\r\n            retVal = isEmptyObject(value);\r\n        }\r\n        else if (hasOwnProperty('size', value)) {\r\n            retVal = isEmptyCollection(value);\r\n        }\r\n        else {\r\n            retVal = !value;\r\n        }\r\n        return retVal;\r\n    },\r\n\r\n    /**\r\n     * Returns true if an element is not empty and is of type.\r\n     * @function module:objectOps_.notEmptyAndOfType\r\n     * @tentative\r\n     * @private\r\n     * @param type {String|Function} - Type to check against (stringOps name or actual constructor).\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    notEmptyAndOfType = (type, value) => !isEmpty(value) && isType(type, value),\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null or not.\r\n     * @function module:objectOps_.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => !isNull(x) && !isUndefined(x);\r\n","\r\nimport {isObject} from './is_';\r\n\r\nimport {keys, hasOwnProperty} from '../jsPlatform/object_';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one.\r\n     * @function module:jsPlatform.objectOps_.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = (obj0, ...objs) =>\r\n        objs.reduce((topAgg, obj) =>\r\n                keys(obj).reduce((agg, key) => {\r\n                    let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                    // If property is not writable move to next item in collection\r\n                    if (hasOwnProperty(key, agg) && propDescription &&\r\n                        !(propDescription.get && propDescription.set) &&\r\n                        !propDescription.writable) {\r\n                        return agg;\r\n                    }\r\n                    if (isObject(agg[key]) && isObject(obj[key])) {\r\n                        assignDeep(agg[key], obj[key]);\r\n                    }\r\n                    else { agg[key] = obj[key]; }\r\n                    return agg;\r\n                }, topAgg)\r\n            , obj0);\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf objectOps\r\n * @todo remove `isset`, `isEmpty` and `notEmptyAndOfType`\r\n * @todo Use the ucurried versions of the methods here from the '../uncurried/*' packages.\r\n */\r\nimport {curry} from   '../uncurried/functionOps/curry_';\r\nimport {isType as _isType, isEmpty} from '../uncurried/objectOps/is_';\r\nexport {isEmpty};\r\nexport {\r\n    isFunction, isClass, isCallable, isArray, isObject, isBoolean,\r\n    isNumber, isString, isMap, isSet, isWeakMap, isWeakSet, isUndefined,\r\n    isNull, isSymbol, isPromise, isUsableImmutablePrimitive,\r\n    isEmptyList, isEmptyObject, isEmptyCollection, isset\r\n} from '../uncurried/objectOps/is_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether a value is a functionOps or not.\r\n     * @function module:objectOps.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\r\n     * be a named constructor/functionOps-instance;  E.g.,\r\n     * ```\r\n     *  functionOps SomeName () {} // or\r\n     *  var SomeName = functionOps SomeName () {} // or\r\n     *  class SomeName {}\r\n     * ```\r\n     * @function module:objectOps.isType\r\n     * @param Type {Function|String} - Constructor or constructor name\r\n     * @param value {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry(_isType),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:objectOps.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n\r\n    /**\r\n     * Returns a booleanOps depicting whether a value is callable or not.\r\n     * @function module:objectOps.isCallable\r\n     * @tentative\r\n     * @private\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is an arrayOps.\r\n     * @function module:objectOps.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:objectOps.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is a booleanOps.\r\n     * @function module:objectOps.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:objectOps.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is a stringOps or not.\r\n     * @function module:objectOps.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:objectOps.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:objectOps.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:objectOps.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:objectOps.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:objectOps.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:objectOps.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:objectOps.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * @tentative\r\n     * @private\r\n     */\r\n\r\n    /**\r\n     * Checks if given `x` is one of the four\r\n     * \"usable\" immutable JS primitives; I.e.,\r\n     *  One of [String, Boolean, Number, Symbol]\r\n     * @function module:objectOps.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:objectOps.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:objectOps.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:objectOps_.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks to see if passed in argument is empty.\r\n     * @function module:objectOps.isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Returns true if an element is not empty and is of type.\r\n     * @function module:objectOps.notEmptyAndOfType\r\n     * @tentative\r\n     * @private* @param type {String|Function} - Type to check against (stringOps name or actual constructor).\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    notEmptyAndOfType = curry((type, value) => !isEmpty(value) && isType(type, value))\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null.\r\n     * @function module:objectOps.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    ;\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n * @memberOf functionOps_\r\n */\r\n\r\n/**\r\n * Functional `apply` function (takes no context).\r\n * @function module:functionOps_.apply\r\n * @param fn {Function}\r\n * @param args {*}\r\n * @returns {*}\r\n */\r\nexport {apply} from '../jsPlatform/function_';\r\n","import {isFunction, isUsableImmutablePrimitive, isset} from './is_';\r\nimport {hasOwnProperty} from '../jsPlatform/object_';\r\nimport {apply} from '../functionOps/apply_';\r\n\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","/**\r\n * @memberOf functionOps_\r\n */\r\n\r\nimport {apply} from './apply_';\r\n\r\nimport {reverse} from '../jsPlatform/array_';\r\n\r\nexport const\r\n\r\n    negateF = fn => (a, b) => !fn(a, b),\r\n\r\n    negateF3 = fn => (a, b, c) => !fn(a, b, c),\r\n\r\n    negateF4 = fn => (a, b, c, d) => !fn(a, b, c, d),\r\n\r\n    negateF5 = fn => (a, b, c, d, e) => !fn(a, b, c, d, e),\r\n\r\n    /**\r\n     * Negates a javascript-'generic' predicate; `Function<element, index, list>`.\r\n     * @function module:functionOps_.negateP\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateP = negateF3,\r\n\r\n    /**\r\n     * Returns a new function which is the dual of `fn` (or the negated version of `fn`).\r\n     * @function module:functionOps_.negateFMany\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFMany = fn => (...args) => !apply(fn, reverse(args));\r\n","/**\r\n * Created by elyde on 7/15/2017.\r\n * @module booleanOps\r\n */\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:booleanOps.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:booleanOps.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value,\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:booleanOps.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:booleanOps.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false;\r\n","/**\r\n * @memberOf objectOps_\r\n */\r\n\r\n/**\r\n * Returns property value if found; Else `undefined`.\r\n * @function module:objectOps_.prop\r\n * @param name {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\r\nexport const prop = (name, obj) => obj[name];\r\n","/**\r\n * @module objectOps_\r\n * @private\r\n */\r\nexport * from './jsPlatform/object_';\r\nexport * from './objectOps/prop_';\r\nexport * from './objectOps/typeOf_';\r\nexport * from './objectOps/is_';\r\nexport * from './objectOps/of_';\r\nexport * from './objectOps/assignDeep_';\r\nexport * from './objectOps/setTheory_';\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n * @memberOf functionOps\r\n */\r\nimport {curry} from '../uncurried/functionOps/curry_';\r\n\r\nimport {apply as _apply} from '../uncurried/jsPlatform/function_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` functionOps (takes no context).\r\n     * @function module:functionOps.apply\r\n     * @param fn {Function}\r\n     * @param args {*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry(_apply);\r\n","import {isFunction, isUsableImmutablePrimitive, isset} from './is';\r\nimport {hasOwnProperty} from '../uncurried/jsPlatform/object_';\r\nimport {apply} from   '../functionOps/apply';\r\n\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","import {typeOf} from '../objectOps_';\r\n\r\nexport const\r\n\r\n    aggregateStr = (agg, item) => agg + item,\r\n\r\n    aggregateArr = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    },\r\n\r\n    aggregateObj = (agg, item, ind) => {\r\n        agg[ind] = item;\r\n        return agg;\r\n    },\r\n\r\n    aggregatorByType = x => {\r\n        switch (typeOf(x)) {\r\n            case 'String': return aggregateStr;\r\n            case 'Array': return aggregateArr;\r\n            case 'Object':\r\n            default: return aggregateObj;\r\n        }\r\n    };\r\n","import {of} from   '../../objectOps/of';\r\n\r\nimport {aggregatorByType}   from './aggregation_';\r\n\r\nimport {length}              from '../jsPlatform/object_';\r\n\r\n/**\r\n * @function module:listOps.map\r\n * @param fn {Function} - Function to map on functor item(s).\r\n * @param xs {Array|String|*} - Functor.\r\n * @returns {Array|String|*} - Functor type that is passed in.\r\n */\r\nexport const map = (fn, xs) => {\r\n    let ind = 0,\r\n        limit = length(xs),\r\n        out = of(xs),\r\n        aggregate = aggregatorByType(xs);\r\n    if (!limit) { return out; }\r\n    for (; ind < limit; ind += 1) {\r\n        out = aggregate(out, fn(xs[ind], ind, xs), ind, xs);\r\n    }\r\n    return out;\r\n};\r\n","/**\r\n * List operator utils module.\r\n * @module listOpsUtils_\r\n * @private\r\n */\r\nimport {apply}              from '../jsPlatform/function_';  // un-curried version\r\nimport {slice}              from '../jsPlatform/list_';      // un-curried version good for both strings and arrays\r\nimport {length}             from '../jsPlatform/object_';\r\nimport {alwaysFalse}        from '../../booleanOps';\r\nimport {map}                from './map_';\r\n\r\nexport * from './aggregation_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @function module:listOpsUtils_.sliceFrom\r\n     * @param startInd {Number}\r\n     * @param arr {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = (startInd, arr) => slice(startInd, length(arr), arr),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @function module:listOpsUtils_.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = (toInd, xs) => slice(0, toInd, xs),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function listOpsUtils_.sliceFrom\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    copy = xs => sliceFrom(0, xs),\r\n\r\n    /**\r\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n     * @function module:listOpsUtils_.genericAscOrdering\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {number}\r\n     */\r\n    genericAscOrdering = (a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @function module:listOpsUtils_.lengths\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = (...lists) => length(lists) ? map(length, lists) : [],\r\n\r\n    /**\r\n     * @function module:listOpsUtils_.lengthsToSmallest\r\n     * @param lists {...(Array|String|*)}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengthsToSmallest = (...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : copy(list), lists);\r\n    },\r\n\r\n    reduceUntil = (pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    reduceRightUntil = (pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    reduce = (operation, agg, arr) =>\r\n        reduceUntil(\r\n            alwaysFalse,            // predicate\r\n            operation,              // operation\r\n            agg,                    // aggregator\r\n            arr),                   // list\r\n\r\n    reduceRight = (operation, agg, arr) =>\r\n        reduceRightUntil(\r\n            alwaysFalse,            // predicate\r\n            operation,              // operation\r\n            agg,                    // aggregator\r\n            arr),                   // list\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:listOpsUtils_lastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:listOpsUtils_findIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = (pred, arr) => {\r\n        let ind = -1,\r\n            predicateFulfilled = false;\r\n        const limit = length(arr);\r\n        while (ind < limit && !predicateFulfilled) {\r\n            predicateFulfilled = pred(arr[++ind], ind, arr);\r\n        }\r\n        return ind;\r\n    },\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:listOpsUtils_findIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = (pred, arr) => {\r\n        const limit = length(arr);\r\n        let ind = limit,\r\n            predicateFulfilled = false;\r\n        for (; ind >= 0 && !predicateFulfilled; --ind) {\r\n            predicateFulfilled = pred(arr[ind], ind, arr);\r\n        }\r\n        return ind;\r\n    },\r\n\r\n    /**\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = (pred, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) { return undefined; }\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * @function module:listOpsUtils_find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = (pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    },\r\n\r\n    _swap = (list, ind1, ind2) => {\r\n        const tmp = list[ind1];\r\n        list[ind1] = list[ind2];\r\n        list[ind2] = tmp;\r\n        return list;\r\n    },\r\n\r\n    _permutationsAlgo = (listIn, limit, remainderLen) => {\r\n        let out = [];\r\n        if (remainderLen === 1) { return copy(listIn); }\r\n        for (let i = 0; i < remainderLen; i++) {\r\n            const newLen = remainderLen - 1;\r\n\r\n            // Capture permutation\r\n            out.push(_permutationsAlgo(listIn, limit, newLen));\r\n\r\n            // If remainderLen is odd, swap first and last element\r\n            //  else, swap `ith` and last element\r\n            _swap(listIn, (remainderLen % 2 === 1 ? 0 : i), newLen);\r\n        }\r\n        return out;\r\n    }\r\n;\r\n","/**\r\n * '_' list operators.\r\n * @module listOps_\r\n * @private\r\n * @todo decide whether to throw errors where functions cannot function without a specific type or to return undefined (and also determine which cases are ok for just returning undefined).\r\n * @todo code unperformant shorthand in `listOps`\r\n * @todo rename monoid functions to normal functions since we are not really defining methods for monoids here.\r\n */\r\nimport {\r\n    concat as listAppend,\r\n    indexOf, slice, includes\r\n}\r\n    from './jsPlatform/list_';\r\n\r\nimport {apply} from './jsPlatform/function_';\r\nimport {negateP, negateF} from './functionOps/negate_';\r\nimport {isTruthy, isFalsy} from '../booleanOps';\r\nimport {isString, isEmptyList, prop, of, length} from './objectOps_';\r\nimport {map} from './listOps/map_';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    lengthsToSmallest, aggregateArr, aggregatorByType,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, copy, genericAscOrdering, _permutationsAlgo\r\n}\r\n    from './listOps/utils_';\r\n\r\n// Exported imports\r\nexport {map};\r\n\r\n// Exported internals\r\nexport const\r\n\r\n    /**\r\n     * Append two lists, i.e.,\r\n     * ```\r\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\r\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\r\n     * ```\r\n     * If the first list is not finite, the result is the first list.\r\n     * @haskellType `append :: List a => a -> a -> a`\r\n     * @function module:listOps_.append\r\n     * @param xs1 {Array|String|*} - list or list like.\r\n     * @param xs2 {Array|String|*} - list or list like.\r\n     * @returns {Array|String|*} - Same type as list like passed in.\r\n     */\r\n    append = listAppend,\r\n\r\n    /**\r\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\r\n     * @haskellType `appendMany :: List a => a -> [a] -> a\r\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\r\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\r\n     * @function module:listOps_.appendMany\r\n     * @param args ...{Array|String|*} - Lists or lists likes.\r\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\r\n     */\r\n    appendMany = (...args) => {\r\n        if (length(args)) { return apply(listAppend, args); }\r\n        throw new Error('`appendMany` requires at least one arg.');\r\n    },\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:listOps_.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:listOps_.last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:listOps_.tail\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:listOps_.init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:listOps_.uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    uncons = xs => {\r\n        if (!xs) {\r\n            return;\r\n        }\r\n        if (length(xs) === 0) {\r\n            return undefined;\r\n        }\r\n        return [head(xs), tail(xs)];\r\n    },\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:listOps_.unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    unconsr = xs => {\r\n        if (!xs) {\r\n            return;\r\n        }\r\n        if (length(xs) === 0) {\r\n            return undefined;\r\n        }\r\n        return [init(xs), last(xs)];\r\n    },\r\n    \r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:listOps_.concat\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    concat = xs => {\r\n        if (!length(xs)) { return copy(xs); }\r\n        return isString(xs) ? xs : apply(appendMany, xs);\r\n    },\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:listOps_.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    concatMap = (fn, foldableOfA) => concat(map(fn, foldableOfA)),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:listOps_.reverse\r\n     * @param x {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    reverse = x => {\r\n        const aggregator = aggregatorByType(x);\r\n        return foldr (\r\n            (agg, item, ind) => aggregator(agg, item, ind),\r\n            of(x), x\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:listOps_.intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array|String|*} - List.\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersperse = (between, arr) => {\r\n        const limit = length(arr),\r\n            lastInd = limit - 1,\r\n            aggregator = of(arr),\r\n            aggregatorOp = aggregatorByType(arr);\r\n        if (!limit) {\r\n            return aggregator;\r\n        }\r\n        return foldl((agg, item, ind) => {\r\n            return ind === lastInd ?\r\n                aggregatorOp(agg, item) :\r\n                aggregatorOp(\r\n                    aggregatorOp(agg, item),\r\n                    between\r\n                );\r\n        }, aggregator, arr);\r\n    },\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:listOps_.intercalate\r\n     * @param xs {Array|String|*}\r\n     * @param xss {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intercalate = (xs, xss) => concat(intersperse(xs, xss)),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @todo upgrade this function to support lists of strings.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:listOps_.transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return of(xss);\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return filter(x => length(x), outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:listOps_.subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    subsequences = xs => {\r\n        const len = Math.pow(2, length(xs)),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            const entry = [];\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns a list of permutations for passed in list.\r\n     * @function module:listOps.permutations\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {Array<Array|String|*>} - Array of permutations.\r\n     */\r\n    permutations = xs => {\r\n        const limit = length(xs);\r\n        return !limit ? [xs] :\r\n            _permutationsAlgo(xs, limit, limit);\r\n    },\r\n\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:listOps_.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array|String|*}\r\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\r\n     */\r\n    foldl = reduce,\r\n\r\n    foldr = reduceRight,\r\n\r\n    foldl1 = (op, xs) => {\r\n        const parts = uncons(xs);\r\n        if (!parts) {\r\n            return of(xs);\r\n        }\r\n        return reduce(op, parts[0], parts[1]);\r\n    },\r\n\r\n    foldr1 = (op, xs) => {\r\n        const parts = unconsr(xs);\r\n        if (!parts) {\r\n            return of(xs);\r\n        }\r\n        return reduceRight(op, parts[1], parts[0]);\r\n    },\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOps_.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = (op, zero, xs) => {\r\n        const list = sliceFrom(0, xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = of(xs),\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    },\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOps_.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = (op, zero, xs) => {\r\n        const list = sliceFrom(0, xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = of(xs),\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    },\r\n\r\n    /**\r\n     * Iterate on value (`x`) with `op` up to `limit`.\r\n     * @function module:listOps_.iterate\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = (limit, op, x) => {\r\n        let ind = 0,\r\n            out = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out = op(out, ind);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times\r\n     * @function module:listOps_.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    repeat = (limit, x) =>\r\n        iterate(limit, agg => {\r\n            agg.push(x);\r\n            return agg;\r\n        }, []),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:listOps_.replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    replicate = repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:listOps_.cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    cycle = (limit, xs) => concat(replicate(limit, xs)),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:listOps_.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = (op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:listOps_.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:listOps_.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:listOps_.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = (x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    },\r\n\r\n    /**\r\n     * @function module:listOps_.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = (value, xs) => findIndices(x => x === value, xs),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:listOps_.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = (limit, list) => sliceTo(limit, list),\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:listOps_.take\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = (count, list) => sliceFrom(count, list),\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:listOps_.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String|*} - functor (list or string) to split.\r\n     * @returns {Array} - Array of whatever type `x` was when passed in\r\n     */\r\n    splitAt = (ind, list) => [\r\n        sliceTo(ind, list),\r\n        sliceFrom(ind, list)\r\n    ],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:listOps_.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = (pred, list) => {\r\n        let zero = of(list);\r\n        const operation = aggregatorByType(list);\r\n        return reduceUntil(\r\n            negateP(pred),  // predicate\r\n            operation,      // operation\r\n            zero,           // aggregator\r\n            list\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:listOps_.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = (pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    },\r\n\r\n    /**\r\n     * @function module:listOps_.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = (pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhereRight((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            sliceTo(splitPoint + 1, list);\r\n    },\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @function module:listOps_.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array|String|*} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    span = (pred, list) => {\r\n        const splitPoint = findIndexWhere(negateP(pred), list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    },\r\n\r\n    breakOnList = (pred, list) => {\r\n        const splitPoint = findIndexWhere(pred, list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    },\r\n\r\n    /**\r\n     * @function module:listOps_.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    at = prop,\r\n\r\n    /**\r\n     * @function module:listOps_.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    find = findWhere,\r\n\r\n    filter = (pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            aggregator = aggregatorByType(xs),\r\n            out = of(xs);\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out = aggregator(out, xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\r\n     * @function module:listOps_.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = (pred, list) => {\r\n        if (!length(list)) {\r\n            return [of(list), of(list)];\r\n        }\r\n        return [filter(pred, list), filter(negateP(pred), list)];\r\n    },\r\n\r\n    elem = includes,\r\n\r\n    notElem = negateF(includes),\r\n\r\n    lookup = at,\r\n\r\n    isPrefixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    isSuffixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    isInfixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    isSubsequenceOf = (xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:listOps_.group\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    group = xs => groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:listOps_.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {*}\r\n     */\r\n    groupBy = (equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return sliceFrom(0, xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    },\r\n\r\n    inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg = aggregateArr(agg, sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => init(list), xs),\r\n\r\n    tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg = aggregateArr(agg, slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => tail(list), xs),\r\n\r\n    stripPrefix = (prefix, list) =>\r\n        isPrefixOf(prefix, list) ?\r\n            splitAt(length(prefix), list)[1] :\r\n            sliceFrom(0, list),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:listOps_.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = (arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return of(arr1);\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    },\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:listOps_.zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    zipN = (...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, filter(length, lists)),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:listOps_.zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip3 = zipN,\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:listOps_.zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip4 = zipN,\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:listOps_.zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip5 = zipN,\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:listOps_.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = (op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return of(xs1);\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    },\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:listOps_.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = (op, ...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, apply(op, map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:listOps_.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = zipWithN,\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:listOps_.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = zipWithN,\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:listOps_.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @param xs5 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = zipWithN,\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:listOps_.unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    unzip = arr =>\r\n        foldl((agg, item) => {\r\n            agg[0].push(item[0]);\r\n            agg[1].push(item[1]);\r\n            return agg;\r\n        }, [[], []], arr),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:listOps_.unzip\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    any = (p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    all = (p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (limit === 0) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    and = xs => all(isTruthy, xs),\r\n\r\n    or = xs => any(isTruthy, xs),\r\n\r\n    not = xs => all(isFalsy, xs),\r\n\r\n    sum = list => foldl((agg, x) => agg + x, 0, list),\r\n\r\n    product = arr => foldl((agg, x) => agg * x, 1, arr),\r\n\r\n    maximum = list => maximumBy(genericAscOrdering, list),\r\n\r\n    minimum = list => minimumBy(genericAscOrdering, list),\r\n\r\n    maximumBy = (ordering, xs) => last(sortBy(ordering, xs)),\r\n\r\n    minimumBy = (ordering, xs) => head(sortBy(ordering, xs)),\r\n\r\n    scanl = () => null,\r\n\r\n    scanl1 = () => null,\r\n\r\n    scanr = () => null,\r\n\r\n    scanr1 = () => null,\r\n\r\n    nub = list => nubBy((a, b) => a === b, list),\r\n\r\n    remove = (x, list) => removeBy((a, b) => a === b, x, list),\r\n\r\n    sort = xs => sortBy(genericAscOrdering, xs),\r\n\r\n    sortOn = (valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            sortBy(\r\n                // Ordering\r\n                (a1, b1) => {\r\n                    let a = a1[0],\r\n                        b = b1[0];\r\n                    if (a > b) {\r\n                        return 1;\r\n                    }\r\n                    else if (a < b) {\r\n                        return -1;\r\n                    }\r\n                    return 0;\r\n                },\r\n\r\n                // Decorate\r\n                map(item => [valueFn(item), item], xs)\r\n            )\r\n        ),\r\n\r\n    sortBy = (orderingFn, xs) => copy(xs).sort(orderingFn),\r\n\r\n    insert = (x, xs) => {\r\n        if (isEmptyList(xs)) {\r\n            return aggregatorByType(xs)(copy(xs), x, 0);\r\n        }\r\n        let out = of(xs),\r\n            foundIndex = findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? append(sliceFrom(0, out), x) :\r\n            concat(intersperse([x], splitAt(foundIndex, xs)));\r\n    },\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:listOps_.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` === // something that is order-able\r\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array|String|*} - List to insert into (note new list is returned)\r\n     * @returns {Array|String|*} - New list.\r\n     */\r\n    insertBy = (orderingFn, x, xs) => {\r\n        const limit = length(xs),\r\n            aggregator = aggregatorByType(xs),\r\n            out = of(xs);\r\n        if (isEmptyList(xs)) {\r\n            return aggregator(out, x, 0);\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = splitAt(ind, xs);\r\n                // Fold parts[0], [x], parts[1] into `out` and `concat`\r\n                return concat(foldl(aggregator, out, [parts[0], [x], parts[1]]));\r\n            }\r\n        }\r\n        return aggregator(copy(xs), x);\r\n    },\r\n\r\n    nubBy = (pred, list) => {\r\n        if (isEmptyList(list)) {\r\n            return of(list);\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = of(list),\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out = append(out, currItem);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    removeBy = (pred, x, list) => { // @todo optimize this implementation\r\n        const foundIndex = findIndex(item => pred(x, item), list),\r\n            parts = splitAt(foundIndex > -1 ? foundIndex : 0, list); // @todo correct this implementation\r\n        return append(parts[0], tail(parts[1]));\r\n    },\r\n\r\n    removeFirstsBy = (pred, xs1, xs2) =>\r\n        foldl((agg, item) => removeBy(pred, item, agg), xs1, xs2),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:listOps_.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    unionBy = (pred, arr1, arr2) => {\r\n        const aggregator = aggregatorByType(arr1);\r\n        return foldl((agg, b) => {\r\n            const alreadyAdded = any(a => pred(a, b), agg);\r\n            return !alreadyAdded ? aggregator(agg, b) : agg;\r\n        }, copy(arr1), arr2);\r\n    },\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:listOps_.union\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    union = (arr1, arr2) =>\r\n        append(arr1,\r\n            filter(elm => !includes(elm, arr1), arr2)),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:listOps_.intersect\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersect = (arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            filter(elm => includes(elm, arr2), arr1),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:listOps_.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array|String|*}\r\n     * @param list2 {Array|String|*}\r\n     * @return {Array|String|*}\r\n     */\r\n    intersectBy = (pred, list1, list2) => {\r\n        const aggregator = aggregatorByType(list1);\r\n        return foldl((agg, a) =>\r\n                any(b => pred(a, b), list2) ? aggregator(agg, a) : agg\r\n            , [], list1);\r\n    },\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:listOps_.difference\r\n     * @param array1 {Array|String|*}\r\n     * @param array2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    difference = (array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return sliceFrom(0, array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        const aggregator = aggregatorByType(array1);\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? aggregator(agg, elm) : agg\r\n            , [], array1);\r\n    },\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:listOps_.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = (arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays);\r\n","import {assignDeep} from './assignDeep_';\r\nimport {hasOwnProperty, keys} from '../jsPlatform/object_';\r\nimport {foldl} from '../listOps_';\r\n\r\nexport const\r\n\r\n    objUnion = (obj1, obj2) => assignDeep(obj1, obj2),\r\n\r\n    objIntersect = (obj1, obj2) => foldl((agg, key) => {\r\n        if (hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1)),\r\n\r\n    objDifference = (obj1, obj2) => foldl((agg, key) => {\r\n        if (!hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1)),\r\n\r\n    objComplement = (obj0, ...objs) => foldl((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs);\r\n","import {curry, curry2} from   '../uncurried/functionOps/curry_';\r\nimport {\r\n    objUnion as _objUnion,\r\n    objComplement as _objComplement,\r\n    objIntersect as _objIntersect,\r\n    objDifference as _objDifference\r\n} from '../uncurried/objectOps/setTheory_';\r\n\r\nexport const\r\n\r\n    objUnion = curry(_objUnion),\r\n\r\n    objIntersect = curry(_objIntersect),\r\n\r\n    objDifference = curry(_objDifference),\r\n\r\n    objComplement = curry2(_objComplement);\r\n","/**\r\n * @module objectOps\r\n */\r\nimport {curry, curry2} from './uncurried/functionOps/curry_';\r\n\r\nimport {\r\n    instanceOf as pureInstanceOf,\r\n    hasOwnProperty as pureHasOwnProperty,\r\n    assign as pureAssign\r\n} from './uncurried/jsPlatform/object_';\r\n\r\nimport {assignDeep as pureAssignDeep} from './uncurried/objectOps/assignDeep_';\r\n\r\nexport {length, toString, keys} from './uncurried/jsPlatform/object_';\r\n\r\nexport const\r\n\r\n    instanceOf = curry(pureInstanceOf),\r\n\r\n    hasOwnProperty = curry(pureHasOwnProperty),\r\n\r\n    assign = curry2(pureAssign),\r\n\r\n    assignDeep = curry2(pureAssignDeep);\r\n\r\nexport * from './uncurried/objectOps/typeOf_';\r\n\r\nexport * from './objectOps/is';\r\n\r\nexport * from './uncurried/objectOps/of_';\r\n\r\nexport * from './objectOps/setTheory';\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n * @memberOf functionOps\r\n */\r\nimport {curry2} from '../uncurried/functionOps/curry_';\r\n\r\nimport {call as _call} from '../uncurried/jsPlatform/function_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:functionOps.call\r\n     * @param fn {Function}\r\n     * @param args {*}\r\n     * @returns {*}\r\n     */\r\n    call = curry2(_call);\r\n","/**\r\n * @memberOf functionOps\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @description Curry implementation with place holder concept (`__`).\r\n * @todo Make code here more minimal (reuse small parts here).\r\n */\r\n\r\nimport {apply, concat, map, filter, length} from '../jsPlatform_';\r\n\r\n/**\r\n * PlaceHolder (__) constructor.\r\n * @constructor PlaceHolder\r\n * @private\r\n */\r\nconst PlaceHolder = function PlaceHolder() {},\r\n\r\n    /**\r\n     * Placeholder instance.\r\n     * @type {PlaceHolder}\r\n     * @private\r\n     */\r\n    placeHolderInstance = new PlaceHolder();\r\n\r\n/**\r\n * Checks to see if value is a `PlaceHolder`.\r\n * @param instance {*}\r\n * @returns {boolean}\r\n * @private\r\n */\r\nfunction isPlaceHolder (instance) {\r\n    return instance instanceof PlaceHolder;\r\n}\r\n\r\n/**\r\n * Replaces `placeholder` values in `listOps`.\r\n * @function replacePlaceHolder\r\n * @private\r\n * @param array {Array} - Array to replace placeholders in.\r\n * @param args {Array} - Args from to choose from to replace placeholders.\r\n * @returns {Array|*} - Returns passed in `listOps` with placeholders replaced by values in `args`.\r\n */\r\nfunction replacePlaceHolders (array, args) {\r\n    let out = map(element => {\r\n            if (!isPlaceHolder(element)) { return element; }\r\n            else if (length(args)) { return args.shift(); }\r\n            return element;\r\n        }, array);\r\n    return length(args) ? concat(out, args) : out;\r\n}\r\n\r\n/**\r\n * Curries passed in functionOps up to given arguments length (can enforce arity via placeholder values (`__`)).\r\n * @function module:functionOps_.curry_\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\r\nexport function curry_ (fn, ...argsToCurry) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(argsToCurry, args),\r\n            placeHolders = filter(isPlaceHolder, concatedArgs),\r\n            canBeCalled = length(placeHolders) === 0 &&\r\n                length(concatedArgs) >= length(fn);\r\n        return canBeCalled ? apply(fn, concatedArgs) :\r\n            apply(curry_, concat([fn], concatedArgs));\r\n    };\r\n}\r\n\r\n/**\r\n * Curries a functionOps up to given arity also enforces arity via placeholder values (`__`).\r\n * @function module:functionOps_.curryN_\r\n * @param executeArity {Number}\r\n * @param fn {Function}\r\n * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\r\n * @returns {Function} - Passed in functionOps wrapped in a functionOps for currying.\r\n */\r\nexport function curryN_ (executeArity, fn, ...curriedArgs) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(curriedArgs, args),\r\n            placeHolders = filter(isPlaceHolder, concatedArgs),\r\n            canBeCalled = (length(concatedArgs) - length(placeHolders) >= executeArity) || !executeArity;\r\n        return !canBeCalled ?\r\n            apply(curryN_, concat([executeArity, fn], concatedArgs)) :\r\n            apply(fn, concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Place holder object (frozen) used by curry.\r\n * @memberOf functionOps_\r\n * @type {PlaceHolder}\r\n */\r\nexport let __ = Object.freeze ? Object.freeze(placeHolderInstance) : placeHolderInstance,\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 2 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 2 or more args).\r\n     * @function module:functionOps_.curry2_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2_ = fn => curryN_(2, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 3 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 3 or more args).\r\n     * @function module:functionOps_.curry3_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3_ = fn => curryN_(3, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 4 (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 4 or more args).\r\n     * @function module:functionOps_.curry4_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4_ = fn => curryN_(4, fn),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 5  (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 5 or more args).\r\n     * @function module:functionOps_.curry5_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5_ = fn => curryN_(5, fn)\r\n\r\n;\r\n","/**\r\n * @memberOf functionOps_\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:functionOps_.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","import {reduceRight} from '../jsPlatform/array_';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the functionOps on the left of itself.\r\n * @function module:fjl.compose\r\n * @type {Function}\r\n * @param args {...Function}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) => arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n * @module utils\r\n * @private\r\n */\r\n\r\nimport {curry, curry2} from './uncurried/functionOps/curry_';\r\nexport * from './uncurried/utils_';\r\nexport const\r\n\r\n    fPureTakesOne_ = name => curry((arg, f) => f[name](arg)),\r\n\r\n    fPureTakes2_ = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    fPureTakesOneOrMore_ = name => curry2((f, ...args) => f[name](...args))\r\n;\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Curried functional versions of common array methods (`filter`, `map`, etc.).\r\n * @module jsPlatform_array\r\n * @private\r\n */\r\n\r\nimport {fPureTakesOne_, fPureTakes2_, fPureTakesOneOrMore_} from '../utils';\r\n\r\n/**\r\n * Reverses an listOps (shimmed if not exists).\r\n * @function module:jsPlatform_array.reverse\r\n * @return {Array}\r\n */\r\nexport {reverse} from '../uncurried/jsPlatform/array_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Maps a functionOps to functor (listOps etc.).\r\n     * @function module:jsPlatform_array.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne_('map'),\r\n\r\n    /**\r\n     * Filters a functor (listOps etc.) with passed in functionOps.\r\n     * @function module:jsPlatform_array.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne_('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (listOps etc.) with passed in functionOps.\r\n     * @function module:jsPlatform_array.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2_('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (listOps etc.) from the right with passed in functionOps.\r\n     * @function module:jsPlatform_array.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2_('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @function module:jsPlatform_array.forEach\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne_('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @function module:jsPlatform_array.some\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne_('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @function module:jsPlatform_array.every\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne_('every'),\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:jsPlatform_array.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore_('concat'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:jsPlatform_array.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne_('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:jsPlatform_array.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2_('slice'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @function module:jsPlatform_array.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore_('push');\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n\r\n/**\r\n * Functional `call` functionOps (takes no context).\r\n * @function module:functionOps_.call\r\n * @param fn {Function}\r\n * @param args {*}\r\n * @returns {*}\r\n */\r\nexport {call} from '../jsPlatform/function_';\r\n","export const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true`.\r\n     * @function module:functionOps_.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = (predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    };\r\n","/**\r\n * @module functionOps_\r\n * @private\r\n */\r\nexport * from './functionOps/apply_';\r\nexport * from './functionOps/call_';\r\nexport * from './functionOps/compose_';\r\nexport * from './functionOps/curry_';\r\nexport * from './functionOps/curry__';\r\nexport * from './functionOps/flip_';\r\nexport * from './functionOps/id_';\r\nexport * from './functionOps/negate_';\r\nexport * from './functionOps/until_';\r\n","/**\r\n * @memberOf functionOps\r\n */\r\nimport {reverse} from '../jsPlatform/array';\r\nimport {curry, curry3, apply, call} from '../uncurried/functionOps_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Flips a functions arguments order and returns a new functionOps requiring such (arguments in reverse order).\r\n     * @function module:fnOperators.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flipN = fn => curry3((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a functionOps's first and second arguments and and returns a new functionOps requiring said arguments in reverse.\r\n     * @function module:fnOperators.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b));\r\n","/**\r\n * @memberOf functionOps\r\n */\r\nimport {curry} from '../uncurried/functionOps/curry_';\r\n\r\nimport {until as _until} from '../uncurried/functionOps/until_';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` `until` predicate returns `true`.\r\n     * @function module:functionOps.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     * @curried\r\n     */\r\n    until = curry(_until);\r\n","/**\r\n * Function operations: `\r\n * @module functionOps\r\n */\r\nexport * from './functionOps/call';\r\nexport * from './functionOps/apply';\r\nexport * from './uncurried/functionOps/curry_';\r\nexport * from './uncurried/functionOps/curry__';\r\nexport * from './uncurried/functionOps/negate_';\r\nexport * from './uncurried/functionOps/id_';\r\nexport * from './uncurried/functionOps/compose_';\r\nexport * from './functionOps/flip';\r\nexport * from './functionOps/until';\r\n","/**\r\n * List operators.\r\n * @module listOps\r\n * @todo decide whether to throw errors where functions cannot function without a specific type or to\r\n *  return undefined (and also determine which cases are ok for just returning undefined).\r\n * @todo code unperformant shorthand in `listOps`\r\n * @todo rename monoid functions to normal functions since we are not really defining methods for monoids here.\r\n */\r\nimport {curry, curry2} from './uncurried/functionOps_';\r\n\r\n// Uncurried methods import\r\nimport {\r\n    append as _append, appendMany as _appendMany, all as _all, and as _and, or as _or, any as _any, find as _find,\r\n    findIndex as _findIndex, findIndices as _findIndices, zip as _zip, zipN as _zipN, zipWith as _zipWith,\r\n    unzip as _unzip, unzipN as _unzipN, map as _map, mapAccumL as _mapAccumL, mapAccumR as _mapAccumR, zipWithN as _zipWithN,\r\n    elem as _elem, notElem as _notElem, elemIndex as _elemIndex, elemIndices as _elemIndices, lookup as _lookup,\r\n    head as _head, last as _last, init as _init, tail as _tail, uncons as _uncons,\r\n    reverse as _reverse, intersperse as _intersperse, intercalate as _intercalate, transpose as _transpose,\r\n    subsequences as _subsequences, permutations as _permutations, iterate as _iterate,\r\n    repeat as _repeat, replicate as _replicate, cycle as _cycle, take as _take, drop as _drop, splitAt as _splitAt,\r\n    foldl as _foldl, foldl1 as _foldl1, foldr as _foldr, foldr1 as _foldr1, unfoldr as _unfoldr, concat as _concat,\r\n    concatMap as _concatMap, takeWhile as _takeWhile, dropWhile as _dropWhile, dropWhileEnd as _dropWhileEnd,\r\n    partition as _partition, at as _at, span as _span, breakOnList as _breakOnList, stripPrefix as _stripPrefix,\r\n    group as _group, inits as _inits, tails as _tails, isPrefixOf as _isPrefixOf, isSuffixOf as _isSuffixOf,\r\n    isInfixOf as _isInfixOf, isSubsequenceOf as _isSubsequenceOf, filter as _filter, sum as _sum, product as _product,\r\n    maximum as _maximum, maximumBy as _maximumBy, minimum as _minimum, minimumBy as _minimumBy, nub as _nub,\r\n    remove as _remove, insert as _insert, insertBy as _insertBy, nubBy as _nubBy, removeBy as _removeBy,\r\n    removeFirstsBy as _removeFirstsBy, unionBy as _unionBy, sort as _sort, sortOn as _sortOn, sortBy as _sortBy,\r\n    complement as _complement, difference as _difference, union as _union, intersect as _intersect,\r\n    intersectBy as _intersectBy, groupBy as _groupBy\r\n}\r\n    from './uncurried/listOps_';\r\n\r\n// Single arity methods (and single or more arg functions)\r\nexport {\r\n    and, or, zipN, unzip, unzipN, head, last, init, tail, uncons, concat, reverse, transpose, subsequences,\r\n    permutations, group, inits, tails, sum, product, maximum, minimum, sort, nub\r\n}\r\n    from './uncurried/listOps_';\r\n\r\n// Uncurried methods export\r\nexport {\r\n    _append, _appendMany, _all, _and, _or, _any, _find, _findIndex, _findIndices, _zip, _zipN, _zipWith,\r\n    _unzip, _unzipN, _map, _mapAccumL, _mapAccumR, _elem, _notElem, _elemIndex, _elemIndices, _lookup,\r\n    _head, _last, _init, _tail, _uncons, _reverse, _intersperse, _intercalate, _transpose,\r\n    _subsequences, _permutations, _iterate, _repeat, _replicate, _cycle, _take,\r\n    _drop, _splitAt, _foldl, _foldl1, _foldr, _foldr1, _unfoldr, _concat, _concatMap, _takeWhile, _dropWhile,\r\n    _dropWhileEnd, _partition, _at, _span, _breakOnList, _stripPrefix, _group, _inits, _tails, _isPrefixOf,\r\n    _isSuffixOf, _isInfixOf, _isSubsequenceOf, _filter, _sum, _product, _maximum, _maximumBy, _minimum, _minimumBy,\r\n    _nub, _remove, _insert, _insertBy, _nubBy, _removeBy, _removeFirstsBy, _unionBy, _sort, _sortOn, _sortBy,\r\n    _complement, _difference, _union, _intersect, _intersectBy, _groupBy\r\n};\r\n\r\n// Exported internals\r\nexport const\r\n\r\n    /**\r\n     * Append two lists, i.e.,\r\n     * ```\r\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\r\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\r\n     * ```\r\n     * If the first list is not finite, the result is the first list.\r\n     * @haskellType `append :: List a => a -> a -> a`\r\n     * @function module:listOps.append\r\n     * @param xs1 {Array|String|*} - list or list like.\r\n     * @param xs2 {Array|String|*} - list or list like.\r\n     * @returns {Array|String|*} - Same type as list like passed in.\r\n     */\r\n    append = curry(_append),\r\n\r\n    /**\r\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\r\n     * @haskellType `appendMany :: List a => a -> [a] -> a\r\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\r\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\r\n     * @function module:listOps.appendMany\r\n     * @param x {Array|String|*}\r\n     * @param args ...{Array|String|*} - Lists or lists likes.\r\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\r\n     */\r\n    appendMany = curry2(_appendMany),\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:listOps.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    concatMap = curry2(_concatMap),\r\n\r\n    /**\r\n     * @function module:listOps.map\r\n     * @param fn {Function} - Function to map on functor item(s).\r\n     * @param xs {Array|String|*} - Functor.\r\n     * @returns {Array|String|*} - Functor type that is passed in.\r\n     */\r\n    map = curry(_map),\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:listOps.intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array|String|*} - List.\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersperse = curry(_intersperse),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:listOps.intercalate\r\n     * @param xs {Array|String|*}\r\n     * @param xss {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intercalate = curry(_intercalate),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:listOps.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array|String|*}\r\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\r\n     */\r\n    foldl = curry(_foldl),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from right to left with passed in function.\r\n     * @function module:listOps.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\r\n     */\r\n    foldr = curry(_foldr),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:listOps.foldl1\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*}\r\n     */\r\n    foldl1 = curry(_foldl1),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from right to left with passed in function.\r\n     * @function module:listOps.foldr1\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*}\r\n     */\r\n    foldr1 = curry(_foldr1),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOps.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry(_mapAccumL),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOps.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry(_mapAccumR),\r\n\r\n    /**\r\n     * Iterate on value (`x`) with `op` up to `limit`.\r\n     * @function module:listOps.iterate\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry(_iterate),\r\n\r\n    repeat = curry(_repeat),\r\n\r\n    replicate = repeat,\r\n\r\n    cycle = curry(_cycle),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:listOps.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry(_unfoldr),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:listOps.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = curry(_findIndex),\r\n\r\n    /**\r\n     * @function module:listOps.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = curry(_findIndices),\r\n\r\n    /**\r\n     * @function module:listOps.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry(_elemIndex),\r\n\r\n    /**\r\n     * @function module:listOps.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry(_elemIndices),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:listOps.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = curry(_take),\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:listOps.take\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = curry(_drop),\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:listOps.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String|*} - functor (list or string) to split.\r\n     * @returns {Array} - Array of whatever type `x` was when passed in\r\n     */\r\n    splitAt = curry(_splitAt),\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:listOps.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry(_takeWhile),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:listOps.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry(_dropWhile),\r\n\r\n    /**\r\n     * @function module:listOps.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry(_dropWhileEnd),\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @function module:listOps.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array|String|*} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    span = curry(_span),\r\n\r\n    breakOnList = curry(_breakOnList),\r\n\r\n    /**\r\n     * @function module:listOps.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    at = curry(_at),\r\n\r\n    /**\r\n     * @function module:listOps.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    find = curry(_find),\r\n\r\n    filter = curry(_filter),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\r\n     * @function module:listOps.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry(_partition),\r\n\r\n    elem = curry(_elem),\r\n\r\n    notElem = curry2(_notElem),\r\n\r\n    lookup = at,\r\n\r\n    isPrefixOf = curry(_isPrefixOf),\r\n\r\n    isSuffixOf = curry(_isSuffixOf),\r\n\r\n    isInfixOf = curry(_isInfixOf),\r\n\r\n    isSubsequenceOf = curry(_isSubsequenceOf),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:listOps_.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry(_groupBy),\r\n\r\n    stripPrefix = curry(_stripPrefix),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:listOps.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry(_zip),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:listOps.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry(_zipWith),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:listOps.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = curry2(_zipWithN),\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:listOps.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = zipWithN,\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:listOps.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = zipWithN,\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:listOps.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @param xs5 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = zipWithN,\r\n\r\n    any = curry(_any),\r\n\r\n    all = curry(_all),\r\n\r\n    maximumBy = curry(_maximumBy),\r\n\r\n    minimumBy = curry(_minimumBy),\r\n\r\n    scanl = () => null,\r\n\r\n    scanl1 = () => null,\r\n\r\n    scanr = () => null,\r\n\r\n    scanr1 = () => null,\r\n\r\n    remove = curry(_remove),\r\n\r\n    sortOn = curry(_sortOn),\r\n\r\n    sortBy = curry(_sortBy),\r\n\r\n    insert = curry(_insert),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:listOps_.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` === // something that is order-able\r\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array|String|*} - List to insert into (note new list is returned)\r\n     * @returns {Array|String|*} - New list.\r\n     */\r\n    insertBy = curry(_insertBy),\r\n\r\n    nubBy = curry(_nubBy),\r\n\r\n    removeBy = curry(_removeBy),\r\n\r\n    removeFirstsBy = curry(_removeFirstsBy),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:listOps.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    unionBy = curry(_unionBy),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:listOps.union\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    union = curry(_union),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:listOps.intersect\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersect = curry(_intersect),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:listOps.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array|String|*}\r\n     * @param list2 {Array|String|*}\r\n     * @return {Array|String|*}\r\n     */\r\n    intersectBy = curry(_intersectBy),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:listOps.difference\r\n     * @param array1 {Array|String|*}\r\n     * @param array2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    difference = curry(_difference),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:listOps.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = curry2(_complement);\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n * @module jsPlatform_string\r\n * @private\r\n */\r\n\r\nimport {curry} from   '../uncurried/functionOps/curry_';\r\n\r\nimport {split as _split} from '../uncurried/jsPlatform/string_';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @curried\r\n * @function module:jsPlatform_string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = curry(_split);\r\n","/**\r\n * Contains functions for operating strings.\r\n * @author elyde\r\n * @created 7/9/2017.\r\n * @module stringOps\r\n */\r\nimport {intercalate} from './listOps';\r\n\r\nimport {split} from './jsPlatform/string';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a stringOps on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:stringOps.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a stringOps on all '\\s' and/or all '\\t' characters.\r\n     * @function module:stringOps.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:stringOps.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:stringOps.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n');\r\n","/**\n * Content generated by '{project-root}/node-scripts/VersionNumberReadStream.js'.\n * Generated Fri Oct 13 2017 11:36:16 GMT-0400 (Eastern Daylight Time) \n */\n\nexport let version = '0.17.0';\n\nexport default version;\n\n","/**\r\n * Created by elyde on 12/6/2016.\r\n * @file fjl.js\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @description Includes operations from haskell's Prelude.\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n * @todo any cross importing between packages should be done from the package object (package file: E.g., './src/functionOps/functionOps.js').\r\n * @todo decide how to include 'uncurried' members in the main export of the library.\r\n * @module fjl\r\n */\r\n\r\nexport * from './objectOps';\r\nexport * from './booleanOps';\r\nexport * from './functionOps';\r\nexport * from './listOps';\r\nexport * from './stringOps';\r\n\r\nexport {version} from './generated/version';\r\n"],"names":["fPureTakesOne","arg","f","name","fPureTakes2","arg1","arg2","fPureTakesOneOrMore","args","instanceOf","instanceConstructor","instance","hasOwnProperty","length","x","toString","keys","Object","obj","assign","obj0","objs","reduce","topAgg","agg","key","defineReverse","Array","prototype","reverse","reduceRight","item","push","map","filter","forEach","some","every","join","concat","slice","includes","value","xs","indexOf","lastIndexOf","split","apply","fn","call","curry","argsToCurry","concatedArgs","curryN","executeArity","curriedArgs","canBeCalled","curry2","curry3","curry4","curry5","_Number","Number","_NaN","_Null","_Undefined","_undefined","typeOf","retVal","constructorName","constructor","isNaN","_String","String","_Object","_Boolean","Boolean","_Function","Function","_Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","isFunction","isType","type","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isPromise","isUsableImmutablePrimitive","typeOfX","Type","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","typeOfValue","isset","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","_isType","notEmptyAndOfType","of","undefined","negateF","a","b","negateF3","c","negateF4","d","negateF5","e","negateP","negateFMany","isTruthy","isFalsy","alwaysTrue","alwaysFalse","prop","_apply","aggregateStr","aggregateArr","aggregateObj","ind","aggregatorByType","limit","out","aggregate","sliceFrom","startInd","arr","sliceTo","toInd","copy","genericAscOrdering","lengths","lists","lengthsToSmallest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceRightUntil","operation","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","_swap","ind1","ind2","tmp","_permutationsAlgo","listIn","remainderLen","i","newLen","append","listAppend","appendMany","Error","head","last","tail","init","uncons","unconsr","concatMap","foldableOfA","aggregator","foldr","intersperse","between","lastInd","aggregatorOp","foldl","intercalate","xss","transpose","numLists","longestListLen","maximum","outLists","outList","subsequences","pow","entry","j","permutations","foldl1","parts","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","repeat","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","count","splitAt","takeWhile","dropWhile","splitPoint","list2","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","lookup","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","lenOfTrimmed","zipWith","zipWithN","unzip","unzipN","lenItem0","any","p","all","and","or","sum","product","maximumBy","minimum","minimumBy","ordering","sortBy","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","b1","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","unionBy","alreadyAdded","union","intersect","intersectBy","list1","difference","array1","array2","complement","arr0","arrays","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","_objUnion","_objIntersect","_objDifference","_objComplement","pureInstanceOf","pureHasOwnProperty","pureAssign","pureAssignDeep","_call","PlaceHolder","placeHolderInstance","isPlaceHolder","replacePlaceHolders","array","element","shift","curry_","placeHolders","curryN_","__","freeze","curry2_","curry3_","curry4_","curry5_","id","compose","arg0","fPureTakesOne_","fPureTakes2_","fPureTakesOneOrMore_","until","predicate","typeInstance","flipN","flip","_until","_append","_appendMany","_concatMap","_map","_intersperse","_intercalate","_foldl","_foldr","_foldl1","_foldr1","_mapAccumL","_mapAccumR","_iterate","_repeat","_cycle","_unfoldr","_findIndex","_findIndices","_elemIndex","_elemIndices","_take","_drop","_splitAt","_takeWhile","_dropWhile","_dropWhileEnd","_span","_breakOnList","_at","_find","_filter","_partition","_elem","_notElem","_isPrefixOf","_isSuffixOf","_isInfixOf","_isSubsequenceOf","_groupBy","_stripPrefix","_zip","_zipWith","_zipWithN","zipWith3","zipWith4","zipWith5","_any","_all","_maximumBy","_minimumBy","scanl","scanl1","scanr","scanr1","_remove","_sortOn","_sortBy","_insert","_insertBy","_nubBy","_removeBy","_removeFirstsBy","_unionBy","_union","_intersect","_intersectBy","_difference","_complement","_split","lines","words","unwords","unlines","version"],"mappings":"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"}