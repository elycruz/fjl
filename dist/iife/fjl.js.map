{"version":3,"file":"fjl.js","sources":["../../src/object/typeOf.js","../../src/function/fnOrError.js","../../src/function/curry.js","../../src/utils.js","../../src/jsPlatform/object.js","../../src/object/is.js","../../src/object/lookup.js","../../src/jsPlatform/function.js","../../src/object/of.js","../../src/object/copy.js","../../src/object/searchObj.js","../../src/object/assignDeep.js","../../src/jsPlatform/list.js","../../src/function/negate.js","../../src/boolean.js","../../src/list/map.js","../../src/list/aggregation.js","../../src/list/utils.js","../../src/jsPlatform/array.js","../../src/jsPlatform/string.js","../../src/jsPlatform.js","../../src/list.js","../../src/object/setTheory.js","../../src/object/console.js","../../src/object/jsonClone.js","../../src/object/assocList.js","../../src/object/toArray.js","../../src/object.js","../../src/function/compose.js","../../src/function/flip.js","../../src/function/id.js","../../src/function/until.js","../../src/function.js","../../src/errorThrowing.js","../../src/string.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\n/**\r\n * Returns the constructor/class/type name of a value.\r\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n * @note Returns 'Undefined' if value is `undefined`\r\n * @note Returns 'Null' if value is `null`\r\n * For values that have no concrete constructors and/or casters\r\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n * @function module:object.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (value === undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","import {typeOf} from '../object/typeOf';\r\n\r\nconst\r\n\r\n    /**\r\n     * Throws error if `f` is not a function, else returns it (`f`).\r\n     * @private\r\n     * @param symbolName {String}\r\n     * @param f {*} - Expected function.\r\n     * @returns {Function}\r\n     */\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || !(f instanceof Function)) {\r\n            throw new Error(`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    }\r\n\r\n;\r\n\r\nexport default fnOrError;\r\n","import fnOrError from './fnOrError';\r\n\r\n/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf function\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\r\n\r\nexport const\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    curryNotFnErrPrefix = '`fn` in `curry(fn, ...args)`',\r\n\r\n    /**\r\n     * Curries a function up to a given arity.\r\n     * @function module:function.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param curriedArgs {...*}\r\n     * @returns {Function}\r\n     */\r\n    curryN = (executeArity, fn, ...curriedArgs) => {\r\n        return (...args) => {\r\n            let concatedArgs = curriedArgs.concat(args),\r\n                canBeCalled = (concatedArgs.length >= executeArity) || !executeArity;\r\n            return !canBeCalled ? curryN.apply(null, [executeArity, fnOrError(curryNotFnErrPrefix, fn)].concat(concatedArgs)) :\r\n                fnOrError(curryNotFnErrPrefix, fn).apply(null, concatedArgs);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Curries a function based on it's defined arity (argument's arrayOps expected length).\r\n     * @function module:function.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => curryN(fnOrError(curryNotFnErrPrefix, fn).length, fn, ...argsToCurry),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (won't call function until 2 or more args).\r\n     * @function module:function.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (won't call function until 3 or more args).\r\n     * @function module:function.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (won't call function until 4 or more args).\r\n     * @function module:function.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5 (won't call function until 5 or more args).\r\n     * @function module:function.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","import {typeOf} from './object/typeOf';\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    fPureTakesOne = name => curry((arg, f) => f[name](arg)),\r\n\r\n    fPureTakes2 = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    fPureTakes3 = name => curry((arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3)),\r\n\r\n    fPureTakes4 = name => curry((arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4)),\r\n\r\n    fPureTakes5 = name => curry((arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5)),\r\n\r\n    fPureTakesOneOrMore = name => curry2((f, ...args) => f[name](...args)),\r\n\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || typeof f !== 'function') {\r\n            throw new Error (`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    };\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n * Defines some of the platform methods for objects (the ones used within `fjl`) uncurried for use\r\n * throughout the library.  @note Doesn't include all methods for objects just the ones used in\r\n *  the library.\r\n * @todo change all files named '*UnCurried' to '*_'.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived object.\r\n     * @function module:_jsPlatformobject.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = curry((instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor),\r\n\r\n    /**\r\n     * @function module:_jsPlatformobject.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:_jsPlatformobject.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * Gets own enumerable keys of passed in object (`Object.keys`).\r\n     * @function module:_jsPlatformobject.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    {keys} = Object,\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:_jsPlatformobject.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() => Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            (obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0)\r\n        )();\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\n\r\nimport {typeOf} from './typeOf';\r\nimport {instanceOf, length, keys, hasOwnProperty} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @function module:object.toTypeRef\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    toTypeRef = type => {\r\n        if (!type) {\r\n            return typeOf(type);\r\n        }\r\n        else if (type.constructor === String || (type instanceof Function)) {\r\n            return type;\r\n        }\r\n        return typeOf(type);\r\n    },\r\n\r\n    toTypeRefName = Type => {\r\n        const ref = toTypeRef(Type);\r\n        return ref instanceof Function ? ref.name : ref;\r\n    },\r\n\r\n    /**\r\n     * Returns whether a value is a function or not.\r\n     * @function module:object.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = instanceOf(Function),\r\n\r\n    /**\r\n     * Strict type checker.  Checks if given value is a direct instance of given type;  E.g.,\r\n     * @example\r\n     *   isType(String, 'abcdefg')  === true // true\r\n     *   isType(String.name, 'abcdefg') === true\r\n     *   isType(Number, NaN) === false\r\n     *   isType(Number, 99) === true\r\n     *   isType('Null', 99) === false // though, for `null` and `undefined` checks\r\n     *                                // @see `isset`, in this module, instead\r\n     *   isType('Undefined', undefined) === true // true\r\n     *\r\n     * @note Useful where absolute types, or some semblance thereof, are required.\r\n     * @function module:object.isType\r\n     * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry((type, obj) => typeOf(obj) === toTypeRefName(type)),\r\n\r\n    /**\r\n     * Loose type checker;  E.g., If `type` is not a constructor, but a constructor name, does a type check on\r\n     * constructor names, else if first check fails and `type` is a constructor, performs an `instanceof` check\r\n     * on value with constructor.\r\n     * @note For `null` and `undefined` their class cased names can be used for type checks\r\n     * `isOfType('Null', null) === true (passes strict type check)` (or better yet `isset` can be used).\r\n     * @throwsafe - Doesn't throw on `null` or `undefined` `obj` values.\r\n     * @example\r\n     * isOfType(Number, 99) === true        // true  (passes strict type check (numbers are not instances of `Number`\r\n     *                                      //        constructor)\r\n     * isOfType('Number', 99) === true      // true  (passes strict type check)\r\n     * isOfType(Number, NaN) === true       // true. (passes instance of check)\r\n     *                                      //        If you want \"true\" strict type checking use `isType`\r\n     * isOfType(Object, []) === true        // true  (passes instance of check)\r\n     * isOfType(Array, []) === true         // true  (passes instance of check)\r\n     * isOfType(Object, {}) === true        // true  (passes instance of check)\r\n     * isOfType(Object.name, {}) === true   // true  (Passes strict type check)\r\n     * class Abc extends String {}\r\n     * isOfType(String, new Abc('abcd')) // true (passes instanceof check)\r\n     *\r\n     * @function module:is.isOfType\r\n     * @param type {Function|String} - Type reference (constructor or `constructor.name`).\r\n     * @param x {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isOfType = curry((type, x) => isType(type, x) || instanceOf(type, x)),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:object.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a boolean depicting whether a value is callable or not.\r\n     * @function module:object.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an array (same as `Array.isArray`).\r\n     * @function module:object.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    {isArray} = Array,\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:object.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = isType(_Object),\r\n\r\n    /**\r\n     * Checks if value is a boolean.\r\n     * @function module:object.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = isType(_Boolean),\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:object.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = isType(_Number),\r\n\r\n    /**\r\n     * Checks whether value is a string or not.\r\n     * @function module:object.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = isType(_String),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:object.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = isType(_Map),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:object.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = isType(_Set),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:object.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap =isType(_WeakMap),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:object.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = isType(_WeakSet),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:object.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = isType(_Undefined),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:object.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = isType(_Null),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:object.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = isType(_Symbol),\r\n\r\n    /**\r\n     * Checks if given `x` is set and of one of\r\n     *  [String, Boolean, Number, Symbol] (null and undefined are immutable\r\n     *  but are not \"usable\" (usually not what we want to operate on).\r\n     * @function module:object.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return isset(x) &&\r\n            [_String, _Number, _Boolean, _Symbol]\r\n                .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:object.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => !length(x),\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:object.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:object.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in value is empty;  I.e.,\r\n     *  check for one of '', 0, `null`, `undefined`, `false`, empty array, empty object, empty function (zero arity),\r\n     *  or empty collection (es6 Map, Set, WeakMap, or WeakSet etc. (`!value.size`);\r\n     * @function module:object.isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        let retVal;\r\n        if (!value) { // if '', 0, `null`, `undefined`, or `false` then is empty\r\n            retVal = true;\r\n        }\r\n        const typeOfValue = typeOf(value);\r\n        if (typeOfValue === _Array || typeOfValue === _Function) {\r\n            retVal = isEmptyList(value);\r\n        }\r\n        else if (typeOfValue === _Number) {\r\n            retVal = false;\r\n        }\r\n        else if (typeOfValue === _Object) {\r\n            retVal = isEmptyObject(value);\r\n        }\r\n        else if (hasOwnProperty('size', value) && isNumber(value.size)) {\r\n            retVal = isEmptyCollection(value);\r\n        }\r\n        else {\r\n            retVal = !value;\r\n        }\r\n        return retVal;\r\n    },\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null or not.\r\n     * @function module:object.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => x !== null && x !== undefined;\r\n","/**\r\n * @memberOf object\r\n */\r\n\r\nimport {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Looks up property and returns it's value; Else `undefined`.\r\n * Method is null safe (will not throw on `null` or `undefined`).\r\n * @function module:object.lookup\r\n * @param key {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\r\nexport const lookup = curry((key, obj) => isset(obj) ? obj[key] : undefined);\r\n","import {curry} from '../function/curry';\r\n\r\n/**\r\n * Created by elydelacruz on 9/7/2017.\r\n * @module _jsPlatform_function\r\n * @private\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:_jsPlatform_function.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry((fn, args) => fn.apply(null, args)),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:_jsPlatform_function.call\r\n     * @param fn {Function}\r\n     * @param args {...*}\r\n     * @returns {*}\r\n     */\r\n    call = (fn, ...args) => apply(fn, args);\r\n","import {isFunction, isset, isUsableImmutablePrimitive} from './is';\r\nimport {hasOwnProperty} from '../jsPlatform/object';\r\nimport {apply} from '../jsPlatform/function';\r\n\r\n/**\r\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n * ```\r\n * // - If exists `(value).constructor.of` uses this.\r\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\r\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n * // - Else if constructor is a function, thus far, then calls constructor using\r\n * //      the `new` keyword (with any passed in args).\r\n * ```\r\n * @function module:object.of\r\n * @param x {*} - Value to derive returned value's type from.\r\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n */\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","import {typeOf} from './typeOf';\r\nimport {of} from './of';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Make a copy of a value or optionally copy incoming value onto an outgoing value (second parameter).\r\n     * @note If incoming thing is an immmutable primitive (string, number, symbol, null, undefined, boolean)\r\n     *  it is returned as is.\r\n     * @function module:object.copy\r\n     * @param x {*} - Thing to copy.\r\n     * @param [out = undefined] {*} - Optional value to copy on to.  Not required.\r\n     * @returns {*} - Copied thing or optionally outgoing value copied onto.\r\n     */\r\n    copy = (x, out) => {\r\n        // if `null`, `undefined`, `''`, `0`, `false` return\r\n        if (!x) { return x; }\r\n        switch (typeOf(x)) {\r\n            case Array.name:\r\n                return !out ? x.slice(0) : Object.assign(out, x);\r\n\r\n            // If immutable primitive, return it\r\n            case Symbol.name:\r\n            case Boolean.name:\r\n            case String.name:\r\n            case Number.name:\r\n            case Promise.name:\r\n            case Function.name:\r\n            case 'NaN':\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return x;\r\n\r\n            case 'Map':\r\n            case 'Set':\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n                return new x.constructor(Array.from(x));\r\n\r\n            // Else make copy\r\n            default:\r\n                return Object.assign(!out ? of(x) : out, x);\r\n        }\r\n    }\r\n;\r\n\r\nexport default copy;\r\n","import {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Gives you value at key/namespace-key within `obj`;  E.g.,\r\n     * searchObj('all.your.base', {all: {your: {base: 99}}}) === 99 // `true`\r\n     * @note If key is unreachable (undefined) returns `undefined`.\r\n     *  Useful in cases where we do not want to check each key along the way before getting/checking value;  E.g.,\r\n     * @example\r\n     * ```\r\n     * if (obj && obj.all && obj.all.your && obj.all.your.base) {\r\n     *   // Thing we want to do\r\n     * }\r\n     *\r\n     * // So with our function becomes\r\n     * if (searchObj('all.your.base', obj)) {\r\n     *   // Thing we want to do\r\n     * }\r\n     * ```\r\n     * @function module:object.searchObj\r\n     * @param nsString {String}\r\n     * @param obj {*}\r\n     * @returns {*}\r\n     */\r\n    searchObj = curry((nsString, obj) => {\r\n        if (!obj) { return obj; }\r\n        if (nsString.indexOf('.') === -1) {\r\n            return obj[nsString];\r\n        }\r\n        const parts = nsString.split('.'),\r\n            limit = parts.length;\r\n        let ind = 0,\r\n            parent = obj;\r\n        for (; ind < limit; ind += 1) {\r\n            const node = parent[parts[ind]];\r\n            if (!isset(node)) {\r\n                return node;\r\n            }\r\n            parent = node;\r\n        }\r\n        return parent;\r\n    })\r\n;\r\n","\r\nimport {isObject} from './is';\r\nimport {keys, hasOwnProperty} from '../jsPlatform/object';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one (takes two or more args).\r\n     * @function module:object.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param [objs] {...{Object}} - One or more objects to merge onto `obj0`.\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = (obj0, ...objs) =>\r\n        !obj0 ? obj0 : objs.reduce((topAgg, obj) =>\r\n            !obj ? topAgg : keys(obj).reduce((agg, key) => {\r\n                let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                // If property is not writable move to next item in collection\r\n                if (hasOwnProperty(key, agg) && propDescription &&\r\n                    !(propDescription.get && propDescription.set) &&\r\n                    !propDescription.writable) {\r\n                    return agg;\r\n                }\r\n                if (isObject(agg[key]) && isObject(obj[key])) {\r\n                    assignDeep(agg[key], obj[key]);\r\n                }\r\n                else { agg[key] = obj[key]; }\r\n                return agg;\r\n            }, topAgg)\r\n        , obj0);\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n *      on both strings and arrays.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:_jsPlatform_list.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:_jsPlatform_list.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:_jsPlatform_list.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:_jsPlatform_list.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:_jsPlatform_list.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\nimport {apply} from '../jsPlatform/function';\r\nimport {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Negates a function that takes one/no argument.\r\n     * @function module:function.negateF\r\n     * @param fn {Function}\r\n     * @returns {function(*=): boolean}\r\n     */\r\n    negateF = fn => x => !fn(x),\r\n\r\n    /**\r\n     * Takes a function that takes two parameters and returns a negated version of given\r\n     * function.\r\n     * @function module:_negate.negateF2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF2 = fn => curry((a, b) => !fn(a, b)),\r\n\r\n    /**\r\n     * Takes a function that takes three parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF3 = fn => curry((a, b, c) => !fn(a, b, c)),\r\n\r\n    /**\r\n     * Returns a negated version of given function.\r\n     * Returned function is variadiac (takes one or more arguments).\r\n     * @note function returned is uncurried.\r\n     * @uncurried\r\n     * @function module:function.negateFN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFN = fn => (...args) => !apply(fn, args);\r\n","/**\r\n * @module boolean\r\n * @description Contains functional version of 'always-true', 'always-false', 'is-truthy', and 'is-falsy'.\r\n */\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:boolean.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:boolean.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value,\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:boolean.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:boolean.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false;\r\n","import {length} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * @function module:list.map\r\n * @param fn {Function} - Function to map on array.\r\n * @param xs {Array}\r\n * @returns {Array}\r\n */\r\nconst map = curry((fn, xs) =>  {\r\n    let ind = 0,\r\n        limit = length(xs),\r\n        out = [];\r\n    if (!limit) { return out; }\r\n    while (ind < limit) {\r\n        out.push(fn(xs[ind], ind, xs));\r\n        ind += 1;\r\n    }\r\n    return out;\r\n});\r\n\r\nexport default map;\r\n","\r\nexport const\r\n\r\n    /**\r\n     * Pushes incoming `item` onto array (`agg`) and return array (`agg`).\r\n     * @private\r\n     * @param agg {Array}\r\n     * @param item {*}\r\n     * @returns {Array}\r\n     */\r\n    aggregateArr$ = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    }\r\n\r\n;\r\n","/**\r\n * List operator utils module.\r\n * @module _listOpUtils\r\n * @private\r\n */\r\nimport {apply}          from '../jsPlatform/function';  // un-curried version\r\nimport {slice}          from '../jsPlatform/list';      // un-curried version good for both strings and arrays\r\nimport {length}         from '../jsPlatform/object';\r\nimport {alwaysFalse}    from '../boolean';\r\nimport map              from './map';\r\nimport {curry}          from '../function/curry';\r\n\r\nexport * from './aggregation';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @function module:listUtils.sliceFrom\r\n     * @param startInd {Number}\r\n     * @param arr {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = curry((startInd, arr) => slice(startInd, undefined, arr)),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @function module:listUtils.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = curry((toInd, xs) => slice(0, toInd, xs)),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function _listOpUtils.sliceCopy\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceCopy = sliceFrom(0),\r\n\r\n    /**\r\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n     * @function module:listUtils.genericAscOrdering\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {number}\r\n     */\r\n    genericAscOrdering = curry((a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    }),\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @function module:listUtils.lengths\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = (...lists) => length(lists) ? map(length, lists) : [],\r\n\r\n    /**\r\n     * @function module:listUtils.lengthsToSmallest\r\n     * @param lists {...(Array|String|*)}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengthsToSmallest = (...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : sliceCopy(list), lists);\r\n    },\r\n\r\n    /**\r\n     * Reduces until predicate.\r\n     * @param pred\r\n     * @param op\r\n     * @param agg\r\n     * @param arr\r\n     * @returns {*}\r\n     */\r\n    reduceUntil = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate (from the right).\r\n     * @param pred\r\n     * @param op\r\n     * @param agg\r\n     * @param arr\r\n     * @returns {*}\r\n     */\r\n    reduceRightUntil = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    reduce = reduceUntil(alwaysFalse),\r\n\r\n    reduceRight = reduceRightUntil(alwaysFalse),\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:listOpUtilslastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:listOpUtilsfindIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = curry((pred, arr) => {\r\n        let ind = -1,\r\n            predicateFulfilled = false;\r\n        const limit = length(arr);\r\n        while (ind < limit && !predicateFulfilled) {\r\n            predicateFulfilled = pred(arr[++ind], ind, arr);\r\n        }\r\n        return ind;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:listOpUtilsfindIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = curry((pred, arr) => {\r\n        const limit = length(arr);\r\n        let ind = limit,\r\n            predicateFulfilled = false;\r\n        for (; ind >= 0 && !predicateFulfilled; --ind) {\r\n            predicateFulfilled = pred(arr[ind], ind, arr);\r\n        }\r\n        return ind;\r\n    }),\r\n\r\n    /**\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = curry((pred, xs) => {\r\n        if (!xs || !xs.length) { return undefined; }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out.length ? out : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listOpUtilsfind\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    })\r\n\r\n;\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n * @module _jsPlatform_arrayOps\r\n * @private\r\n * @todo updated doc blocks to list correct/updated module name.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Array.prototype.reverse generator (generates a function that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, []),\r\n\r\n    /**\r\n     * Maps a function to functor (list etc.).\r\n     * @function module:_jsPlatform_array.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from the right with passed in function.\r\n     * @function module:_jsPlatform_array.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an list (shimmed if not exists).\r\n     * @function module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:_string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * @module jsPlatform_\r\n * @private\r\n */\r\nexport * from './jsPlatform/object';\r\nexport * from './jsPlatform/array';\r\nexport * from './jsPlatform/list';\r\nexport * from './jsPlatform/string';\r\nexport * from './jsPlatform/function';\r\n","/**\r\n * List operations module (un-curried version).\r\n * @module list\r\n */\r\nimport {concat as listAppend, indexOf, slice, includes} from './jsPlatform/list';\r\nimport {apply}              from './jsPlatform/function';\r\nimport {negateF3, negateF2}   from './function/negate';\r\nimport {isTruthy, isFalsy}  from './boolean';\r\nimport {lookup, length}       from './object';\r\nimport map                  from './list/map';\r\nimport {curry} from './function/curry';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    lengthsToSmallest, aggregateArr$,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, sliceCopy, genericAscOrdering\r\n}\r\n    from './list/utils';\r\n\r\nexport {map};\r\n\r\nexport {slice, includes, indexOf, lastIndexOf, split, push} from './jsPlatform';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Append two, or more, lists, i.e.,\r\n     * @example\r\n     * expectEqual(append(take(13, alphabetString), drop(13, alphabetString)), alphabetString); // true\r\n     *\r\n     * // Another example\r\n     * const result = append(\r\n     *   alphabetStr.split(''),\r\n     *   alphabetStr.split('')\r\n     * ),\r\n     * expected = repeat(2, alphabetStr).split('');\r\n     *\r\n     * shallowEquals(result, expected) === true // `true`\r\n     *\r\n     * @function module:list.append\r\n     * @param [args] {...(Array|String|*)} - One or more lists or list likes (strings etc.).\r\n     * @returns {(Array|String|*)} - Same type as list like passed in.\r\n     */\r\n    append = (...args) => {\r\n        const len = length(args);\r\n        if (!len) { return []; }\r\n        else if (len === 1) { return sliceCopy(args[0]); }\r\n        if (len >= 2) { return apply(listAppend, args); }\r\n        throw new Error(`'\\`append\\` requires at 2 or more arguments.  ${length(args)} args given.`);\r\n    },\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:list.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:list.last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:list.tail\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:list.init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:list.uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|undefined}\r\n     */\r\n    uncons = xs =>\r\n        !xs || length(xs) === 0 ? undefined : [head(xs), tail(xs)],\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:list.unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    unconsr = xs => !xs || length(xs) === 0 ? undefined : [init(xs), last(xs)],\r\n\r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:list.concat\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    concat = xs => !length(xs) ? sliceCopy(xs) : apply(append, xs),\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:list.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array}\r\n     * @returns {Array}\r\n     */\r\n    concatMap = curry((fn, foldableOfA) => concat(map(fn, foldableOfA))),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:list.reverse\r\n     * @param x {Array}\r\n     * @returns {Array}\r\n     */\r\n    reverse = x => foldr((agg, item) => (agg.push(item), agg), [], x),\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:list.intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array} - List.\r\n     * @returns {Array}\r\n     */\r\n    intersperse = curry((between, arr) => {\r\n        const limit = length(arr),\r\n            lastInd = limit - 1,\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        return foldl((agg, item, ind) => (\r\n                ind === lastInd ?\r\n                    agg.push(item) :\r\n                    agg.push(item, between),\r\n                agg\r\n            ), out, arr);\r\n    }),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:list.intercalate\r\n     * @param xs {Array}\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    intercalate = curry((xs, xss) => concat(intersperse(xs, xss))),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @todo upgrade this function to support lists of strings.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:list.transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return [];\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return filter(x => length(x), outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:list.subsequences\r\n     * @jsperftest https://jsperf.com/subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array.<Array>}\r\n     */\r\n    subsequences = xs => {\r\n        const listLen = length(xs),\r\n            len = Math.pow(2, listLen),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            let entry = [];\r\n            for (let j = 0; j < listLen; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with the given indices swapped.\r\n     * @function module:list.swapped\r\n     * @param ind1 {Number}\r\n     * @param ind2 {Number}\r\n     * @param list {Array}\r\n     * @returns {Array} - Copy of incoming with swapped values at indices.\r\n     */\r\n    swapped = curry((ind1, ind2, list) => {\r\n        const out = sliceCopy(list),\r\n            tmp = out[ind1];\r\n        out[ind1] = out[ind2];\r\n        out[ind2] = tmp;\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Returns a list of permutations for passed in list.\r\n     *  Use caution with lists above a length of 15 (will take long due to nature of\r\n     *  algorithm).\r\n     * @function module:list.permutations\r\n     * @param xs {Array} - List.\r\n     * @returns {Array<Array|String|*>} - Array of permutations.\r\n     */\r\n    permutations = xs => {\r\n        const limit = length(xs);\r\n\r\n        if (!limit || limit === 1) {\r\n            return [xs];\r\n        }\r\n\r\n        let list = sliceCopy(xs),\r\n            c = repeat(limit, 0),\r\n            i = 0;\r\n\r\n        const out = [list];\r\n\r\n        for (; i < limit; i++) {\r\n            if (c[i] < i) {\r\n                list = swapped(i % 2 === 0 ? 0 : c[i], i, list);\r\n                out.push(list);\r\n                c[i] += 1;\r\n                i = 0;\r\n                continue;\r\n            }\r\n            c[i] = 0;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\r\n     * @function module:list.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldl = reduce,\r\n\r\n    /**\r\n     * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\r\n     * @function module:list.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldr = reduceRight,\r\n\r\n    /**\r\n     * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldl1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldl1 = curry((op, xs) => {\r\n        const parts = uncons(xs);\r\n        return !parts ? [] : reduce(op, parts[0], parts[1]);\r\n    }),\r\n\r\n    /**\r\n     * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldr1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldr1 = curry((op, xs) => {\r\n        const parts = unconsr(xs);\r\n        return !parts ? [] : reduceRight(op, parts[1], parts[0]);\r\n    }),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * iterate f x returns an infinite list of repeated applications of f to x.\r\n     * @function module:list.iterate\r\n     * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation.\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry((limit, op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            lastX = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out.push(lastX);\r\n            lastX = op(lastX, ind);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times.\r\n     * @function module:list.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    repeat = curry((limit, x) => iterate(limit, a => a, x)),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:list.replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    replicate = repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:list.cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    cycle = curry((limit, xs) => concat(replicate(limit, xs))),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:list.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry((op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:list.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:list.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:list.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry((x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry((value, xs) => findIndices(x => x === value, xs)),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:list.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = sliceTo,\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:list.drop\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = sliceFrom,\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:list.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String} - functor (list or string) to split.\r\n     * @returns {Array|String} - List like type passed\r\n     */\r\n    splitAt = (ind, list) => [ sliceTo(ind, list), sliceFrom(ind, list) ],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:list.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry((pred, list) =>\r\n        reduceUntil(\r\n            negateF3(pred),  // predicate\r\n            aggregateArr$,   // operation\r\n            [],             // aggregator\r\n            list\r\n        )),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:list.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry((pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.dropWhileEnd\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry((pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhereRight((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            sliceTo(splitPoint + 1, list);\r\n    }),\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @function module:list.span\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    span = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(negateF3(pred), list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * breakOnList, applied to a predicate p and a list xs, returns a tuple\r\n     * where first element is longest prefix (possibly empty) of xs of elements\r\n     * that do not satisfy p and second element is the remainder of the list:\r\n     * @haskellExample\r\n     * Replace `break` with `breakOnList` for our version.\r\n     * ```\r\n     * break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\r\n     * break (< 9) [1,2,3] == ([],[1,2,3])\r\n     * break (> 9) [1,2,3] == ([1,2,3],[])\r\n     * ```\r\n     * @function module:list.breakOnList\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    breakOnList = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(pred, list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * Gets item at index.\r\n     * @function module:list.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*|undefined} - Item or `undefined`.\r\n     */\r\n    at = lookup,\r\n\r\n    /**\r\n     * Find an item in structure of elements based on given predicate (`pred`).\r\n     * @function module:list.find\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*} - Found item.\r\n     */\r\n    find = findWhere,\r\n\r\n    /**\r\n     * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\r\n     * @function module:list.filter\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array} - Structure of filtered elements.\r\n     */\r\n    filter = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out.push(xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateF3(p), xs)]`.\r\n     * @function module:list.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry((pred, list) =>\r\n        !length(list) ?\r\n            [[], []] :\r\n                [filter(pred, list), filter(negateF3(pred), list)]),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether an element exists in given structure of elements.\r\n     * @function module:list.elem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    elem = includes,\r\n\r\n    /**\r\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\r\n     * @function module:list.notElem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    notElem = negateF2(includes),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a prefix of list `xs2`\r\n     * @function module:list.isPrefixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isPrefixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a suffix of list `xs2`\r\n     * @function module:list.isSuffixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSuffixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is an infix of list `xs2`\r\n     * @function module:list.isInfixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isInfixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a sub-sequence of list `xs2`\r\n     * @function module:list.isSubsequenceOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSubsequenceOf = curry((xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:list.group\r\n     * @param xs {Array|String}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    group = xs => groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:list.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry((equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return sliceCopy(xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    }),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(inits('abc'), ['','a','ab','abc'])\r\n     * ```\r\n     * @function module:list.inits\r\n     * @haskellType `inits :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => init(list), xs),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\r\n     * ```\r\n     * @function module:list.tails\r\n     * @haskellType `tails :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => tail(list), xs),\r\n\r\n    /**\r\n     * Strips prefix list from given list\r\n     * @function module:list.stripPrefix\r\n     * @param prefix {Array|String|*}\r\n     * @param list {Array|string|*}\r\n     * @returns {Array|*}\r\n     */\r\n    stripPrefix = curry((prefix, list) =>\r\n        isPrefixOf(prefix, list) ?\r\n            splitAt(length(prefix), list)[1] :\r\n            sliceCopy(list)),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:list.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry((arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:list.zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    zipN = (...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, filter(length, lists)),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:list.zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip3 = curry((arr1, arr2, arr3) => zipN(arr1, arr2, arr3)),\r\n\r\n    /**\r\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:list.zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip4 = curry((arr1, arr2, arr3, arr4) => zipN(arr1, arr2, arr3, arr4)),\r\n\r\n    /**\r\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:list.zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @param arr5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip5 = curry((arr1, arr2, arr3, arr4, arr5) => zipN(arr1, arr2, arr3, arr4, arr5)),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:list.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry((op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:list.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = (op, ...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr$(agg, apply(op, map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:list.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = curry((op, xs1, xs2, xs3) => zipWithN(op, xs1, xs2, xs3)),\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:list.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = curry((op, xs1, xs2, xs3, xs4) => zipWithN(op, xs1, xs2, xs3, xs4)),\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:list.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @param xs5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = curry((op, xs1, xs2, xs3, xs4, xs5) => zipWithN(op, xs1, xs2, xs3, xs4, xs5)),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:list.unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    unzip = arr =>\r\n        foldl((agg, item) => {\r\n            agg[0].push(item[0]);\r\n            agg[1].push(item[1]);\r\n            return agg;\r\n        }, [[], []], arr),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:list.unzipN\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    /**\r\n     * Returns true if any item in container passes predicate `p`.\r\n     * @function module:list.any\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    any = curry((p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Returns true if all items in container pass predicate `p`.\r\n     * @function module:list.all\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    all = curry((p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (limit === 0) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Conjuction of container of bools (or truthy and/or falsy values);  Returns\r\n     * `true` if all in container are 'truthy' else returns `false`\r\n     * @function module:list.and\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    and = xs => all(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether any item in container is 'truthy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.or\r\n     * @haskellType `or :: Bool -> Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    or = xs => any(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether all items in container are 'falsy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.not\r\n     * @haskellType `not :: Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    not = xs => all(isFalsy, xs),\r\n\r\n    /**\r\n     * Computes the sum of the numbers of a structure.\r\n     * @function module:list.sum\r\n     * @haskellType `sum :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    sum = list => foldl((agg, x) => agg + x, 0, list),\r\n\r\n    /**\r\n     * Computes the product of the numbers of a structure.\r\n     * @function module:list.product\r\n     * @haskellType `product :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    product = list => foldl((agg, x) => agg * x, 1, list),\r\n\r\n    /**\r\n     * Returns the largest element in a non-empty structure of elements.\r\n     * @function module:list.maximum\r\n     * @haskellType `maximum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    maximum = list => last(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * Returns the smallest element in a non-empty structure of elements.\r\n     * @function module:list.minimum\r\n     * @haskellType `minimum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    minimum = list => head(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\r\n     * ```\r\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\r\n     * ```\r\n     * Also note that:\r\n     * ```\r\n     * last (scanl f z xs) == foldl f z xs.\r\n     * ```\r\n     * @function module:list.scanl\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            result = zero,\r\n            out = [];\r\n        while (ind < limit) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind++;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `scanl1` is a variant of `scanl` that has no starting value argument:\r\n     * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\r\n     * @function module:list.scanl1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) { return []; }\r\n        return scanl(fn, head(xs), tail(xs));\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanl` but from the right (similiar to `foldr`'s relationship to `foldl`).\r\n     * Note also `scanr`'s relationship ot `foldr`:\r\n     * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\r\n     * @function module:list.scanr\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = limit - 1,\r\n            result = xs[0],\r\n            out = [];\r\n        while (ind > -1) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind--;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanr` but takes no zero/accumulator value.\r\n     * @function module:list.scanr1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) { return []; }\r\n        return scanr(fn, last(xs), init(xs));\r\n    }),\r\n\r\n    /**\r\n     * The nub function removes duplicate elements from a list.\r\n     * In particular, it keeps only the first occurrence of each element.\r\n     * (The name nub means `essence'.) It is a special case of nubBy, which\r\n     * allows the programmer to supply their own equality test.\r\n     * ```shallowCompare( nub ([1,2,3,4,3,2,1,2,4,3,5]), [1,2,3,4,5] )```\r\n     * @function module:list.nub\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nub = list => nubBy((a, b) => a === b, list),\r\n\r\n    /**\r\n     * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\r\n     * For example, `remove('a', 'banana') === 'bnana';`\r\n     * @function module:list.remove\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    remove = curry((x, list) => removeBy((a, b) => a === b, x, list)),\r\n\r\n    /**\r\n     * The sort function implements a stable sorting algorithm.\r\n     * It is a special case of sortBy, which allows the programmer\r\n     * to supply their own comparison function.\r\n     * ```shallowCompare(sort ([1,6,4,3,2,5]), [1,2,3,4,5,6]) // true```\r\n     * @function module:list.sort\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sort = xs => sortBy(genericAscOrdering, xs),\r\n\r\n    /**\r\n     * Sort a list by comparing the results of a key function applied to each\r\n     * element. sortOn f is equivalent to sortBy (comparing f), but has the\r\n     * performance advantage of only evaluating f once for each element in the\r\n     * input list. This is called the decorate-sort-undecorate paradigm, or\r\n     * Schwartzian transform.\r\n     *\r\n     * Elements are arranged from from lowest to highest, keeping duplicates\r\n     * in the order they appeared in the input.\r\n     *\r\n     * Ex:\r\n     * ```\r\n     * shallowEquals(\r\n     *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\r\n     *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\r\n     * ) // true\r\n     * ```\r\n     * @function module:list.sortOn\r\n     * @param valueFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sortOn = curry((valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            sortBy(\r\n                // Ordering\r\n                ([a0], [b0]) => genericAscOrdering(a0, b0),\r\n\r\n                // Decorate\r\n                map(item => [valueFn(item), item], xs)\r\n            )\r\n        )\r\n    ),\r\n\r\n    /**\r\n     * The sortBy function is the non-overloaded (in haskell terms) version of sort.\r\n     * @haskellExample ```\r\n     *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\r\n     *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\r\n     * ```\r\n     * @function module:list.sortBy\r\n     * @param orderingFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sortBy = curry((orderingFn, xs) => sliceCopy(xs).sort(orderingFn || genericAscOrdering)),\r\n\r\n    /**\r\n     * The insert function takes an element and a list and inserts the element\r\n     * into the list at the first position where it is less than or equal to the\r\n     * next element. In particular, if the list is sorted before the call, the\r\n     * result will also be sorted. It is a special case of insertBy, which allows\r\n     * the programmer to supply their own comparison function.\r\n     * @function module:list.insert\r\n     * @param x {*}\r\n     * @param xs {Array|*}\r\n     * @returns {Array}\r\n     */\r\n    insert = curry((x, xs) => {\r\n        if (!length(xs)) {\r\n            return [x];\r\n        }\r\n        const foundIndex = findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? [x] :\r\n            concat(intersperse([x], splitAt(foundIndex, xs)));\r\n    }),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:list.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` === // something that is order-able\r\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array} - List to insert into (note new list is returned)\r\n     * @returns {Array} - New list.\r\n     */\r\n    insertBy = curry((orderingFn, x, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return [x];\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = splitAt(ind, xs);\r\n                return concat([parts[0], [x], parts[1]]);\r\n            }\r\n        }\r\n        return aggregateArr$(sliceCopy(xs), x);\r\n    }),\r\n\r\n    /**\r\n     * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\r\n     * @function module:list.nubBy\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nubBy = curry((pred, list) => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = [],\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out.push(currItem);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Behaves the same as `remove`, but takes a user-supplied equality predicate.\r\n     * @function module:list.removeBy\r\n     * @param pred {Function}\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeBy = curry((pred, x, list) => { // @todo optimize this implementation\r\n        const foundIndex = findIndex(item => pred(x, item), list),\r\n            parts = splitAt(foundIndex > -1 ? foundIndex : 0, list); // @todo correct this implementation\r\n        return append(parts[0], tail(parts[1]));\r\n    }),\r\n\r\n    /**\r\n     * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\r\n     * occurrence of each element of the second list removed.\r\n     * @function module:list.removeFirstBy\r\n     * @param pred {Function}\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeFirstsBy = curry((pred, xs1, xs2) =>\r\n        foldl((agg, x2) => removeBy(pred, x2, agg), xs1, xs2)),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:list.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    unionBy = curry((pred, arr1, arr2) =>\r\n        foldl((agg, b) => {\r\n                const alreadyAdded = any(a => pred(a, b), agg);\r\n                return !alreadyAdded ? (agg.push(b), agg) : agg;\r\n            }, sliceCopy(arr1), arr2\r\n        )),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:list.union\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    union = curry((arr1, arr2) =>\r\n        append(arr1,\r\n            filter(elm => !includes(elm, arr1), arr2))),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:list.intersect\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    intersect = curry((arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            filter(elm => includes(elm, arr2), arr1)),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:list.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array}\r\n     * @param list2 {Array}\r\n     * @return {Array}\r\n     */\r\n    intersectBy = curry((pred, list1, list2) =>\r\n        foldl((agg, a) =>\r\n                any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg\r\n            , [], list1)),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:list.difference\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    difference = curry((array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return sliceCopy(array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? (agg.push(elm), agg) : agg\r\n            , [], array1);\r\n    }),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:list.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = (arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays);\r\n","import {assignDeep} from './assignDeep';\r\nimport {hasOwnProperty, keys} from '../jsPlatform/object';\r\nimport {foldl} from '../list';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    objUnion = curry((obj1, obj2) => assignDeep(obj1, obj2)),\r\n\r\n    objIntersect = curry((obj1, obj2) => foldl((agg, key) => {\r\n        if (hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objDifference = curry((obj1, obj2) => foldl((agg, key) => {\r\n        if (!hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objComplement = (obj0, ...objs) => foldl((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs);\r\n","/**\r\n * @module console\r\n * @description Console exports.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * `Console.log` method.\r\n     * @function module:console.log\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    log = console.log.bind(console),\r\n\r\n    /**\r\n     * `Console.error` method.\r\n     * @function module:console.error\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    error = console.error.bind(console),\r\n\r\n    /**\r\n     * Peeks (console.log) at incoming value(s) and returns the last value.\r\n     * @function module:console.peek\r\n     * @param args {...*}\r\n     * @returns {*} Last given value (if one or more values) else first value.\r\n     */\r\n    peek = (...args) => (log(...args), args.pop())\r\n\r\n;\r\n","export const\r\n\r\n    /**\r\n     * Clones and object or array using `JSON.parse(JSON.stringify(...))` pattern.\r\n     * @function module:object.jsonClone\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    jsonClone = x => JSON.parse(JSON.stringify(x))\r\n\r\n;\r\n","import {isArray, isType} from './is';\r\nimport {keys} from '../jsPlatform/object';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns an associated list from given object.\r\n     * @note Useful for working with plain javascript objects.\r\n     * @function module:object.toAssocList\r\n     * @param obj {(Object|Array|*)}\r\n     * @returns {Array.<*, *>}\r\n     */\r\n    toAssocList = obj => keys(obj).map(key => [key, obj[key]]),\r\n\r\n    /**\r\n     * Returns an associated list from given object (deeply (on incoming object's type)).\r\n     * @note Does deep conversion on all values of passed in type's type.\r\n     * @function module:object.toAssocListDeep\r\n     * @param obj {*}\r\n     * @param [TypeConstraint = Object] {(Constructor|Function)} - Type constraint to convert on.\r\n     * @returns {*}\r\n     */\r\n    toAssocListDeep = (obj, TypeConstraint = Object) => keys(obj).map(key =>\r\n        TypeConstraint && isType(TypeConstraint, obj[key]) ?\r\n            [key, toAssocListDeep(obj[key], TypeConstraint)] :\r\n            [key, obj[key]]\r\n    ),\r\n\r\n    /**\r\n     * From associated list to object.\r\n     * @function module:object.fromAssocList\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocList = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType()),\r\n\r\n    /**\r\n     * From associated list to object (deep conversion on associative lists (array of 2 value arrays)).\r\n     * @note Considers array of arrays associated lists.\r\n     * @function module:object.fromAssocListDeep\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocListDeep = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        if (isArray(value) && isArray(value[0]) && value[0].length === 2) {\r\n            agg[key] = fromAssocListDeep(value, OutType);\r\n            return agg;\r\n        }\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType())\r\n;\r\n","import {typeOf} from './typeOf';\r\nimport {toAssocList} from './assocList';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Converts incoming value to an array.\r\n     * @note For `WeakMap`, `WeakSet`, `Map` and `Set` result is the same as calling `Array.from` on such.\r\n     * @note For `null`, `undefined`, `NaN`, `Number{}`, `Symbol{}`, `Boolean{}` returns an empty array.\r\n     * @note Method does a shallow conversion;\r\n     * @function module:object.toArray\r\n     * @param x {*} - Thing to convert from.\r\n     * @returns {Array}\r\n     */\r\n    toArray = x => {\r\n        switch (typeOf(x)) {\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return [];\r\n            case String.name:\r\n            case Array.name:\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n            case 'Map':\r\n            case 'Set':\r\n                return Array.from(x);\r\n            case Object.name:\r\n            default:\r\n                return toAssocList(x);\r\n        }\r\n    }\r\n\r\n;\r\n","/**\r\n * @module object\r\n * @description Object operations/combinators.\r\n */\r\nexport * from './jsPlatform/object';\r\nexport * from './object/lookup';\r\nexport * from './object/typeOf';\r\nexport * from './object/copy';\r\nexport * from './object/is';\r\nexport * from './object/of';\r\nexport * from './object/searchObj';\r\nexport * from './object/assignDeep';\r\nexport * from './object/setTheory';\r\nexport * from './object/console';\r\nexport * from './object/jsonClone';\r\nexport * from './object/toArray';\r\nexport * from './object/assocList';\r\n","import {reduceRight} from '../jsPlatform/array';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the function on the left of itself.\r\n * @function module:function.compose\r\n * @type {Function}\r\n * @param args {...{Function}}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) =>\r\n        arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","import {reverse} from '../jsPlatform/array';\r\nimport {apply, call} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a curried function requiring given functions arguments in reverse\r\n     * (returned function expects 2 or more variables (curried at 2 or more args)).\r\n     * @function module:function.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     * @curried\r\n     */\r\n    flipN = fn => curry2((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\r\n     * @function module:function.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b));\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:function.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","import {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true`.\r\n     * @function module:function.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = curry((predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    });\r\n","/**\r\n * @module function\r\n */\r\nexport * from './jsPlatform/function';\r\nexport * from './function/compose';\r\nexport * from './function/curry';\r\nexport * from './function/flip';\r\nexport * from './function/id';\r\nexport * from './function/negate';\r\nexport * from './function/until';\r\n","/**\r\n * @module errorThrowing\r\n * @description Contains error throwing facilities for when a value doesn't match a type.\r\n */\r\nimport {typeOf} from './object/typeOf';\r\nimport {isArray, toTypeRef, toTypeRefName, isOfType} from './object/is';\r\nimport {curry} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @function module:errorThrowing.typeRefsToStringOrError\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    typeRefsToStringOrError = types => types.length ?\r\n        types.map(type => `\\`${toTypeRefName(type)}\\``).join(', ') : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:errorThrowing.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n                contextName, valueName, value, expectedTypeName,\r\n                foundTypeName, messageSuffix\r\n            } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? typeRefsToStringOrError(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotType}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypeThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (ValueType, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeName = toTypeRef(ValueType),\r\n                foundTypeName = typeOf(value);\r\n            if (typeChecker(ValueType, value)) { return value; } // Value matches type\r\n            throw new Error(errorMessageCall(\r\n                {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n            ));\r\n        },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotTypes}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypesThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (valueTypes, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeNames = valueTypes.map(toTypeRef),\r\n                matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\r\n                foundTypeName = typeOf(value);\r\n            if (matchFound) { return value; }\r\n            throw new Error(\r\n                errorMessageCall({\r\n                    contextName, valueName, value,\r\n                    expectedTypeName: expectedTypeNames, foundTypeName,\r\n                    messageSuffix\r\n                })\r\n            );\r\n        },\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotType`.\r\n     * @function module:errorThrowing.errorIfNotType$\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotType = _getErrorIfNotTypeThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotTypes`.\r\n     * @type {Function|module:errorThrowing.errorIfNotTypes}\r\n     * @function module:errorThrowing.errorIfNotTypes$\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotTypes = _getErrorIfNotTypesThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n     */\r\n    getErrorIfNotTypeThrower = errorMessageCall => curry(_getErrorIfNotTypeThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n     */\r\n    getErrorIfNotTypesThrower = errorMessageCall => curry(_getErrorIfNotTypesThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotType\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotType = curry(_errorIfNotType),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotTypes\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotTypes = curry(_errorIfNotTypes)\r\n;\r\n\r\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\r\n\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\r\n */\r\n\r\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {*}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\r\n\r\n/**\r\n * @typedef {Array<(String|Function)>} TypesArray\r\n */\r\n\r\n/**\r\n * @typedef {Function} TypeChecker\r\n * @description Checks whether a value is of given type.\r\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorMessageCall\r\n * @description Error message template function.\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotType\r\n * @description Used to ensure value matches passed in type.\r\n * @param type {TypeRef} - Constructor name or constructor.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - What ever value is.\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotTypes\r\n * @description Used to ensure a value matches one of one or more types passed in.\r\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - Whatever value is.\r\n */\r\n","/**\r\n * Contains functions for operating strings.\r\n * @author elyde\r\n * @created 7/9/2017.\r\n * @module string\r\n */\r\nimport {intercalate, map, filter} from './list';\r\nimport {split} from './jsPlatform/string';\r\nimport {compose} from './function/compose';\r\nimport {join} from './jsPlatform/array';\r\nimport {_errorIfNotType} from './errorThrowing';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:string.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a string on all '\\s' and/or all '\\t' characters.\r\n     * @function module:string.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:string.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:string.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n'),\r\n\r\n    /**\r\n     * Lower cases first character of a non-empty string.\r\n     * @function module:string.lcaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    lcaseFirst = xs => {\r\n        _errorIfNotType(String, 'lcaseFirst', 'xs', xs);\r\n        return xs[0].toLowerCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Upper cases first character of a non-empty string.\r\n     * @function module:string.ucaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    ucaseFirst = xs => {\r\n        _errorIfNotType(String, 'ucaseFirst', 'xs', xs);\r\n        return xs[0].toUpperCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Camel cases (class case) a string.\r\n     * @function module:string.camelCase\r\n     * @param xs {String}\r\n     * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Pattern to split on.  Optional.\r\n     * @throws {Error} - Throws error if param `xs` is not a string.\r\n     * @returns {string}\r\n     * @curried\r\n     */\r\n    camelCase = (xs, pattern = /[^a-z\\d]/i) => compose(\r\n            join(''),\r\n            map(str => ucaseFirst(str.toLowerCase())),\r\n            filter(x => !!x),\r\n            split(pattern)\r\n        )(_errorIfNotType(String, 'camelCase', 'xs', xs)),\r\n\r\n    /**\r\n     * Class cases a string.  Uses pattern /[^a-z\\d/i]/ to split on.\r\n     * If you require a different pattern use `string.camelCase(str, pattern)`\r\n     * and then upper case first character (`ucaseFirst`).\r\n     * @function module:string.classCase\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if `xs` is not a string (via `camelCase` call).\r\n     */\r\n    classCase = compose(ucaseFirst, camelCase)\r\n\r\n;\r\n","/**\r\n * @module fjl\r\n * @description Exports all module methods (object, list, string modules etc.).\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n */\r\nexport * from './object';\r\nexport * from './boolean';\r\nexport * from './function';\r\nexport * from './list';\r\nexport * from './string';\r\nexport * from './utils';\r\nexport * from './errorThrowing';\r\nexport * from './list/utils';\r\n"],"names":["_Number","Number","name","_NaN","_Null","_Undefined","typeOf","value","retVal","undefined","constructorName","constructor","isNaN","fnOrError","symbolName","f","Function","Error","curryNotFnErrPrefix","curryN","executeArity","fn","curriedArgs","args","concatedArgs","concat","canBeCalled","length","apply","curry","argsToCurry","curry2","curry3","curry4","curry5","fPureTakesOne","arg","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","instanceConstructor","instance","hasOwnProperty","x","keys","Object","assign","obj0","objs","reduce","topAgg","obj","agg","key","_String","String","_Object","_Boolean","Boolean","_Function","_Array","Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","toTypeRef","type","toTypeRefName","ref","Type","isFunction","instanceOf","isType","isOfType","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isUsableImmutablePrimitive","typeOfX","isset","some","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","typeOfValue","lookup","call","of","copy","out","slice","Symbol","Promise","from","searchObj","nsString","indexOf","parts","split","limit","ind","parent","node","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","includes","prototype","xs","lastIndexOf","negateF","negateF2","a","b","negateF3","c","negateFN","isTruthy","isFalsy","alwaysTrue","alwaysFalse","map","push","aggregateArr$","item","sliceFrom","startInd","arr","sliceTo","toInd","sliceCopy","genericAscOrdering","lengths","lists","lengthsToSmallest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceRightUntil","reduceRight","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","defineReverse","reverse","filter","forEach","every","join","append","listAppend","head","last","tail","init","uncons","unconsr","concatMap","foldableOfA","foldr","intersperse","between","lastInd","foldl","intercalate","xss","transpose","numLists","ind2","longestListLen","maximum","outLists","outList","subsequences","listLen","pow","i","entry","j","swapped","ind1","tmp","permutations","repeat","foldl1","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","lastX","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","splitAt","takeWhile","dropWhile","splitPoint","list2","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","lenOfTrimmed","zip3","arr3","zip4","arr4","zip5","arr5","zipWith","zipWithN","zipWith3","xs3","zipWith4","xs4","zipWith5","xs5","unzip","unzipN","lenItem0","any","p","all","and","or","not","sum","product","sortBy","minimum","scanl","scanl1","scanr","scanr1","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","a0","b0","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","x2","unionBy","alreadyAdded","union","intersect","intersectBy","list1","difference","array1","array2","complement","arr0","arrays","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","log","console","bind","error","peek","pop","jsonClone","JSON","parse","stringify","toAssocList","toAssocListDeep","TypeConstraint","fromAssocList","OutType","fromAssocListDeep","toArray","compose","arg0","flipN","flip","id","until","predicate","operation","typeInstance","typeRefsToStringOrError","types","defaultErrorMessageCall","contextName","tmplContext","valueName","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","typesCopy","typesToMatchCopy","_getErrorIfNotTypeThrower","errorMessageCall","typeChecker","ValueType","_getErrorIfNotTypesThrower","valueTypes","expectedTypeNames","matchFound","_errorIfNotType","_errorIfNotTypes","getErrorIfNotTypeThrower","getErrorIfNotTypesThrower","errorIfNotType","errorIfNotTypes","lines","words","unwords","unlines","lcaseFirst","toLowerCase","substring","ucaseFirst","toUpperCase","camelCase","pattern","str","classCase"],"mappings":"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"}