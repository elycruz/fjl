{"version":3,"file":"fjl.js","sources":["../../src/function/curry.js","../../src/utils.js","../../src/jsPlatform/object.js","../../src/object/typeOf.js","../../src/object/is.js","../../src/object/lookup.js","../../src/jsPlatform/function.js","../../src/object/of.js","../../src/object/copy.js","../../src/object/searchObj.js","../../src/object/assignDeep.js","../../src/jsPlatform/list.js","../../src/boolean.js","../../src/list/map.js","../../src/list/aggregation.js","../../src/list/utils.js","../../src/object/setTheory.js","../../src/object/console.js","../../src/object/jsonClone.js","../../src/object/assocList.js","../../src/object/toArray.js","../../src/object.js","../../src/jsPlatform/array.js","../../src/function/compose.js","../../src/function/flip.js","../../src/function/id.js","../../src/function/negate.js","../../src/function/until.js","../../src/function/fnOrError.js","../../src/function/noop.js","../../src/function.js","../../src/list/range.js","../../src/jsPlatform/string.js","../../src/jsPlatform.js","../../src/list.js","../../src/errorThrowing.js","../../src/string.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf function\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\r\n\r\n/**\r\n * @private\r\n * @type {string}\r\n */\r\nconst\r\n\r\n    /**\r\n     * Returns curried function.\r\n     * @private\r\n     * @param executeArity {Number}\r\n     * @param unmetArityNum {Number}\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function} - Curried function.\r\n     */\r\n    returnCurried = (executeArity, unmetArityNum, fn, argsToCurry) => {\r\n        switch (unmetArityNum) {\r\n            case 1:\r\n                /* eslint-disable */\r\n                return function func(x) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 2:\r\n                /* eslint-disable */\r\n                return function func(a, b) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 3:\r\n                /* eslint-disable */\r\n                return function func(a, b, c) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 4:\r\n                /* eslint-disable */\r\n                return function func(a, b, c, d) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 5:\r\n                /* eslint-disable */\r\n                return function func(a, b, c, d, e) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            default:\r\n                return (...args) => executeAsCurriedFunc(fn, executeArity, unmetArityNum, args, argsToCurry);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns curried function if unmetArity is not met else returns result of executing\r\n     * final function.\r\n     * @private\r\n     * @param fn {Function}\r\n     * @param executeArity {Number}\r\n     * @param unmetArity {Number}\r\n     * @param args {Array<*>}\r\n     * @param argsToCurry {Array<*>}\r\n     * @returns {Function|*} - Curried function or result of 'finally' executed function.\r\n     */\r\n    executeAsCurriedFunc = (fn, executeArity, unmetArity, args, argsToCurry) => {\r\n        let concatedArgs = argsToCurry.concat(args),\r\n            canBeCalled = (concatedArgs.length >= executeArity) || !executeArity,\r\n            newExpectedArity = executeArity - concatedArgs.length;\r\n        return !canBeCalled ?\r\n            returnCurried(executeArity, newExpectedArity, fn, concatedArgs) :\r\n            fn(...concatedArgs);\r\n    }\r\n;\r\n\r\nexport const\r\n\r\n    /**\r\n     * Curries a function up to a given arity.\r\n     * @function module:function.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     * @throws {Error} - When `fn` is not a function.\r\n     */\r\n    curryN = (executeArity, fn, ...argsToCurry) => {\r\n        if (!fn || !(fn instanceof Function)) {\r\n            throw new Error(`\\`curry*\\` functions expect first parameter to be of type \\`Function\\` though received ${fn}?`);\r\n        }\r\n        return returnCurried(executeArity, executeArity - argsToCurry.length, fn, argsToCurry);\r\n    },\r\n\r\n    /**\r\n     * Curries a function based on it's defined arity (note: rest args param (`...rest`) are not counted in arity).\r\n     * @function module:function.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => curryN((fn || {}).length, fn, ...argsToCurry),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (won't call function until 2 or more args).\r\n     * @function module:function.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (won't call function until 3 or more args).\r\n     * @function module:function.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (won't call function until 4 or more args).\r\n     * @function module:function.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5 (won't call function until 5 or more args).\r\n     * @function module:function.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","/**\r\n * @module utils\r\n */\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a function that takes an argument and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakesOne\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakesOne = name => curry((arg, f) => f[name](arg)),\r\n\r\n    /**\r\n     * Returns a function that takes 2 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes2\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes2 = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    /**\r\n     * Returns a function that takes 3 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes3\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes3 = name => curry((arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3)),\r\n\r\n    /**\r\n     * Returns a function that takes 4 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes4\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes4 = name => curry((arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4)),\r\n\r\n    /**\r\n     * Returns a function that takes 5 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes5\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes5 = name => curry((arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5)),\r\n\r\n    /**\r\n     * Returns a function that takes an object and one or more arguments on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakesOneOrMore\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakesOneOrMore = name => curry2((f, ...args) => f[name](...args))\r\n\r\n;\r\n","/**\r\n * @memberOf object\r\n * @description Defines some of the platform methods for objects (the ones used within `fjl`).\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\nimport {curry, curry2} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived object.\r\n     * @function module:_jsPlatformobject.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = curry((instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor),\r\n\r\n    /**\r\n     * @function module:_jsPlatformobject.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:_jsPlatformobject.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * Gets own enumerable keys of passed in object (`Object.keys`).\r\n     * @function module:_jsPlatformobject.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    {keys} = Object,\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:_jsPlatformobject.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() => Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            curry2((obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0))\r\n        )();\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\n/**\r\n * Returns the constructor/class/type name of a value.\r\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n * @note Returns 'Undefined' if value is `undefined`\r\n * @note Returns 'Null' if value is `null`\r\n * For values that have no concrete constructors and/or casters\r\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n * @function module:object.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (value === undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\n\r\nimport {typeOf} from './typeOf';\r\nimport {instanceOf, length, keys} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined',\r\n    _NaN = 'NaN';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @function module:object.toTypeRef\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @todo write tests for this function.\r\n     */\r\n    toTypeRef = type => {\r\n        if (!type) {\r\n            return typeOf(type);\r\n        }\r\n        else if (type.constructor === String || (type instanceof Function)) {\r\n            return type;\r\n        }\r\n        return typeOf(type);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of type refs from possible type refs (converts null, undefined, NaN, and other values into\r\n     * type refs (either constructor name or constructor name based on whether value(s) is a string, a constructor, or not).\r\n     * @function module:object.toTypeRefs\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {Array<TypeRef>}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefs = (...types) => types.map(toTypeRef),\r\n\r\n    /**\r\n     * Returns possible Type's TypeRef name.\r\n     * @function module:object.toTypeRefName\r\n     * @param Type {(TypeRef|*)}\r\n     * @returns {String}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefName = Type => {\r\n        const ref = toTypeRef(Type);\r\n        return ref instanceof Function ? ref.name : ref;\r\n    },\r\n\r\n    /**\r\n     * Returns possible Types' TypeRef names.\r\n     * @function module:object.toTypeRefNames\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {String[]}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefNames = (...types) => types.map(toTypeRefName),\r\n\r\n    /**\r\n     * Returns whether a value is a function or not.\r\n     * @function module:object.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = instanceOf(Function),\r\n\r\n    /**\r\n     * Strict type checker.  Checks if given value is a direct instance of given type;  E.g.,\r\n     * @example\r\n     *   isType(String, 'abcdefg')  === true // true\r\n     *   isType(String.name, 'abcdefg') === true\r\n     *   isType(Number, NaN) === false\r\n     *   isType(Number, 99) === true\r\n     *   isType('Null', 99) === false // though, for `null` and `undefined` checks\r\n     *                                // @see `isset`, in this module, instead\r\n     *   isType('Undefined', undefined) === true // true\r\n     *\r\n     * @note Useful where absolute types, or some semblance thereof, are required.\r\n     * @function module:object.isType\r\n     * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry((type, obj) => typeOf(obj) === toTypeRefName(type)),\r\n\r\n    /**\r\n     * Loose type checker;  E.g., If `type` is not a constructor, but a constructor name, does a type check on\r\n     * constructor names, else if first check fails and `type` is a constructor, performs an `instanceof` check\r\n     * on value with constructor.\r\n     * @note Use care when checking for `Array` and/or `Object` since the both are considered objects by `instanceof` checker.\r\n     * @note For `null` and `undefined` their class cased names can be used for type checks\r\n     * `isOfType('Null', null) === true (passes strict type check)` (or better yet `isset` can be used).\r\n     * @throwsafe - Doesn't throw on `null` or `undefined` `obj` values.\r\n     * @example\r\n     * isOfType(Number, 99) === true        // true  (passes strict type check (numbers are not instances of `Number`\r\n     *                                      //        constructor)\r\n     * isOfType('Number', 99) === true      // true  (passes strict type check)\r\n     * isOfType(Number, NaN) === true       // true. (passes instance of check)\r\n     *                                      //        If you want \"true\" strict type checking use `isType`\r\n     * isOfType(Object, []) === true        // true  (passes instance of check)\r\n     * isOfType(Array, []) === true         // true  (passes instance of check)\r\n     * isOfType(Object, {}) === true        // true  (passes instance of check)\r\n     * isOfType(Object.name, {}) === true   // true  (Passes strict type check)\r\n     * class Abc extends String {}\r\n     * isOfType(String, new Abc('abcd')) // true (passes instanceof check)\r\n     *\r\n     * @function module:is.isOfType\r\n     * @param type {Function|String} - Type reference (constructor or `constructor.name`).\r\n     * @param x {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isOfType = curry((type, x) => isType(type, x) || instanceOf(type, x)),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:object.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a boolean depicting whether a value is callable or not.\r\n     * @function module:object.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an array (same as `Array.isArray`).\r\n     * @function module:object.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    {isArray} = Array,\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:object.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = isType(_Object),\r\n\r\n    /**\r\n     * Checks if value is a boolean.\r\n     * @function module:object.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = isType(_Boolean),\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:object.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = isType(_Number),\r\n\r\n    /**\r\n     * Checks whether value is a string or not.\r\n     * @function module:object.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = isType(_String),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:object.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = isType(_Map),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:object.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = isType(_Set),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:object.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap =isType(_WeakMap),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:object.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = isType(_WeakSet),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:object.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = isType(_Undefined),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:object.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = isType(_Null),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:object.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = isType(_Symbol),\r\n\r\n    /**\r\n     * Checks if given `x` is set and of one of\r\n     *  [String, Boolean, Number, Symbol] (null and undefined are immutable\r\n     *  but are not \"usable\" (usually not what we want to operate on).\r\n     * @function module:object.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return isset(x) &&\r\n            [_String, _Number, _Boolean, _Symbol]\r\n                .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:object.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => !length(x),\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:object.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:object.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in value is empty;  I.e.,\r\n     *  check for one of '', 0, `null`, `undefined`, `false`, empty array, empty object, empty function (zero arity),\r\n     *  or empty collection (es6 Map, Set, WeakMap, or WeakSet etc. (`!value.size`);\r\n     * @function module:object.isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        if (!value) { // if '', 0, `null`, `undefined`, or `false` then is empty\r\n            return true;\r\n        }\r\n        switch (typeOf(value)) {\r\n            case _Array:\r\n            case _Function:\r\n                return !value.length;\r\n            case _Number: // zero and NaN checks happened above so `if number` then it's 'not-an-empty-number' (lol)\r\n                return false;\r\n            case _Object:\r\n                return !keys(value).length;\r\n            case _Map:\r\n            case _Set:\r\n            case _WeakSet:\r\n            case _WeakMap:\r\n                return !value.size;\r\n            case _NaN:\r\n                return true;\r\n            default:\r\n                return !value;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null or not.\r\n     * @function module:object.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => x !== null && x !== undefined,\r\n\r\n    /**\r\n     * Checks to see if `x` is of one of the given type refs.\r\n     * @function object.isOneOf\r\n     * @param x {*}\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {boolean}\r\n     * @todo write tests for this function.\r\n     */\r\n    isOneOf = (x, ...types) => {\r\n        const typeName = typeOf(x);\r\n        return toTypeRefNames(types).some(name => typeName === name);\r\n    },\r\n\r\n    isFunctor = x => x && x.map && instanceOf(Function, x.map)\r\n\r\n;\r\n","/**\r\n * @memberOf object\r\n */\r\n\r\nimport {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Looks up property and returns it's value; Else `undefined`.\r\n * Method is null safe (will not throw on `null` or `undefined`).\r\n * @function module:object.lookup\r\n * @param key {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\r\nexport const lookup = curry((key, obj) => isset(obj) ? obj[key] : undefined);\r\n","import {curry, curry2} from '../function/curry';\r\n\r\n/**\r\n * Created by elydelacruz on 9/7/2017.\r\n * @module _jsPlatform_function\r\n * @private\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:_jsPlatform_function.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry((fn, args) => fn.apply(null, args)),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:_jsPlatform_function.call\r\n     * @param fn {Function}\r\n     * @param args {...*}\r\n     * @returns {*}\r\n     */\r\n    call = curry2((fn, ...args) => apply(fn, args));\r\n","import {isFunction, isset, isUsableImmutablePrimitive} from './is';\r\nimport {hasOwnProperty} from '../jsPlatform/object';\r\nimport {apply} from '../jsPlatform/function';\r\n\r\n/**\r\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n * @example\r\n * // - If exists `(value).constructor.of` uses this.\r\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\r\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n * // - Else if constructor is a function, thus far, then calls constructor using\r\n * //      the `new` keyword (with any passed in args).\r\n\r\n * @function module:object.of\r\n * @param x {*} - Value to derive returned value's type from.\r\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n */\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","import {typeOf} from './typeOf';\r\nimport {of} from './of';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Make a copy of a value or optionally copy incoming value onto an outgoing value (second parameter).\r\n     * @note If incoming thing is an immmutable primitive (string, number, symbol, null, undefined, boolean)\r\n     *  it is returned as is.\r\n     * @function module:object.copy\r\n     * @param x {*} - Thing to copy.\r\n     * @param [out = undefined] {*} - Optional value to copy on to.  Not required.\r\n     * @returns {*} - Copied thing or optionally outgoing value copied onto.\r\n     */\r\n    copy = (x, out) => {\r\n        // if `null`, `undefined`, `''`, `0`, `false` return\r\n        if (!x) { return x; }\r\n        switch (typeOf(x)) {\r\n            case Array.name:\r\n                return !out ? x.slice(0) : Object.assign(out, x);\r\n\r\n            // If immutable primitive, return it\r\n            case Symbol.name:\r\n            case Boolean.name:\r\n            case String.name:\r\n            case Number.name:\r\n            case Promise.name:\r\n            case Function.name:\r\n            case 'NaN':\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return x;\r\n\r\n            case 'Map':\r\n            case 'Set':\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n                return new x.constructor(Array.from(x));\r\n\r\n            // Else make copy\r\n            default:\r\n                return Object.assign(!out ? of(x) : out, x);\r\n        }\r\n    }\r\n;\r\n\r\nexport default copy;\r\n","import {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Gives you value at key/namespace-key within `obj`;  E.g.,\r\n     * searchObj('all.your.base', {all: {your: {base: 99}}}) === 99 // `true`\r\n     * @note If key is unreachable (undefined) returns `undefined`.\r\n     *  Useful in cases where we do not want to check each key along the way before getting/checking value;  E.g.,\r\n     * @example\r\n     * ```\r\n     * if (obj && obj.all && obj.all.your && obj.all.your.base) {\r\n     *   // Thing we want to do\r\n     * }\r\n     *\r\n     * // So with our function becomes\r\n     * if (searchObj('all.your.base', obj)) {\r\n     *   // Thing we want to do\r\n     * }\r\n     * ```\r\n     * @function module:object.searchObj\r\n     * @param nsString {String}\r\n     * @param obj {*}\r\n     * @returns {*}\r\n     */\r\n    searchObj = curry((nsString, obj) => {\r\n        if (!obj) { return obj; }\r\n        if (nsString.indexOf('.') === -1) {\r\n            return obj[nsString];\r\n        }\r\n        const parts = nsString.split('.'),\r\n            limit = parts.length;\r\n        let ind = 0,\r\n            parent = obj;\r\n        for (; ind < limit; ind += 1) {\r\n            const node = parent[parts[ind]];\r\n            if (!isset(node)) {\r\n                return node;\r\n            }\r\n            parent = node;\r\n        }\r\n        return parent;\r\n    })\r\n;\r\n","\r\nimport {isObject} from './is';\r\nimport {keys, hasOwnProperty} from '../jsPlatform/object';\r\nimport {curry2} from '../function/curry';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one (takes two or more args).\r\n     * @function module:object.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param [objs] {...{Object}} - One or more objects to merge onto `obj0`.\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = curry2((obj0, ...objs) =>\r\n        !obj0 ? obj0 : objs.reduce((topAgg, obj) =>\r\n            !obj ? topAgg : keys(obj).reduce((agg, key) => {\r\n                let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                // If property is not writable move to next item in collection\r\n                if (hasOwnProperty(key, agg) && propDescription &&\r\n                    !(propDescription.get && propDescription.set) &&\r\n                    !propDescription.writable) {\r\n                    return agg;\r\n                }\r\n                if (isObject(agg[key]) && isObject(obj[key])) {\r\n                    assignDeep(agg[key], obj[key]);\r\n                }\r\n                else { agg[key] = obj[key]; }\r\n                return agg;\r\n            }, topAgg)\r\n        , obj0));\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n *      on both strings and arrays.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:_jsPlatform_list.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:_jsPlatform_list.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:_jsPlatform_list.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:_jsPlatform_list.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:_jsPlatform_list.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * @module boolean\r\n * @description Contains functional version of 'always-true', 'always-false', 'is-truthy', and 'is-falsy'.\r\n */\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:boolean.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:boolean.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value,\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:boolean.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:boolean.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false,\r\n\r\n    /**\r\n     * Equality operator.\r\n     * @function module:boolean.equal\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {boolean}\r\n     */\r\n    equal = curry((a, b) => a === b),\r\n\r\n    /**\r\n     * Equality operator for all.\r\n     * @function module:boolean.equalAll\r\n     * @param a {*} - Item `0`.\r\n     * @param args {...*} - Others\r\n     * @returns {boolean}\r\n     */\r\n    equalAll = curry2((a, ...args) => args.every(b => equal(a, b)))\r\n\r\n;\r\n","import {length} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\nimport {typeOf} from '../object/typeOf';\r\nimport {of} from '../object/of';\r\nimport {isFunctor, isset} from '../object/is';\r\n\r\n/**\r\n * Maps a function onto a List (string or array) or a functor (value containing a map method).\r\n * @function module:list.map\r\n * @param fn {Function} - Function to map on given value.\r\n * @param xs {Array|String|*}\r\n * @returns {Array|String|*}\r\n */\r\nconst map = curry((fn, xs) =>  {\r\n    if (!isset(xs)) { return xs; }\r\n    let out = of(xs),\r\n        limit,\r\n        i = 0;\r\n    switch (typeOf(xs)) {\r\n        case 'Array':\r\n            limit = length(xs);\r\n            if (!limit) { return out; }\r\n            for (; i < limit; i += 1) {\r\n                out.push(fn(xs[i], i, xs));\r\n            }\r\n            return out;\r\n        case 'String':\r\n            limit = length(xs);\r\n            if (!xs) { return out; }\r\n            for (; i < limit; i += 1) {\r\n                out += fn(xs[i], i, xs);\r\n            }\r\n            return out;\r\n        default:\r\n            if (isFunctor(xs)) { return xs.map(fn); }\r\n\r\n            // Other objects\r\n            return Object.keys(xs).reduce((agg, key) => {\r\n                out[key] = fn(xs[key], key, xs);\r\n                return out;\r\n            }, out);\r\n    }\r\n});\r\n\r\nexport default map;\r\n","\r\nexport const\r\n\r\n    /**\r\n     * Pushes incoming `item` onto given array and returns said array.\r\n     * @private\r\n     * @param agg {Array}\r\n     * @param item {*}\r\n     * @returns {Array}\r\n     */\r\n    aggregateArray = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    }\r\n\r\n;\r\n","/**\r\n * List operator utils module.\r\n * @module listUtils\r\n */\r\nimport {apply}          from '../jsPlatform/function';  // un-curried version\r\nimport {slice}          from '../jsPlatform/list';      // un-curried version good for both strings and arrays\r\nimport {length}         from '../jsPlatform/object';\r\nimport {alwaysFalse}    from '../boolean';\r\nimport map              from './map';\r\nimport {curry, curry2}  from '../function/curry';\r\n\r\nexport * from './aggregation';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @function module:listUtils.sliceFrom\r\n     * @param startInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = curry((startInd, xs) => slice(startInd, undefined, xs)),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @function module:listUtils.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = curry((toInd, xs) => slice(0, toInd, xs)),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function listUtils.sliceCopy\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceCopy = sliceFrom(0),\r\n\r\n    /**\r\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n     * @function module:listUtils.genericAscOrdering\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {number}\r\n     */\r\n    genericAscOrdering = curry((a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    }),\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @function module:listUtils.lengths\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = curry2((...lists) => map(length, lists)),\r\n\r\n    /**\r\n     * Returns a list of lists trimmed to the shortest length in given list of lists.   @background This method is used by the `zip*` functions to achieve their\r\n     *  'slice to smallest' functionality.\r\n     * @function module:listUtils.toShortest\r\n     * @param lists {...(Array|String|*)}\r\n     * @returns {Array|String|*}\r\n     */\r\n    toShortest = curry2((...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : sliceCopy(list), lists);\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate.\r\n     * @function module:listUtils.reduceUntil\r\n     * @param pred {Function} - `(item, index, list) => Boolean(...)`\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceUntil = curry((pred, op, agg, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { break; }\r\n            result = op(result, xs[ind], ind, xs);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate (from right to left).\r\n     * @function module:listUtils.reduceUntilRight\r\n     * @param pred {Function} - `(item, index, list) => Boolean(...)`\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceUntilRight = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces a list with given operation (`op`) function.\r\n     * @function module:listUtils.reduce\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduce = reduceUntil(alwaysFalse),\r\n\r\n    /**\r\n     * Reduces a list with given operation (`op`) function (from right-to-left).\r\n     * @function module:listUtils.reduceRight\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceRight = reduceUntilRight(alwaysFalse),\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:listUtils.lastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:listUtils.findIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = curry((pred, arr) => {\r\n        let ind = 0;\r\n        const limit = length(arr);\r\n        for (; ind < limit; ind += 1) {\r\n            const predicateFulfilled = !!pred(arr[ind], ind, arr);\r\n            if (predicateFulfilled) {\r\n                return ind;\r\n            }\r\n        }\r\n        return -1;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:listUtils.findIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = curry((pred, arr) => {\r\n        let ind = length(arr) - 1;\r\n        for (; ind >= 0; ind -= 1) {\r\n            const predicateFulfilled = !!pred(arr[ind], ind, arr);\r\n            if (predicateFulfilled) {\r\n                return ind;\r\n            }\r\n        }\r\n        return -1;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listUtils.findIndicesWhere\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = curry((pred, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out.length ? out : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listUtils.findWhere\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    })\r\n\r\n;\r\n","import {assignDeep} from './assignDeep';\r\nimport {hasOwnProperty, keys} from '../jsPlatform/object';\r\nimport {reduce} from '../list/utils';\r\nimport {curry, curry2} from '../function/curry';\r\n\r\nexport const\r\n\r\n    objUnion = curry((obj1, obj2) => assignDeep(obj1, obj2)),\r\n\r\n    objIntersect = curry((obj1, obj2) => reduce((agg, key) => {\r\n        if (hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objDifference = curry((obj1, obj2) => reduce((agg, key) => {\r\n        if (!hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objComplement = curry2((obj0, ...objs) => reduce((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs));\r\n","/**\r\n * @module console\r\n * @description Console exports.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * `Console.log` method.\r\n     * @function module:console.log\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    log = console.log.bind(console),\r\n\r\n    /**\r\n     * `Console.error` method.\r\n     * @function module:console.error\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    error = console.error.bind(console),\r\n\r\n    /**\r\n     * Peeks (console.log) at incoming value(s) and returns the last value.\r\n     * @function module:console.peek\r\n     * @param args {...*}\r\n     * @returns {*} Last given value (if one or more values) else first value.\r\n     */\r\n    peek = (...args) => (log(...args), args.pop())\r\n\r\n;\r\n","export const\r\n\r\n    /**\r\n     * Clones and object or array using `JSON.parse(JSON.stringify(...))` pattern.\r\n     * @function module:object.jsonClone\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    jsonClone = x => JSON.parse(JSON.stringify(x))\r\n\r\n;\r\n","import {isArray, isType} from './is';\r\nimport {keys} from '../jsPlatform/object';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns an associated list from given object.\r\n     * @note Useful for working with plain javascript objects.\r\n     * @function module:object.toAssocList\r\n     * @param obj {(Object|Array|*)}\r\n     * @returns {Array.<*, *>}\r\n     */\r\n    toAssocList = obj => keys(obj).map(key => [key, obj[key]]),\r\n\r\n    /**\r\n     * Returns an associated list from given object (deeply (on incoming object's type)).\r\n     * @note Does deep conversion on all values of passed in type's type.\r\n     * @function module:object.toAssocListDeep\r\n     * @param obj {*}\r\n     * @param [TypeConstraint = Object] {(Constructor|Function)} - Type constraint to convert on.\r\n     * @returns {*}\r\n     */\r\n    toAssocListDeep = (obj, TypeConstraint = Object) => keys(obj).map(key =>\r\n        TypeConstraint && isType(TypeConstraint, obj[key]) ?\r\n            [key, toAssocListDeep(obj[key], TypeConstraint)] :\r\n            [key, obj[key]]\r\n    ),\r\n\r\n    /**\r\n     * From associated list to object.\r\n     * @function module:object.fromAssocList\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocList = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType()),\r\n\r\n    /**\r\n     * From associated list to object (deep conversion on associative lists (array of 2 value arrays)).\r\n     * @note Considers array of arrays associated lists.\r\n     * @function module:object.fromAssocListDeep\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocListDeep = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        if (isArray(value) && isArray(value[0]) && value[0].length === 2) {\r\n            agg[key] = fromAssocListDeep(value, OutType);\r\n            return agg;\r\n        }\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType())\r\n;\r\n","import {typeOf} from './typeOf';\r\nimport {toAssocList} from './assocList';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Converts incoming value to an array.\r\n     * @note For `WeakMap`, `WeakSet`, `Map` and `Set` result is the same as calling `Array.from` on such.\r\n     * @note For `null`, `undefined`, `NaN`, `Number{}`, `Symbol{}`, `Boolean{}` returns an empty array.\r\n     * @note Method does a shallow conversion;\r\n     * @function module:object.toArray\r\n     * @param x {*} - Thing to convert from.\r\n     * @returns {Array}\r\n     */\r\n    toArray = x => {\r\n        switch (typeOf(x)) {\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return [];\r\n            case String.name:\r\n            case Array.name:\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n            case 'Map':\r\n            case 'Set':\r\n                return Array.from(x);\r\n            case Object.name:\r\n            default:\r\n                return toAssocList(x);\r\n        }\r\n    }\r\n\r\n;\r\n","/**\r\n * @module object\r\n * @description Object operations/combinators.\r\n */\r\n\r\nexport * from './jsPlatform/object';\r\nexport * from './object/lookup';\r\nexport * from './object/typeOf';\r\nexport * from './object/copy';\r\nexport * from './object/is';\r\nexport * from './object/of';\r\nexport * from './object/searchObj';\r\nexport * from './object/assignDeep';\r\nexport * from './object/setTheory';\r\nexport * from './object/console';\r\nexport * from './object/jsonClone';\r\nexport * from './object/toArray';\r\nexport * from './object/assocList';\r\n\r\n/**\r\n* Returns whether constructor has derived object.\r\n* @function module:object.instanceOf\r\n* @param instanceConstructor {Function} - Constructor.\r\n* @param instance {*}\r\n* @returns {Boolean}\r\n*/\r\n\r\n/**\r\n * @function module:object.hasOwnProperty\r\n * @param propName {*}\r\n * @param typeInstance {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @function module:object.length\r\n * @param x {*}\r\n * @returns {Number}\r\n * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n */\r\n\r\n/**\r\n * Gets own enumerable keys of passed in object (`Object.keys`).\r\n * @function module:object.keys\r\n * @param obj {*}\r\n * @returns {Array<String>}\r\n */\r\n\r\n/**\r\n * Defined as `Object.assign` else is the same thing but shimmed.\r\n * @function module:object.assign\r\n * @param objs {...*}\r\n * @returns {Object}\r\n*/\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n * @module _jsPlatform_arrayOps\r\n * @private\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Array.prototype.reverse generator (generates a function that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, []),\r\n\r\n    /**\r\n     * Maps a function to functor (list etc.).\r\n     * @function module:_jsPlatform_array.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from the right with passed in function.\r\n     * @function module:_jsPlatform_array.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an list (shimmed if not exists).\r\n     * @function module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","import {reduceRight} from '../jsPlatform/array';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the function on the left of itself.\r\n * @function module:function.compose\r\n * @type {Function}\r\n * @param args {...{Function}}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) =>\r\n        arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","import {reverse} from '../jsPlatform/array';\r\nimport {apply, call} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a curried function requiring given functions arguments in reverse\r\n     * (returned function expects 2 or more variables (curried at 2 or more args)).\r\n     * @function module:function.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     * @curried\r\n     */\r\n    flipN = fn => curry2((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\r\n     * @function module:function.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b));\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:function.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\nimport {apply} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Negates a function that takes one/no argument.\r\n     * @function module:function.negateF\r\n     * @param fn {Function}\r\n     * @returns {function(*=): boolean}\r\n     */\r\n    negateF = fn => x => !fn(x),\r\n\r\n    /**\r\n     * Takes a function that takes two parameters and returns a negated version of given\r\n     * function.\r\n     * @function module:_negate.negateF2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF2 = fn => curry((a, b) => !fn(a, b)),\r\n\r\n    /**\r\n     * Takes a function that takes three parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF3 = fn => curry((a, b, c) => !fn(a, b, c)),\r\n\r\n    /**\r\n     * Returns a negated version of given function.\r\n     * Returned function is variadiac (takes one or more arguments).\r\n     * @note function returned is uncurried.\r\n     * @uncurried\r\n     * @function module:function.negateFN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFN = fn => curry2((...args) => !apply(fn, args));\r\n","import {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true` (like a functional\r\n     *  version of a while loop).\r\n     * @function module:function.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = curry((predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    });\r\n","import {typeOf} from '../object/typeOf';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a function or throws an error if given `f` is not a function.\r\n     * @function module:function.fnOrError\r\n     * @param symbolName {String} - Error message prefix.\r\n     * @param f {Function|*} - Expected function.\r\n     * @returns {Function}\r\n     * @throws {Error} - Error if `f` is not of `function`\r\n     */\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || !(f instanceof Function)) {\r\n            throw new Error(`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    }\r\n\r\n;\r\n","/**\r\n * No-op ('op' as in 'operation') - Performs no operation 'always' (good for places where\r\n * a value should always be a function etc.).\r\n * @function module:function.noop\r\n * @returns {undefined}\r\n */\r\nexport const noop = () => undefined;\r\n","/**\r\n * @module function\r\n */\r\nexport * from './jsPlatform/function';\r\nexport * from './function/compose';\r\nexport * from './function/curry';\r\nexport * from './function/flip';\r\nexport * from './function/id';\r\nexport * from './function/negate';\r\nexport * from './function/until';\r\nexport * from './function/fnOrError';\r\nexport * from './function/noop';\r\n","/**\r\n * @module object\r\n */\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Normalizes step for `from` and `to` combination.\r\n * @function module:list.normalizeStep\r\n * @param from {Number}\r\n * @param to {Number}\r\n * @param [step = 1] {Number}\r\n * @returns {Number}\r\n * @private\r\n */\r\nconst normalizeStep = (from, to, step) => {\r\n    if (from > to) {\r\n        return step > 0 ? -step : step; // make step negative\r\n    }\r\n    return step < 0 ? -1 * step : step; // make step positive\r\n};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Range function - gives you an array contain numbers in given range.\r\n     * @note normalizes `step` to be valid if range numbers given are invalid\r\n     *  (forces `step` to be negative if range required is in the negative direction\r\n     *  and forces `step` to be positive if range required is in the other direction).\r\n     * @function module:list.range\r\n     * @param from {Number}\r\n     * @param to {Number}\r\n     * @param [step = 1] {Number}\r\n     * @returns {Array.<Number>}\r\n     */\r\n    range = curry((from, to, step = 1) => {\r\n        let i = from;\r\n        const out = [];\r\n        step = normalizeStep(from, to, step);\r\n        if (step === 0 || from === to) { return [from]; }\r\n        for (; (to - i) * step >= 0; i += step) { out.push(i); }\r\n        return out;\r\n    })\r\n;\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:_string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * @module jsPlatform_\r\n * @private\r\n */\r\nexport * from './jsPlatform/object';\r\nexport * from './jsPlatform/array';\r\nexport * from './jsPlatform/list';\r\nexport * from './jsPlatform/string';\r\nexport * from './jsPlatform/function';\r\n","/**\r\n * List operations module.\r\n * @module list\r\n */\r\nimport {concat as listAppend, indexOf, slice, includes} from './jsPlatform/list';\r\nimport {apply} from './jsPlatform/function';\r\nimport {length} from './jsPlatform/object';\r\nimport {negateF3, negateF2} from './function/negate';\r\nimport {curry, curry2, curry3} from './function/curry';\r\nimport {isTruthy, isFalsy} from './boolean';\r\nimport {lookup} from './object/lookup';\r\nimport {of} from './object/of';\r\nimport {isset, isString} from './object/is';\r\nimport {typeOf} from './object/typeOf';\r\nimport map from './list/map';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    toShortest, aggregateArray,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, sliceCopy, genericAscOrdering\r\n}\r\n    from './list/utils';\r\n\r\nexport * from './list/range';\r\n\r\nexport * from './list/utils';\r\n\r\nexport {map};\r\n\r\nexport {slice, includes, indexOf, lastIndexOf, push} from './jsPlatform';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Append two, or more, lists, i.e.,\r\n     * @example\r\n     * expectEqual(append(take(13, alphabetString), drop(13, alphabetString)), alphabetString); // true\r\n     *\r\n     * // Another example\r\n     * const result = append(\r\n     *   alphabetStr.split(''),\r\n     *   alphabetStr.split('')\r\n     * ),\r\n     * expected = repeat(2, alphabetStr).split('');\r\n     *\r\n     * shallowEquals(result, expected) === true // `true`\r\n     *\r\n     * @function module:list.append\r\n     * @param [args] {...(Array|String|*)} - One or more lists or list likes (strings etc.).\r\n     * @returns {(Array|String|*)} - Same type as list like passed in.\r\n     */\r\n    append = curry2((...args) => apply(listAppend, args)),\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:list.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:list.last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:list.tail\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:list.init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:list.uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|undefined}\r\n     */\r\n    uncons = xs =>\r\n        !xs || length(xs) === 0 ? undefined : [head(xs), tail(xs)],\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:list.unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    unconsr = xs => !xs || length(xs) === 0 ? undefined : [init(xs), last(xs)],\r\n\r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:list.concat\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    concat = xs => {\r\n        switch (length(xs)) {\r\n            case undefined:\r\n            case 0:\r\n                return [];\r\n            case 1:\r\n                return xs[0] && xs[0].slice ? sliceCopy(xs[0]) : xs[0];\r\n            case 2:\r\n            default:\r\n                return apply(append, xs);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:list.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array}\r\n     * @returns {Array}\r\n     */\r\n    concatMap = curry((fn, foldableOfA) => concat(map(fn, foldableOfA))),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:list.reverse\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    reverse = xs => {\r\n        if (!isset(xs) || !xs.length) {\r\n            return xs;\r\n        }\r\n        let out = of(xs),\r\n            i = xs.length - 1;\r\n        switch (typeOf(xs)) {\r\n            case 'String':\r\n                for (; i >= 0; i -= 1) {\r\n                    out += xs[i];\r\n                }\r\n                return out;\r\n            default:\r\n                for (; i >= 0; i -= 1) {\r\n                    out.push(xs[i]);\r\n                }\r\n                return out;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the\r\n     *  elements of the list.\r\n     * @function module:list.intersperse\r\n     * @note In our version of the function javascript is loosely typed so,\r\n     *  so is our function (to much overhead to make it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array|String} - List.\r\n     * @returns {Array|String}\r\n     */\r\n    intersperse = curry((between, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return xs;\r\n        }\r\n        const limit = xs.length,\r\n            lastInd = limit - 1;\r\n        let out = of(xs),\r\n            i = 0;\r\n        if (isString(xs)) {\r\n            for (; i < limit; i += 1) {\r\n                out += i === lastInd ?\r\n                    xs[i] : xs[i] + between;\r\n            }\r\n            return out;\r\n        }\r\n        for (; i < limit; i += 1) {\r\n            if (i === lastInd) {\r\n                out.push(xs[i]);\r\n            } else {\r\n                out.push(xs[i], between);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:list.intercalate\r\n     * @param xs {Array|String}\r\n     * @param xss {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    intercalate = curry((xs, xss) => {\r\n        if (isString(xss)) {\r\n            return intersperse(xs, xss);\r\n        }\r\n        return concat(intersperse(xs, xss));\r\n    }),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:list.transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return [];\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return filter(x => length(x) > 0, outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:list.subsequences\r\n     * @jsperftest https://jsperf.com/subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array.<Array>}\r\n     */\r\n    subsequences = xs => {\r\n        const listLen = length(xs),\r\n            len = Math.pow(2, listLen),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            let entry = [];\r\n            for (let j = 0; j < listLen; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with the given indices swapped.\r\n     * @function module:list.swapped\r\n     * @param ind1 {Number}\r\n     * @param ind2 {Number}\r\n     * @param list {Array}\r\n     * @returns {Array} - Copy of incoming with swapped values at indices.\r\n     */\r\n    swapped = curry((ind1, ind2, list) => {\r\n        const out = sliceCopy(list),\r\n            tmp = out[ind1];\r\n        out[ind1] = out[ind2];\r\n        out[ind2] = tmp;\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Returns a list of permutations for passed in list.\r\n     *  Use caution with lists above a length of 15 (will take long due to nature of\r\n     *  algorithm).\r\n     * @function module:list.permutations\r\n     * @param xs {Array} - List.\r\n     * @returns {Array<Array|String|*>} - Array of permutations.\r\n     */\r\n    permutations = xs => {\r\n        const limit = length(xs);\r\n\r\n        if (!limit || limit === 1) {\r\n            return [xs];\r\n        }\r\n\r\n        let list = sliceCopy(xs),\r\n            c = repeat(limit, 0),\r\n            i = 0;\r\n\r\n        const out = [list];\r\n\r\n        for (; i < limit; i++) {\r\n            if (c[i] < i) {\r\n                list = swapped(i % 2 === 0 ? 0 : c[i], i, list);\r\n                out.push(list);\r\n                c[i] += 1;\r\n                i = 0;\r\n                continue;\r\n            }\r\n            c[i] = 0;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\r\n     * @function module:list.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldl = reduce,\r\n\r\n    /**\r\n     * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\r\n     * @function module:list.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldr = reduceRight,\r\n\r\n    /**\r\n     * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldl1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldl1 = curry((op, xs) => {\r\n        const parts = uncons(xs);\r\n        return !parts ? [] : reduce(op, parts[0], parts[1]);\r\n    }),\r\n\r\n    /**\r\n     * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldr1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldr1 = curry((op, xs) => {\r\n        const parts = unconsr(xs);\r\n        return !parts ? [] : reduceRight(op, parts[1], parts[0]);\r\n    }),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregateArray on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregateArray on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * iterate f x returns an infinite list of repeated applications of f to x.\r\n     * @function module:list.iterate\r\n     * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation.\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry((limit, op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            lastX = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out.push(lastX);\r\n            lastX = op(lastX, ind);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times.\r\n     * @function module:list.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    repeat = curry((limit, x) => iterate(limit, a => a, x)),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:list.replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    replicate = repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:list.cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    cycle = curry((limit, xs) => concat(replicate(limit, xs))),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:list.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregateArray and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry((op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:list.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:list.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:list.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry((x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry((value, xs) => findIndices(x => x === value, xs)),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:list.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = sliceTo,\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:list.drop\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = sliceFrom,\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:list.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String} - functor (list or string) to split.\r\n     * @returns {Array|String} - List like type passed\r\n     */\r\n    splitAt = (ind, list) => [sliceTo(ind, list), sliceFrom(ind, list)],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:list.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry((pred, list) =>\r\n        reduceUntil(\r\n            negateF3(pred),     // predicate\r\n            isString(list) ?\r\n                (agg, x) => agg + x :\r\n                aggregateArray, // operation\r\n            of(list),           // aggregate\r\n            list\r\n        )),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:list.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry((pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere(\r\n                    (x, i, xs) => !pred(x, i, xs),\r\n                    list\r\n                );\r\n\r\n        return splitPoint === -1 ?\r\n            sliceFrom(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.dropWhileEnd\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry((pred, list) => {\r\n        const splitPoint =\r\n            findIndexWhereRight(\r\n                (x, i, xs) => !pred(x, i, xs),\r\n                list\r\n            );\r\n        if (splitPoint === -1) {\r\n            return of(list);\r\n        }\r\n        return sliceTo(splitPoint + 1, list);\r\n    }),\r\n\r\n    /**\r\n     * Gives you the `span` of items matching predicate\r\n     * and items not matching predicate;  E.g., Gives an\r\n     * array of arrays;  E.g., [[matching-items], [non-matching-items]]\r\n     * @function list.span\r\n     * @param pred {Function} - List predicate (`(x, i, list) => bool`)\r\n     * @param list {Array|String}\r\n     * @returns {(Array<Array<*>>|Array<String>)}\r\n     * @type {Function}\r\n     */\r\n    span = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(negateF3(pred), list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * breakOnList, applied to a predicate p and a list xs, returns a tuple\r\n     * where first element is longest prefix (possibly empty) of xs of elements\r\n     * that do not satisfy p and second element is the remainder of the list:\r\n     * @haskellExample\r\n     * Replace `break` with `breakOnList` for our version.\r\n     * ```\r\n     * break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\r\n     * break (< 9) [1,2,3] == ([],[1,2,3])\r\n     * break (> 9) [1,2,3] == ([1,2,3],[])\r\n     * ```\r\n     * @function module:list.breakOnList\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    breakOnList = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(pred, list);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, list) : splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * Gets item at index.\r\n     * @function module:list.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*|undefined} - Item or `undefined`.\r\n     */\r\n    at = lookup,\r\n\r\n    /**\r\n     * Find an item in structure of elements based on given predicate (`pred`).\r\n     * @function module:list.find\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*} - Found item.\r\n     */\r\n    find = findWhere,\r\n\r\n    /**\r\n     * For each function (same as `[].forEach` except in functional format).\r\n     * @function module:list.forEach\r\n     * @param fn {Function} - Operation (`(element, index, list) => {...}`, etc.)\r\n     * @param xs {(Array|String)}\r\n     * @returns {void}\r\n     */\r\n    forEach = curry((fn, list) => {\r\n        const limit = length(list);\r\n        if (!limit) {\r\n            return;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            fn(list[ind], ind, list);\r\n        }\r\n    }),\r\n\r\n    /**\r\n     * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\r\n     * @function module:list.filter\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array} - Structure of filtered elements.\r\n     */\r\n    filter = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out.push(xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateF3(p), xs)]`.\r\n     * @function module:list.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry((pred, list) =>\r\n        !length(list) ?\r\n            [[], []] :\r\n            [filter(pred, list), filter(negateF3(pred), list)]),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether an element exists in given structure of elements.\r\n     * @function module:list.elem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    elem = includes,\r\n\r\n    /**\r\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\r\n     * @function module:list.notElem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    notElem = negateF2(includes),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a prefix of list `xs2`\r\n     * @function module:list.isPrefixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isPrefixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a suffix of list `xs2`\r\n     * @function module:list.isSuffixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSuffixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is an infix of list `xs2`\r\n     * @function module:list.isInfixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isInfixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a sub-sequence of list `xs2`\r\n     * @function module:list.isSubsequenceOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSubsequenceOf = curry((xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:list.group\r\n     * @param xs {Array|String}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    group = xs => groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:list.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry((equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return sliceCopy(xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    }),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(inits('abc'), ['','a','ab','abc'])\r\n     * ```\r\n     * @function module:list.inits\r\n     * @haskellType `inits :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => init(list), xs),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\r\n     * ```\r\n     * @function module:list.tails\r\n     * @haskellType `tails :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => tail(list), xs),\r\n\r\n    /**\r\n     * Strips prefix list from given list\r\n     * @function module:list.stripPrefix\r\n     * @param prefix {Array|String|*}\r\n     * @param list {Array|string|*}\r\n     * @returns {Array|*}\r\n     */\r\n    stripPrefix = curry((prefix, list) =>\r\n        isPrefixOf(prefix, list) ?\r\n            splitAt(length(prefix), list)[1] :\r\n            sliceCopy(list)),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:list.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry((arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = toShortest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:list.zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    zipN = curry2((...lists) => {\r\n        const trimmedLists = apply(toShortest, lists);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:list.zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip3 = curry((arr1, arr2, arr3) => zipN(arr1, arr2, arr3)),\r\n\r\n    /**\r\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:list.zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip4 = curry((arr1, arr2, arr3, arr4) => zipN(arr1, arr2, arr3, arr4)),\r\n\r\n    /**\r\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:list.zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @param arr5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip5 = curry((arr1, arr2, arr3, arr4, arr5) => zipN(arr1, arr2, arr3, arr4, arr5)),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:list.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry((op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = toShortest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:list.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = curry3((op, ...lists) => {\r\n        const trimmedLists = apply(toShortest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, apply(op, map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:list.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = curry((op, xs1, xs2, xs3) => zipWithN(op, xs1, xs2, xs3)),\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:list.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = curry((op, xs1, xs2, xs3, xs4) => zipWithN(op, xs1, xs2, xs3, xs4)),\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:list.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @param xs5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = curry((op, xs1, xs2, xs3, xs4, xs5) => zipWithN(op, xs1, xs2, xs3, xs4, xs5)),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @function module:list.unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    unzip = foldl((agg, item) => {\r\n        agg[0].push(item[0]);\r\n        agg[1].push(item[1]);\r\n        return agg;\r\n    }, [[], []]),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @function module:list.unzipN\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    /**\r\n     * Returns true if any item in container passes predicate `p`.\r\n     * @function module:list.any\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    any = curry((p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Returns true if all items in container pass predicate `p`.\r\n     * @function module:list.all\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    all = curry((p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Conjuction of container of bools (or truthy and/or falsy values);  Returns\r\n     * `true` if all in container are 'truthy' else returns `false`\r\n     * @function module:list.and\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    and = xs => all(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether any item in container is 'truthy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.or\r\n     * @haskellType `or :: Bool -> Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    or = xs => any(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether all items in container are 'falsy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.not\r\n     * @haskellType `not :: Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    not = xs => all(isFalsy, xs),\r\n\r\n    /**\r\n     * Computes the sum of the numbers of a structure.\r\n     * @function module:list.sum\r\n     * @haskellType `sum :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    sum = list => foldl((agg, x) => agg + x, 0, list),\r\n\r\n    /**\r\n     * Computes the product of the numbers of a structure.\r\n     * @function module:list.product\r\n     * @haskellType `product :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    product = list => foldl((agg, x) => agg * x, 1, list),\r\n\r\n    /**\r\n     * Returns the largest element in a non-empty structure of elements.\r\n     * @function module:list.maximum\r\n     * @haskellType `maximum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    maximum = list => last(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * Returns the smallest element in a non-empty structure of elements.\r\n     * @function module:list.minimum\r\n     * @haskellType `minimum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    minimum = list => head(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\r\n     * ```\r\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\r\n     * ```\r\n     * Also note that:\r\n     * ```\r\n     * last (scanl f z xs) == foldl f z xs.\r\n     * ```\r\n     * @function module:list.scanl\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            result = zero,\r\n            out = [];\r\n        while (ind < limit) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind++;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `scanl1` is a variant of `scanl` that has no starting value argument:\r\n     * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\r\n     * @function module:list.scanl1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return [];\r\n        }\r\n        return scanl(fn, head(xs), tail(xs));\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanl` but from the right (similiar to `foldr`'s relationship to 'foldl').\r\n     * Note also `scanr`'s relationship ot `foldr`:\r\n     * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\r\n     * @function module:list.scanr\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = limit - 1,\r\n            result = xs[0],\r\n            out = [];\r\n        while (ind > -1) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind--;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanr` but takes no zero/accumulator value.\r\n     * @function module:list.scanr1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return [];\r\n        }\r\n        return scanr(fn, last(xs), init(xs));\r\n    }),\r\n\r\n    /**\r\n     * The nub function removes duplicate elements from a list.\r\n     * In particular, it keeps only the first occurrence of each element.\r\n     * (The name nub means `essence'.) It is a special case of nubBy, which\r\n     * allows the programmer to supply their own equality test.\r\n     * ```shallowCompare( nub ([1,2,3,4,3,2,1,2,4,3,5]), [1,2,3,4,5] )```\r\n     * @function module:list.nub\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nub = list => nubBy((a, b) => a === b, list),\r\n\r\n    /**\r\n     * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\r\n     * For example, `remove('a', 'banana') === 'bnana';`\r\n     * @function module:list.remove\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    remove = curry((x, list) => removeBy((a, b) => a === b, x, list)),\r\n\r\n    /**\r\n     * The sort function implements a stable sorting algorithm.\r\n     * It is a special case of sortBy, which allows the programmer\r\n     * to supply their own comparison function.\r\n     * ```shallowCompare(sort ([1,6,4,3,2,5]), [1,2,3,4,5,6]) // true```\r\n     * @function module:list.sort\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sort = xs => sortBy(genericAscOrdering, xs),\r\n\r\n    /**\r\n     * Sort a list by comparing the results of a key function applied to each\r\n     * element. sortOn f is equivalent to sortBy (comparing f), but has the\r\n     * performance advantage of only evaluating f once for each element in the\r\n     * input list. This is called the decorate-sort-undecorate paradigm, or\r\n     * Schwartzian transform.\r\n     *\r\n     * Elements are arranged from from lowest to highest, keeping duplicates\r\n     * in the order they appeared in the input.\r\n     *\r\n     * Ex:\r\n     * ```\r\n     * shallowEquals(\r\n     *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\r\n     *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\r\n     * ) // true\r\n     * ```\r\n     * @function module:list.sortOn\r\n     * @param valueFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sortOn = curry((valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            sortBy(\r\n                // Ordering\r\n                ([a0], [b0]) => genericAscOrdering(a0, b0),\r\n\r\n                // Decorate\r\n                map(item => [valueFn(item), item], xs)\r\n            )\r\n        )\r\n    ),\r\n\r\n    /**\r\n     * The sortBy function is the non-overloaded (in haskell terms) version of sort.\r\n     * @haskellExample ```\r\n     *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\r\n     *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\r\n     * ```\r\n     * @function module:list.sortBy\r\n     * @param orderingFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sortBy = curry((orderingFn, xs) => sliceCopy(xs).sort(orderingFn || genericAscOrdering)),\r\n\r\n    /**\r\n     * The insert function takes an element and a list and inserts the element\r\n     * into the list at the first position where it is less than or equal to the\r\n     * next element. In particular, if the list is sorted before the call, the\r\n     * result will also be sorted. It is a special case of insertBy, which allows\r\n     * the programmer to supply their own comparison function.\r\n     * @function module:list.insert\r\n     * @param x {*}\r\n     * @param xs {Array|*}\r\n     * @returns {Array}\r\n     */\r\n    insert = curry((x, xs) => {\r\n        if (!xs.length) {\r\n            return of(xs, x);\r\n        }\r\n        const foundIndex = findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? concat([xs, of(xs, x)]) :\r\n            concat(intersperse(of(xs, x), splitAt(foundIndex, xs)));\r\n    }),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:list.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` means 'something that is order-able'\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array} - List to insert into (note new list is returned)\r\n     * @returns {Array} - New list.\r\n     */\r\n    insertBy = curry((orderingFn, x, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return [x];\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = splitAt(ind, xs);\r\n                return concat([parts[0], [x], parts[1]]);\r\n            }\r\n        }\r\n        return aggregateArray(sliceCopy(xs), x);\r\n    }),\r\n\r\n    /**\r\n     * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\r\n     * @function module:list.nubBy\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nubBy = curry((pred, list) => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = [],\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out.push(currItem);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Behaves the same as `remove`, but takes a user-supplied equality predicate.\r\n     * @function module:list.removeBy\r\n     * @param pred {Function} - Equality predicate `(a, b) => bool`\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeBy = curry((pred, x, list) => {\r\n        const foundIndex = findIndex(item => pred(x, item), list);\r\n        if (foundIndex > -1) {\r\n            const parts = splitAt(foundIndex, list);\r\n            return append(parts[0], tail(parts[1]));\r\n        }\r\n        return sliceCopy(list);\r\n    }),\r\n\r\n    /**\r\n     * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\r\n     * occurrence of each element of the second list removed.\r\n     * @function module:list.removeFirstBy\r\n     * @param pred {Function}\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeFirstsBy = curry((pred, xs1, xs2) =>\r\n        foldl((agg, x) => removeBy(pred, x, agg), xs1, xs2)),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:list.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    unionBy = curry((pred, arr1, arr2) =>\r\n        foldl((agg, b) => {\r\n                const alreadyAdded = any(a => pred(a, b), agg);\r\n                return !alreadyAdded ? (agg.push(b), agg) : agg;\r\n            }, sliceCopy(arr1), arr2\r\n        )),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:list.union\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    union = curry((arr1, arr2) =>\r\n        append(arr1,\r\n            filter(elm => !includes(elm, arr1), arr2))),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:list.intersect\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    intersect = curry((arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            filter(elm => includes(elm, arr2), arr1)),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:list.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array}\r\n     * @param list2 {Array}\r\n     * @return {Array}\r\n     */\r\n    intersectBy = curry((pred, list1, list2) =>\r\n        foldl((agg, a) =>\r\n                any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg\r\n            , [], list1)),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:list.difference\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    difference = curry((array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return sliceCopy(array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? (agg.push(elm), agg) : agg\r\n            , [], array1);\r\n    }),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:list.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = curry2((arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays));\r\n\r\n/**\r\n * Same as `Array.prototype.slice` though is functional version.\r\n * @function module:object.slice\r\n * @param fromIndex {Number}\r\n * @param toIndex {Number}\r\n * @param arr {Array}\r\n * @returns {Array}\r\n */\r\n\r\n/**\r\n * Same as `Array.prototype.includes` (functional version).\r\n * @function module:list.includes\r\n * @param value {*} - Value to search for.\r\n * @param xs {Array|String}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * Same as `Array.prototype.indexOf`.\r\n * @function module:list.indexOf\r\n * @param x {*} - Element to search for.\r\n * @param xs {Array|String|*} - list or list like to look in.\r\n * @returns {Number} - `-1` if element not found else index at which it is found.\r\n */\r\n\r\n/**\r\n * Same as `Array.prototype.lastIndexOf` (fp version).\r\n * @function module:list.lastIndexOf\r\n * @param x {*} - Element to search for.\r\n * @param xs {Array|String|*} - list or list like to look in.\r\n * @returns {Number} - `-1` if element not found else index at which it is found.\r\n */\r\n\r\n/**\r\n * Same as Array.prototype.push (though is functional version).\r\n * @function module:list.push\r\n * @param item {*}\r\n * @param arr {Array}\r\n * @returns {Number}\r\n */\r\n","/**\r\n * @module errorThrowing\r\n * @description Contains error throwing facilities for when a value doesn't match a type.\r\n */\r\nimport {typeOf} from './object/typeOf';\r\nimport {isArray, toTypeRef, toTypeRefName, isOfType} from './object/is';\r\nimport {curry} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @function module:errorThrowing.typeRefsToStringOrError\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    typeRefsToStringOrError = types => types.length ?\r\n        types.map(type => `\\`${toTypeRefName(type)}\\``).join(', ') : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:errorThrowing.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n                contextName, valueName, value, expectedTypeName,\r\n                foundTypeName, messageSuffix\r\n            } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? typeRefsToStringOrError(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotType}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypeThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (ValueType, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeName = toTypeRef(ValueType),\r\n                foundTypeName = typeOf(value);\r\n            if (typeChecker(ValueType, value)) { return value; } // Value matches type\r\n            throw new Error(errorMessageCall(\r\n                {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n            ));\r\n        },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotTypes}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypesThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (valueTypes, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeNames = valueTypes.map(toTypeRef),\r\n                matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\r\n                foundTypeName = typeOf(value);\r\n            if (matchFound) { return value; }\r\n            throw new Error(\r\n                errorMessageCall({\r\n                    contextName, valueName, value,\r\n                    expectedTypeName: expectedTypeNames, foundTypeName,\r\n                    messageSuffix\r\n                })\r\n            );\r\n        },\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotType`.\r\n     * @function module:errorThrowing.errorIfNotType$\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotType = _getErrorIfNotTypeThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotTypes`.\r\n     * @type {Function|module:errorThrowing.errorIfNotTypes}\r\n     * @function module:errorThrowing.errorIfNotTypes$\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotTypes = _getErrorIfNotTypesThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n     */\r\n    getErrorIfNotTypeThrower = errorMessageCall => curry(_getErrorIfNotTypeThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n     */\r\n    getErrorIfNotTypesThrower = errorMessageCall => curry(_getErrorIfNotTypesThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotType\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotType = curry(_errorIfNotType),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotTypes\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotTypes = curry(_errorIfNotTypes)\r\n;\r\n\r\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\r\n\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\r\n */\r\n\r\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {*}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\r\n\r\n/**\r\n * @typedef {Array<(String|Function)>} TypesArray\r\n */\r\n\r\n/**\r\n * @typedef {Function} TypeChecker\r\n * @description Checks whether a value is of given type.\r\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorMessageCall\r\n * @description Error message template function.\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotType\r\n * @description Used to ensure value matches passed in type.\r\n * @param type {TypeRef} - Constructor name or constructor.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - What ever value is.\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotTypes\r\n * @description Used to ensure a value matches one of one or more types passed in.\r\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - Whatever value is.\r\n */\r\n","/**\r\n * @module string\r\n * @description Contains functions for strings.\r\n */\r\nimport {intercalate, map, filter} from './list';\r\nimport {split} from './jsPlatform/string';\r\nimport {compose} from './function/compose';\r\nimport {join} from './jsPlatform/array';\r\nimport {_errorIfNotType} from './errorThrowing';\r\n\r\nexport {split};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:string.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a string on all '\\s' and/or all '\\t' characters.\r\n     * @function module:string.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:string.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:string.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n'),\r\n\r\n    /**\r\n     * Lower cases first character of a non-empty string.\r\n     * @function module:string.lcaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    lcaseFirst = xs => {\r\n        _errorIfNotType(String, 'lcaseFirst', 'xs', xs);\r\n        return xs[0].toLowerCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Upper cases first character of a non-empty string.\r\n     * @function module:string.ucaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    ucaseFirst = xs => {\r\n        _errorIfNotType(String, 'ucaseFirst', 'xs', xs);\r\n        return xs[0].toUpperCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Camel cases (class case) a string.\r\n     * @function module:string.camelCase\r\n     * @param xs {String}\r\n     * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Pattern to split on.  Optional.\r\n     * @throws {Error} - Throws error if param `xs` is not a string.\r\n     * @returns {string}\r\n     * @curried\r\n     */\r\n    camelCase = (xs, pattern = /[^a-z\\d]/i) => compose(\r\n            join(''),\r\n            map(str => ucaseFirst(str.toLowerCase())),\r\n            filter(x => !!x),\r\n            split(pattern)\r\n        )(_errorIfNotType(String, 'camelCase', 'xs', xs)),\r\n\r\n    /**\r\n     * Class cases a string.  Uses pattern /[^a-z\\d/i]/ to split on.\r\n     * If you require a different pattern use `string.camelCase(str, pattern)`\r\n     * and then upper case first character (`ucaseFirst`).\r\n     * @function module:string.classCase\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if `xs` is not a string (via `camelCase` call).\r\n     */\r\n    classCase = compose(ucaseFirst, camelCase)\r\n\r\n;\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\n","/**\r\n * @module fjl\r\n * @description Exports all module methods (object, list, string modules etc.).\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n */\r\nexport * from './object';\r\nexport * from './boolean';\r\nexport * from './function';\r\nexport * from './list';\r\nexport * from './string';\r\nexport * from './utils';\r\nexport * from './errorThrowing';\r\n"],"names":["returnCurried","executeArity","unmetArityNum","fn","argsToCurry","func","x","executeAsCurriedFunc","Array","from","arguments","a","b","c","d","e","args","unmetArity","concatedArgs","concat","canBeCalled","length","newExpectedArity","curryN","Function","Error","curry","curry2","curry3","curry4","curry5","fPureTakesOne","arg","f","name","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","instanceConstructor","instance","hasOwnProperty","keys","Object","assign","obj0","objs","reduce","topAgg","obj","agg","key","_Number","Number","_NaN","_Null","_Undefined","typeOf","value","retVal","undefined","constructorName","constructor","isNaN","_String","String","_Object","_Boolean","Boolean","_Function","_Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","toTypeRef","type","toTypeRefs","types","map","toTypeRefName","ref","Type","toTypeRefNames","isFunction","instanceOf","isType","isOfType","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isUsableImmutablePrimitive","typeOfX","isset","some","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","isOneOf","typeName","isFunctor","lookup","apply","call","of","copy","out","slice","Symbol","Promise","searchObj","nsString","indexOf","parts","split","limit","ind","parent","node","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","includes","prototype","xs","lastIndexOf","isTruthy","isFalsy","alwaysTrue","alwaysFalse","equal","equalAll","every","i","push","aggregateArray","item","sliceFrom","startInd","sliceTo","toInd","sliceCopy","genericAscOrdering","lengths","lists","toShortest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceUntilRight","arr","reduceRight","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","log","console","bind","error","peek","pop","jsonClone","JSON","parse","stringify","toAssocList","toAssocListDeep","TypeConstraint","fromAssocList","OutType","fromAssocListDeep","toArray","defineReverse","reverse","filter","forEach","join","compose","arg0","flipN","flip","id","negateF","negateF2","negateF3","negateFN","until","predicate","operation","typeInstance","fnOrError","symbolName","noop","normalizeStep","to","step","range","append","listAppend","head","last","tail","init","uncons","unconsr","concatMap","foldableOfA","intersperse","between","lastInd","intercalate","xss","transpose","numLists","ind2","longestListLen","maximum","outLists","outList","subsequences","listLen","pow","entry","j","swapped","ind1","tmp","permutations","repeat","foldl","foldr","foldl1","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","lastX","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","splitAt","takeWhile","dropWhile","splitPoint","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","zip3","arr3","zip4","arr4","zip5","arr5","zipWith","zipWithN","lenOfTrimmed","zipWith3","xs3","zipWith4","xs4","zipWith5","xs5","unzip","unzipN","lenItem0","any","p","all","and","or","not","sum","product","sortBy","minimum","scanl","scanl1","scanr","scanr1","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","a0","b0","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","unionBy","alreadyAdded","union","intersect","intersectBy","list1","list2","difference","array1","array2","complement","arr0","arrays","typeRefsToStringOrError","defaultErrorMessageCall","contextName","tmplContext","valueName","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","typesCopy","typesToMatchCopy","_getErrorIfNotTypeThrower","errorMessageCall","typeChecker","ValueType","_getErrorIfNotTypesThrower","valueTypes","expectedTypeNames","matchFound","_errorIfNotType","_errorIfNotTypes","getErrorIfNotTypeThrower","getErrorIfNotTypesThrower","errorIfNotType","errorIfNotTypes","lines","words","unwords","unlines","lcaseFirst","toLowerCase","substring","ucaseFirst","toUpperCase","camelCase","pattern","str","classCase"],"mappings":"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"}