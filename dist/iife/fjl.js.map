{"version":3,"file":"fjl.js","sources":["../../src/uncurried/_objectOps/_typeOf.js","../../src/uncurried/_objectOps/_utils.js","../../src/uncurried/_jsPlatform/_object.js","../../src/uncurried/_jsPlatform/_array.js","../../src/uncurried/_jsPlatform/_list.js","../../src/uncurried/_jsPlatform/_string.js","../../src/uncurried/_jsPlatform/_function.js","../../src/uncurried/_jsPlatform/_jsPlatform.js","../../src/uncurried/_functionOps/_curry.js","../../src/uncurried/_objectOps/_prop.js","../../src/uncurried/_objectOps/_is.js","../../src/uncurried/_objectOps/_assignDeep.js","../../src/uncurried/_functionOps/_negate.js","../../src/booleanOps.js","../../src/uncurried/_objectOps/_of.js","../../src/uncurried/_objectOps/_objectOps.js","../../src/uncurried/_listOps/_map.js","../../src/uncurried/_listOps/_aggregation.js","../../src/uncurried/_listOps/_utils.js","../../src/uncurried/_listOps/_listOps.js","../../src/uncurried/_objectOps/_setTheory.js","../../src/objectOps.js","../../src/uncurried/_functionOps/_until.js","../../src/uncurried/_functionOps/_flip.js","../../src/uncurried/_functionOps/__curry.js","../../src/uncurried/_functionOps/_id.js","../../src/uncurried/_functionOps/_compose.js","../../src/functionOps.js","../../src/uncurried/_functionOps/_functionOps.js","../../src/utils.js","../../src/jsPlatform/array.js","../../src/jsPlatform/list.js","../../src/jsPlatform/string.js","../../src/jsPlatform.js","../../src/listOps.js","../../src/stringOps.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf _objectOps\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\n/**\r\n * Returns the constructor/class/type name of a value.\r\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n * @note Returns 'Undefined' if value is `undefined`\r\n * @note Returns 'Null' if value is `null`\r\n * For values that have no concrete constructors and/or casters\r\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n * @function module:_objectOps.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (value === undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","import {typeOf} from './_typeOf';\r\n\r\nexport const\r\n\r\n    fPureTakesOne = name => (arg, f) => f[name](arg),\r\n\r\n    fPureTakes2 = name => (arg1, arg2, f) => f[name](arg1, arg2),\r\n\r\n    fPureTakes3 = name => (arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3),\r\n\r\n    fPureTakes4 = name => (arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4),\r\n\r\n    fPureTakes5 = name => (arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5),\r\n\r\n    fPureTakesOneOrMore = name => (f, ...args) => f[name](...args),\r\n\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || f.constructor !== Function) {\r\n            throw new Error (`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    };\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n * Defines some of the platform methods for objects (the ones used within `fjl`) uncurried for use\r\n * throughout the library.  @note Doesn't include all methods for objects just the ones used in\r\n *  the library.\r\n * @todo change all files named '*UnCurried' to '*_'.\r\n */\r\n\r\nimport {fPureTakesOne} from '../_objectOps/_utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived _objectOps.\r\n     * @function module:_jsPlatform_objectOps.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = (instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor,\r\n\r\n    /**\r\n     * @function module:_jsPlatform_objectOps.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:_jsPlatform_objectOps.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * Gets own enumerable keys of passed in object (`Object.keys`).\r\n     * @function module:_jsPlatform_objectOps.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    keys = obj => Object.keys(obj),\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:_jsPlatform_objectOps.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() => Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            (obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0)\r\n        )();\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n * @module _jsPlatform_arrayOps\r\n * @private\r\n * @todo updated doc blocks to list correct/updated module name.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../_objectOps/_utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Array.prototype.reverse generator (generates a _functionOps that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, []),\r\n\r\n    /**\r\n     * Maps a _functionOps to functor (_listOps etc.).\r\n     * @function module:_jsPlatform_array.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (_listOps etc.) with passed in _functionOps.\r\n     * @function module:_jsPlatform_array.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (_listOps etc.) with passed in _functionOps.\r\n     * @function module:_jsPlatform_array.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (_listOps etc.) from the right with passed in _functionOps.\r\n     * @function module:_jsPlatform_array.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an _listOps (shimmed if not exists).\r\n     * @function module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n *      on both strings and arrays.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../_objectOps/_utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:_jsPlatform_list.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:_jsPlatform_list.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:_jsPlatform_list.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:_jsPlatform_list.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:_jsPlatform_list.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from '../_objectOps/_utils';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:_stringOps.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * Created by elydelacruz on 9/7/2017.\r\n * @module _jsPlatform_function\r\n * @private\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:_jsPlatform_function.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = (fn, args) => fn.apply(null, args),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:_jsPlatform_function.call\r\n     * @param fn {Function}\r\n     * @param args {...*}\r\n     * @returns {*}\r\n     */\r\n    call = (fn, ...args) => apply(fn, args);\r\n","/**\r\n * @module jsPlatform_\r\n * @private\r\n */\r\nexport * from './_object';\r\nexport * from './_array';\r\nexport * from './_list';\r\nexport * from './_string';\r\nexport * from './_function';\r\n","/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf _functionOps\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\r\nimport {apply, length, concat} from '../_jsPlatform/_jsPlatform';\r\nimport {fnOrError} from '../_objectOps/_utils';\r\n\r\nconst notFnErrPrefix = '`fn` in `curry(fn, ...args)`';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Curries a functionOps based on it's defined arity (argument's arrayOps expected length).\r\n     * @function module:_functionOps.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => curryN(fnOrError(notFnErrPrefix, fn).length, fn, ...argsToCurry),\r\n\r\n    /**\r\n     * Curries a functionOps up to a given arity.\r\n     * @function module:_functionOps.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param curriedArgs {...*}\r\n     * @returns {Function}\r\n     */\r\n    curryN = (executeArity, fn, ...curriedArgs) => {\r\n        return (...args) => {\r\n            let concatedArgs = concat(curriedArgs, args),\r\n                canBeCalled = (length(concatedArgs) >= executeArity) || !executeArity;\r\n            return !canBeCalled ? apply(curryN, concat([executeArity, fnOrError(notFnErrPrefix, fn)], concatedArgs)) :\r\n                apply(fnOrError(notFnErrPrefix, fn), concatedArgs);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Curries a _functionOps up to an arity of 2 (won't call _functionOps until 2 or more args).\r\n     * @function module:_functionOps.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a _functionOps up to an arity of 3 (won't call _functionOps until 3 or more args).\r\n     * @function module:_functionOps.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a _functionOps up to an arity of 4 (won't call _functionOps until 4 or more args).\r\n     * @function module:_functionOps.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a _functionOps up to an arity of 5 (won't call _functionOps until 5 or more args).\r\n     * @function module:_functionOps.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","/**\r\n * @memberOf _objectOps\r\n */\r\n\r\n/**\r\n * Returns property value if found; Else `undefined`.\r\n * @function module:_objectOps.prop\r\n * @param name {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\r\nexport const prop = (name, obj) => obj[name];\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf _objectOps\r\n */\r\n\r\nimport {typeOf} from './_typeOf';\r\nimport {instanceOf, length, keys, hasOwnProperty} from '../_jsPlatform/_object';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether a value is a _functionOps or not.\r\n     * @function module:_objectOps._isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = value => instanceOf(Function, value),\r\n\r\n    /**\r\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\r\n     * be a named constructor/_functionOps-instance;  E.g.,\r\n     * ```\r\n     *  _functionOps SomeName () {} // or\r\n     *  var SomeName = _functionOps SomeName () {} // or\r\n     *  class SomeName {}\r\n     * ```\r\n     * @function module:_objectOps._isType\r\n     * @param type {Function|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = (type, obj) => typeOf(obj) === (isFunction(type) ? type.name : type),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:_objectOps._isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a boolean depicting whether a value is callable or not.\r\n     * @function module:_objectOps._isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an array (same as `Array.isArray`).\r\n     * @function module:_objectOps._isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    {isArray} = Array,\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:_objectOps._isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = value => isType(_Object, value),\r\n\r\n    /**\r\n     * Checks if value is a boolean.\r\n     * @function module:_objectOps._isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = value => isType(_Boolean, value),\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:_objectOps._isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = value => isType(_Number, value),\r\n\r\n    /**\r\n     * Checks whether value is a stringOps or not.\r\n     * @function module:_objectOps._isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = value => isType(_String, value),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:_objectOps._isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = value => isType(_Map, value),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:_objectOps._isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = value => isType(_Set, value),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:_objectOps._isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap = value => isType(_WeakMap, value),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:_objectOps._isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = value => isType(_WeakSet, value),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:_objectOps._isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = value => isType(_Undefined, value),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:_objectOps._isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = value => isType(_Null, value),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:_objectOps._isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = value => isType(_Symbol, value),\r\n\r\n    /**\r\n     * Checks if given `x` is set and of one of\r\n     *  [String, Boolean, Number, Symbol] (null and undefined are immutable\r\n     *  but are not \"usable\" (usually not what we want to operate on).\r\n     * @deprecated If needed copy&paste implementation to your project.\r\n     * @function module:_objectOps._isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return isset(x) &&\r\n            [_String, _Number, _Boolean, _Symbol]\r\n                .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:_objectOps._isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => !length(x),\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:_objectOps._isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:_objectOps._isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in value is empty;  I.e.,\r\n     *  check for one of '', 0, `null`, `undefined`, `false`, empty array, empty object, empty function (zero arity),\r\n     *  or empty collection (es6 Map, Set, WeakMap, or WeakSet etc. (`!value.size`);\r\n     * @function module:_objectOps._isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        let typeOfValue = typeOf(value),\r\n            retVal;\r\n        if (!value) { // if '', 0, `null`, `undefined`, or `false` then is empty\r\n            retVal = true;\r\n        }\r\n        else if (typeOfValue === _Array || typeOfValue === _Function) {\r\n            retVal = isEmptyList(value);\r\n        }\r\n        else if (typeOfValue === _Number) {\r\n            retVal = false;\r\n        }\r\n        else if (typeOfValue === _Object) {\r\n            retVal = isEmptyObject(value);\r\n        }\r\n        else if (hasOwnProperty('size', value) && isNumber(value.size)) {\r\n            retVal = isEmptyCollection(value);\r\n        }\r\n        else {\r\n            retVal = !value;\r\n        }\r\n        return retVal;\r\n    },\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null or not.\r\n     * @function module:_objectOps._isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => x !== null && x !== undefined;\r\n","\r\nimport {isObject} from './_is';\r\n\r\nimport {keys, hasOwnProperty} from '../_jsPlatform/_object';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one.\r\n     * @function module:jsPlatform._objectOps.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = (obj0, ...objs) =>\r\n        objs.reduce((topAgg, obj) =>\r\n                keys(obj).reduce((agg, key) => {\r\n                    let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                    // If property is not writable move to next item in collection\r\n                    if (hasOwnProperty(key, agg) && propDescription &&\r\n                        !(propDescription.get && propDescription.set) &&\r\n                        !propDescription.writable) {\r\n                        return agg;\r\n                    }\r\n                    if (isObject(agg[key]) && isObject(obj[key])) {\r\n                        assignDeep(agg[key], obj[key]);\r\n                    }\r\n                    else { agg[key] = obj[key]; }\r\n                    return agg;\r\n                }, topAgg)\r\n            , obj0);\r\n","/**\r\n * @memberOf _functionOps\r\n */\r\n\r\nimport {apply} from '../_jsPlatform/_function';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Takes a function that takes two parameters and returns a negated version of given\r\n     * function.\r\n     * @function module:_negate.negateF\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF = fn => (a, b) => !fn(a, b),\r\n\r\n    /**\r\n     * Takes a function that takes three parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF3 = fn => (a, b, c) => !fn(a, b, c),\r\n\r\n    /**\r\n     * Takes a function that takes four parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF4 = fn => (a, b, c, d) => !fn(a, b, c, d),\r\n\r\n    /**\r\n     * Takes a function that takes four parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF5 = fn => (a, b, c, d, e) => !fn(a, b, c, d, e),\r\n\r\n    /**\r\n     * Negates a javascript-'generic' predicate; `Function<element, index, list>`.\r\n     * @function module:_functionOps.negateP\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateP = negateF3,\r\n\r\n    /**\r\n     * Returns a new function which is the dual of `fn` (or the negated version of `fn`).\r\n     * @function module:_functionOps.negateFMany\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFMany = fn => (...args) => !apply(fn, args);\r\n","/**\r\n * Created by elyde on 7/15/2017.\r\n * @module booleanOps\r\n */\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:booleanOps.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:booleanOps.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value,\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:booleanOps.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:booleanOps.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false;\r\n","import {isFunction, isset} from './_is';\r\nimport {hasOwnProperty} from '../_jsPlatform/_object';\r\nimport {apply} from '../_jsPlatform/_function';\r\nimport {typeOf} from './_typeOf';\r\n\r\n/**\r\n * Checks if given `x` is set and of one of\r\n *  [String, Boolean, Number, or Symbol] (null and undefined are immutable\r\n *   but are not \"usable\" or 'not what we usually want to operate on'.\r\n * @private\r\n * @param x {*}\r\n * @returns {Boolean}\r\n */\r\nfunction isUsableImmutablePrimitive (x) {\r\n    const typeOfX = typeOf(x);\r\n    return isset(x) &&\r\n        [String.name, Number.name, Boolean.name, Symbol.name]\r\n            .some(Type => Type === typeOfX);\r\n}\r\n\r\n/**\r\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n * ```\r\n * // - If exists `(value).constructor.of` uses this.\r\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\r\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n * // - Else if constructor is a function, thus far, then calls constructor using\r\n * //      the `new` keyword (with any passed in args).\r\n * ```\r\n * @function module:_objectOps.of\r\n * @param x {*} - Value to derive returned value's type from.\r\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n */\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","/**\r\n * @module _objectOps\r\n * @description Object operations (uncurried).\r\n * @private\r\n */\r\nexport * from '../_jsPlatform/_object';\r\nexport * from './_prop';\r\nexport * from './_typeOf';\r\nexport * from './_is';\r\nexport * from './_of';\r\nexport * from './_assignDeep';\r\nexport * from './_setTheory';\r\n\r\nimport {typeOf} from './_typeOf';\r\n\r\nexport const\r\n\r\n    toArrayMap = obj => Object.keys(obj).map(key => [key, obj[key]]),\r\n\r\n    fromArrayMap = xs => xs.reduce((agg, [key, value]) => {\r\n        agg[key] = value;\r\n        return agg;\r\n    }, {}),\r\n\r\n    toArray = x => {\r\n        let out;\r\n        switch (typeOf(x)) {\r\n            case 'Null':\r\n            case 'Undefined':\r\n                out = [];\r\n                break;\r\n            case String.name:\r\n            case Array.name:\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n            case 'Map':\r\n            case 'Set':\r\n                out = Array.from(x);\r\n                break;\r\n            case Object.name:\r\n            default:\r\n                out = toArrayMap(x);\r\n                break;\r\n        }\r\n        return out;\r\n    }\r\n\r\n;\r\n","import {length} from '../_jsPlatform/_object';\r\n\r\n/**\r\n * @function module:_listOps.map\r\n * @param fn {Function} - Function to map on array.\r\n * @param xs {Array}\r\n * @returns {Array}\r\n */\r\nexport default function _map (fn, xs) {\r\n    let ind = 0,\r\n        limit = length(xs),\r\n        out = [];\r\n    if (!limit) { return out; }\r\n    while (ind < limit) {\r\n        out.push(fn(xs[ind], ind, xs));\r\n        ind += 1;\r\n    }\r\n    return out;\r\n}\r\n","import {typeOf} from '../_objectOps/_objectOps';\r\n\r\nexport const\r\n\r\n    aggregateStr = (agg, item) => agg + item,\r\n\r\n    aggregateArr = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    },\r\n\r\n    aggregateObj = (agg, item, ind) => {\r\n        agg[ind] = item;\r\n        return agg;\r\n    },\r\n\r\n    aggregatorByType = x => {\r\n        switch (typeOf(x)) {\r\n            case 'String': return aggregateStr;\r\n            case 'Array': return aggregateArr;\r\n            case 'Object':\r\n            default: return aggregateObj;\r\n        }\r\n    };\r\n","/**\r\n * List operator utils module.\r\n * @module _listOpUtils\r\n * @private\r\n */\r\nimport {apply}              from '../_jsPlatform/_function';  // un-curried version\r\nimport {slice}              from '../_jsPlatform/_list';      // un-curried version good for both strings and arrays\r\nimport {length}             from '../_jsPlatform/_object';\r\nimport {alwaysFalse}        from '../../booleanOps';\r\nimport _map                 from './_map';\r\n\r\nexport * from './_aggregation';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @function module:_listOpsUtils.sliceFrom\r\n     * @param startInd {Number}\r\n     * @param arr {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = (startInd, arr) => slice(startInd, undefined, arr),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @function module:_listOpsUtils.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = (toInd, xs) => slice(0, toInd, xs),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function _listOpUtils.sliceFrom\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    copy = xs => sliceFrom(0, xs),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function _listOpUtils.sliceCopy\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceCopy = copy,\r\n\r\n    /**\r\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n     * @function module:_listOpsUtils.genericAscOrdering\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {number}\r\n     */\r\n    genericAscOrdering = (a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @function module:_listOpsUtils.lengths\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = (...lists) => length(lists) ? _map(length, lists) : [],\r\n\r\n    /**\r\n     * @function module:_listOpsUtils.lengthsToSmallest\r\n     * @param lists {...(Array|String|*)}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengthsToSmallest = (...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return _map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : copy(list), lists);\r\n    },\r\n\r\n    /**\r\n     * Reduces until predicate.\r\n     * @param pred\r\n     * @param op\r\n     * @param agg\r\n     * @param arr\r\n     * @returns {*}\r\n     */\r\n    reduceUntil = (pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Reduces until predicate (from the right).\r\n     * @param pred\r\n     * @param op\r\n     * @param agg\r\n     * @param arr\r\n     * @returns {*}\r\n     */\r\n    reduceRightUntil = (pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    reduce = (operation, agg, arr) =>\r\n        reduceUntil(\r\n            alwaysFalse,            // until-predicate\r\n            operation,              // operation\r\n            agg,                    // aggregator\r\n            arr),                   // list\r\n\r\n    reduceRight = (operation, agg, arr) =>\r\n        reduceRightUntil(\r\n            alwaysFalse,            // until-predicate\r\n            operation,              // operation\r\n            agg,                    // aggregator\r\n            arr),                   // list\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:_listOpUtilslastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:_listOpUtilsfindIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = (pred, arr) => {\r\n        let ind = -1,\r\n            predicateFulfilled = false;\r\n        const limit = length(arr);\r\n        while (ind < limit && !predicateFulfilled) {\r\n            predicateFulfilled = pred(arr[++ind], ind, arr);\r\n        }\r\n        return ind;\r\n    },\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:_listOpUtilsfindIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = (pred, arr) => {\r\n        const limit = length(arr);\r\n        let ind = limit,\r\n            predicateFulfilled = false;\r\n        for (; ind >= 0 && !predicateFulfilled; --ind) {\r\n            predicateFulfilled = pred(arr[ind], ind, arr);\r\n        }\r\n        return ind;\r\n    },\r\n\r\n    /**\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = (pred, xs) => {\r\n        if (!xs || !xs.length) { return undefined; }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out.length ? out : undefined;\r\n    },\r\n\r\n    /**\r\n     * @function module:_listOpUtilsfind\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = (pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    }\r\n\r\n;\r\n","/**\r\n * List operations module.\r\n * @module _listOps\r\n * @todo decide whether to throw errors where functions cannot function without a specific type or to return undefined (and also determine which cases are ok for just returning undefined).\r\n * @private\r\n */\r\nimport {\r\n    concat as listAppend,\r\n    indexOf, slice, includes\r\n}\r\n    from '../_jsPlatform/_list';\r\n\r\nimport {apply} from '../_jsPlatform/_function';\r\nimport {negateP, negateF} from '../_functionOps/_negate';\r\nimport {isTruthy, isFalsy} from '../../booleanOps';\r\nimport {prop, length} from '../_objectOps/_objectOps';\r\nimport _map from './_map';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    lengthsToSmallest, aggregateArr,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, copy, genericAscOrdering\r\n}\r\n    from './_utils';\r\n\r\n// Exported imports\r\nexport {_map};\r\n\r\n// Exported internals\r\nexport const\r\n\r\n    /**\r\n     * Append two lists, i.e.,\r\n     * ```\r\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\r\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\r\n     * ```\r\n     * If the first list is not finite, the result is the first list.\r\n     * @haskellType `append :: List a => a -> a -> a`\r\n     * @function module:_listOps._append\r\n     * @param xs1 {Array} - list or list like.\r\n     * @param xs2 {Array} - list or list like.\r\n     * @returns {Array} - Same type as list like passed in.\r\n     */\r\n    _append = listAppend,\r\n\r\n    /**\r\n     * Append two or more lists, i.e., same as `_append` but for two ore more lists.\r\n     * @haskellType `appendMany :: List a => a -> [a] -> a\r\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\r\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\r\n     * @function module:_listOps._appendMany\r\n     * @param args ...{Array} - Lists or lists likes.\r\n     * @returns {Array} - Same type as first list or list like passed in.\r\n     */\r\n    _appendMany = (...args) => {\r\n        if (length(args)) { return apply(listAppend, args); }\r\n        throw new Error('`_appendMany` requires at least one arg.');\r\n    },\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:_listOps._head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    _head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:_listOps._last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    _last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:_listOps._tail\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    _tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:_listOps._init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    _init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:_listOps._uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|undefined}\r\n     */\r\n    _uncons = xs =>\r\n        !xs || length(xs) === 0 ? undefined : [_head(xs), _tail(xs)],\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:_listOps._unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    _unconsr = xs => !xs || length(xs) === 0 ? undefined : [_init(xs), _last(xs)],\r\n    \r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:_listOps._concat\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    _concat = xs => !length(xs) ? copy(xs) : apply(_appendMany, xs),\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:_listOps._concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array}\r\n     * @returns {Array}\r\n     */\r\n    _concatMap = (fn, foldableOfA) => _concat(_map(fn, foldableOfA)),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:_listOps._reverse\r\n     * @param x {Array}\r\n     * @returns {Array}\r\n     */\r\n    _reverse = x => _foldr((agg, item) => (agg.push(item), agg), [], x),\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:_listOps._intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array} - List.\r\n     * @returns {Array}\r\n     */\r\n    _intersperse = (between, arr) => {\r\n        const limit = length(arr),\r\n            lastInd = limit - 1,\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        return _foldl((agg, item, ind) => (\r\n                ind === lastInd ?\r\n                    agg.push(item) :\r\n                    agg.push(item, between),\r\n                agg\r\n            ), out, arr);\r\n    },\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:_listOps._intercalate\r\n     * @param xs {Array}\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    _intercalate = (xs, xss) => _concat(_intersperse(xs, xss)),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @todo upgrade this function to support lists of strings.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:_listOps._transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    _transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return [];\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = _maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return _filter(x => length(x), outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:_listOps.subsequences\r\n     * @jsperftest https://jsperf.com/subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array.<Array>}\r\n     */\r\n    _subsequences = xs => {\r\n        const listLen = length(xs),\r\n            len = Math.pow(2, listLen),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            let entry = [];\r\n            for (let j = 0; j < listLen; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Same as `subsequences` but returns an `Array.<Type>` instead\r\n     *  of an array of arrays.  **Note:** `Type` here means\r\n     *  a string, an instance of array, or some indexable-like type.\r\n     * @function module:_listOps._subsequences1\r\n     * @jsperftest https://jsperf.com/subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array.<(Array|String|*)>}\r\n     */\r\n    _subsequences1 = xs => {\r\n        const listLen = length(xs),\r\n            len = Math.pow(2, listLen),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            let entry = [];\r\n            for (let j = 0; j < listLen; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    _swapped = (ind1, ind2, list) => {\r\n        const out = copy(list),\r\n            tmp = out[ind1];\r\n        out[ind1] = out[ind2];\r\n        out[ind2] = tmp;\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns a list of permutations for passed in list.\r\n     *  Use caution with lists above a length of 15 (will take long due to nature of\r\n     *  algorithm).\r\n     * @function module:_listOps._permutations\r\n     * @param xs {Array} - List.\r\n     * @returns {Array<Array|String|*>} - Array of permutations.\r\n     */\r\n    _permutations = xs => {\r\n        const limit = length(xs);\r\n\r\n        if (!limit || limit === 1) {\r\n            return [xs];\r\n        }\r\n\r\n        let list = copy(xs),\r\n            c = _repeat(limit, 0),\r\n            i = 0;\r\n\r\n        const out = [list];\r\n\r\n        for (; i < limit; i++) {\r\n            if (c[i] < i) {\r\n                list = _swapped(i % 2 === 0 ? 0 : c[i], i, list);\r\n                out.push(list);\r\n                c[i] += 1;\r\n                i = 0;\r\n                continue;\r\n            }\r\n            c[i] = 0;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\r\n     * @function module:_listOps._foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    _foldl = reduce,\r\n\r\n    /**\r\n     * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\r\n     * @function module:_listOps._foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    _foldr = reduceRight,\r\n\r\n    /**\r\n     * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:_listOps._foldl1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    _foldl1 = (op, xs) => {\r\n        const parts = _uncons(xs);\r\n        return !parts ? [] : reduce(op, parts[0], parts[1]);\r\n    },\r\n\r\n    /**\r\n     * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:_listOps._foldr1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    _foldr1 = (op, xs) => {\r\n        const parts = _unconsr(xs);\r\n        return !parts ? [] : reduceRight(op, parts[1], parts[0]);\r\n    },\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:_listOps._mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    _mapAccumL = (op, zero, xs) => {\r\n        const list = copy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    },\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:_listOps._mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    _mapAccumR = (op, zero, xs) => {\r\n        const list = copy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    },\r\n\r\n    /**\r\n     * iterate f x returns an infinite list of repeated applications of f to x.\r\n     * @function module:_listOps._iterate\r\n     * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation.\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    _iterate = (limit, op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            lastX = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out.push(lastX);\r\n            lastX = op(lastX);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times.\r\n     * @function module:_listOps.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    _repeat = (limit, x) => _iterate(limit, a => a, x),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:_listOps._replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    _replicate = _repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:_listOps._cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    _cycle = (limit, xs) => _concat(_replicate(limit, xs)),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:_listOps._unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    _unfoldr = (op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:_listOps._findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    _findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:_listOps.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    _findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:_listOps._elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    _elemIndex = (x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    },\r\n\r\n    /**\r\n     * @function module:_listOps._elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    _elemIndices = (value, xs) => _findIndices(x => x === value, xs),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:_listOps.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    _take = (limit, list) => sliceTo(limit, list),\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:_listOps._take\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    _drop = (count, list) => sliceFrom(count, list),\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:_listOps._splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array} - functor (list or string) to split.\r\n     * @returns {Array} - Array of whatever type `x` was when passed in\r\n     */\r\n    _splitAt = (ind, list) => [ sliceTo(ind, list), sliceFrom(ind, list) ],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:_listOps._takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    _takeWhile = (pred, list) =>\r\n        reduceUntil(\r\n            negateP(pred),  // predicate\r\n            aggregateArr,   // operation\r\n            [],             // aggregator\r\n            list\r\n        ),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:_listOps._dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    _dropWhile = (pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    },\r\n\r\n    /**\r\n     * @function module:_listOps._dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    _dropWhileEnd = (pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhereRight((item, ind, list2) =>\r\n                    !pred(list[ind], ind, list2), list);\r\n\r\n        return splitPoint === -1 ?\r\n            sliceTo(limit, list) :\r\n            sliceTo(splitPoint + 1, list);\r\n    },\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @function module:_listOps._span\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    _span = (pred, list) => {\r\n        const splitPoint = findIndexWhere(negateP(pred), list);\r\n        return splitPoint === -1 ?\r\n            _splitAt(0, list) : _splitAt(splitPoint, list);\r\n    },\r\n\r\n    _breakOnList = (pred, list) => {\r\n        const splitPoint = findIndexWhere(pred, list);\r\n        return splitPoint === -1 ?\r\n            _splitAt(0, list) : _splitAt(splitPoint, list);\r\n    },\r\n\r\n    /**\r\n     * Gets item at index.\r\n     * @function module:_listOps.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*|undefined} - Item or `undefined`.\r\n     */\r\n    _at = prop,\r\n\r\n    /**\r\n     * Find an item in structure of elements based on given predicate (`pred`).\r\n     * @function module:_listOps.find\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*} - Found item.\r\n     */\r\n    _find = findWhere,\r\n\r\n    /**\r\n     * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\r\n     * @function module:_listOps._filter\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array} - Structure of filtered elements.\r\n     */\r\n    _filter = (pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out.push(xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\r\n     * @function module:_listOps._partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    _partition = (pred, list) =>\r\n        !length(list) ?\r\n            [[], []] :\r\n                [_filter(pred, list), _filter(negateP(pred), list)],\r\n\r\n    /**\r\n     * Returns a boolean indicating whether an element exists in given structure of elements.\r\n     * @function module:_listOps._elem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    _elem = includes,\r\n\r\n    /**\r\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\r\n     * @function module:_listOps._notElem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    _notElem = negateF(includes),\r\n\r\n    _lookup = _at,\r\n\r\n    _isPrefixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    _isSuffixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    _isInfixOf = (xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    _isSubsequenceOf = (xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:_listOps._group\r\n     * @param xs {Array}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    _group = xs => _groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:_listOps._groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array}\r\n     * @returns {*}\r\n     */\r\n    _groupBy = (equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return copy(xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(_takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    },\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(inits('abc'), ['','a','ab','abc'])\r\n     * ```\r\n     * @function module:_listOps._inits\r\n     * @haskellType `inits :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    _inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //_map(list => _init(list), xs),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\r\n     * ```\r\n     * @function module:_listOps._tails\r\n     * @haskellType `tails :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    _tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //_map(list => tail(list), xs),\r\n\r\n    _stripPrefix = (prefix, list) =>\r\n        _isPrefixOf(prefix, list) ?\r\n            _splitAt(length(prefix), list)[1] :\r\n            copy(list),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:_listOps._zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zip = (arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    },\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:_listOps._zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    _zipN = (...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, _filter(length, lists)),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, _map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:_listOps._zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zip3 = (arr1, arr2, arr3) => _zipN(arr1, arr2, arr3),\r\n\r\n    /**\r\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:_listOps._zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zip4 = (arr1, arr2, arr3, arr4) => _zipN(arr1, arr2, arr3, arr4),\r\n\r\n    /**\r\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:_listOps._zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @param arr5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zip5 = (arr1, arr2, arr3, arr4, arr5) => _zipN(arr1, arr2, arr3, arr4, arr5),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:_listOps._zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zipWith = (op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = lengthsToSmallest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    },\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:_listOps._zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zipWithN = (op, ...lists) => {\r\n        const trimmedLists = apply(lengthsToSmallest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArr(agg, apply(op, _map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    },\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:_listOps.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zipWith3 = (op, xs1, xs2, xs3) => _zipWithN(op, xs1, xs2, xs3),\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:_listOps.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zipWith4 = (op, xs1, xs2, xs3, xs4) => _zipWithN(op, xs1, xs2, xs3, xs4),\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:_listOps._zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @param xs5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    _zipWith5 = (op, xs1, xs2, xs3, xs4, xs5) => _zipWithN(op, xs1, xs2, xs3, xs4, xs5),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:_listOps._unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    _unzip = arr =>\r\n        _foldl((agg, item) => {\r\n            agg[0].push(item[0]);\r\n            agg[1].push(item[1]);\r\n            return agg;\r\n        }, [[], []], arr),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\r\n     * @function module:_listOps._unzip\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    _unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            _unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return _foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    /**\r\n     * Returns true if any item in container passes predicate `p`.\r\n     * @function module:_listOps._any\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    _any = (p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Returns true if all items in container pass predicate `p`.\r\n     * @function module:_listOps._all\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    _all = (p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (limit === 0) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Conjuction of container of bools (or truthy and/or falsy values);  Returns\r\n     * `true` if all in container are 'truthy' else returns `false`\r\n     * @function module:_listOps._and\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    _and = xs => _all(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether any item in container is 'truthy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:_listOps._or\r\n     * @haskellType `or :: Bool -> Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    _or = xs => _any(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether all items in container are 'falsy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:_listOps._not\r\n     * @haskellType `not :: Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    _not = xs => _all(isFalsy, xs),\r\n\r\n    /**\r\n     * Computes the sum of the numbers of a structure.\r\n     * @function module:_listOps._sum\r\n     * @haskellType `sum :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    _sum = list => _foldl((agg, x) => agg + x, 0, list),\r\n\r\n    /**\r\n     * Computes the product of the numbers of a structure.\r\n     * @function module:_listOps._product\r\n     * @haskellType `product :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    _product = list => _foldl((agg, x) => agg * x, 1, list),\r\n\r\n    /**\r\n     * Returns the largest element in a non-empty structure of elements.\r\n     * @function module:_listOps._maximum\r\n     * @haskellType `maximum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    _maximum = list => _last(_sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * Returns the smallest element in a non-empty structure of elements.\r\n     * @function module:_listOps._minimum\r\n     * @haskellType `minimum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    _minimum = list => _head(_sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\r\n     * ```\r\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\r\n     * ```\r\n     * Also note that:\r\n     * ```\r\n     * last (scanl f z xs) == foldl f z xs.\r\n     * ```\r\n     * @function module:_listOps._scanl\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    _scanl = (fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            result = zero,\r\n            out = [];\r\n        while (ind < limit) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind++;\r\n        }\r\n        return out;\r\n    },\r\n\r\n    _scanl1 = (fn, xs) => {\r\n        if (!xs || !xs.length) { return []; }\r\n        return _scanl(fn, _head(xs), _tail(xs));\r\n    },\r\n\r\n    _scanr = (fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = limit - 1,\r\n            result = xs[0],\r\n            out = [];\r\n        while (ind > -1) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind--;\r\n        }\r\n        return out;\r\n    },\r\n\r\n    _scanr1 = (fn, xs) => {\r\n        if (!xs || !xs.length) { return []; }\r\n        return _scanr(fn, _last(xs), _init(xs));\r\n    },\r\n\r\n    _nub = list => _nubBy((a, b) => a === b, list),\r\n\r\n    _remove = (x, list) => _removeBy((a, b) => a === b, x, list),\r\n\r\n    _sort = xs => _sortBy(genericAscOrdering, xs),\r\n\r\n    _sortOn = (valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        _map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            _sortBy(\r\n                // Ordering\r\n                ([a0], [b0]) => genericAscOrdering(a0, b0),\r\n\r\n                // Decorate\r\n                _map(item => [valueFn(item), item], xs)\r\n            )\r\n        ),\r\n\r\n    _sortBy = (orderingFn, xs) => copy(xs).sort(orderingFn || genericAscOrdering),\r\n\r\n    _insert = (x, xs) => {\r\n        if (!length(xs)) {\r\n            return [x];\r\n        }\r\n        const foundIndex = _findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? [x] :\r\n            _concat(_intersperse([x], _splitAt(foundIndex, xs)));\r\n    },\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:_listOps._insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` === // something that is order-able\r\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array} - List to insert into (note new list is returned)\r\n     * @returns {Array} - New list.\r\n     */\r\n    _insertBy = (orderingFn, x, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return [x];\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = _splitAt(ind, xs);\r\n                return _concat([parts[0], [x], parts[1]]);\r\n            }\r\n        }\r\n        return aggregateArr(copy(xs), x);\r\n    },\r\n\r\n    _nubBy = (pred, list) => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = [],\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (_any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out.push(currItem);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    _removeBy = (pred, x, list) => { // @todo optimize this implementation\r\n        const foundIndex = _findIndex(item => pred(x, item), list),\r\n            parts = _splitAt(foundIndex > -1 ? foundIndex : 0, list); // @todo correct this implementation\r\n        return _append(parts[0], _tail(parts[1]));\r\n    },\r\n\r\n    _removeFirstsBy = (pred, xs1, xs2) =>\r\n        _foldl((agg, item) => _removeBy(pred, item, agg), xs1, xs2),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:_listOps._unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    _unionBy = (pred, arr1, arr2) =>\r\n        _foldl((agg, b) => {\r\n                const alreadyAdded = _any(a => pred(a, b), agg);\r\n                return !alreadyAdded ? (agg.push(b), agg) : agg;\r\n            }, copy(arr1), arr2\r\n        ),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:_listOps._union\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    _union = (arr1, arr2) =>\r\n        _append(arr1,\r\n            _filter(elm => !includes(elm, arr1), arr2)),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:_listOps._intersect\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    _intersect = (arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            _filter(elm => includes(elm, arr2), arr1),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:_listOps._intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array}\r\n     * @param list2 {Array}\r\n     * @return {Array}\r\n     */\r\n    _intersectBy = (pred, list1, list2) =>\r\n        _foldl((agg, a) =>\r\n                _any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg\r\n            , [], list1),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:_listOps._difference\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    _difference = (array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return copy(array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? (agg.push(elm), agg) : agg\r\n            , [], array1);\r\n    },\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:_listOps._complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    _complement = (arr0, ...arrays) =>\r\n        reduce((agg, arr) => _append(agg, _difference(arr, arr0)), [], arrays);\r\n","import {assignDeep} from './_assignDeep';\r\nimport {hasOwnProperty, keys} from '../_jsPlatform/_object';\r\nimport {_foldl as foldl} from '../_listOps/_listOps';\r\n\r\nexport const\r\n\r\n    objUnion = (obj1, obj2) => assignDeep(obj1, obj2),\r\n\r\n    objIntersect = (obj1, obj2) => foldl((agg, key) => {\r\n        if (hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1)),\r\n\r\n    objDifference = (obj1, obj2) => foldl((agg, key) => {\r\n        if (!hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1)),\r\n\r\n    objComplement = (obj0, ...objs) => foldl((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs);\r\n","/**\r\n * @module objectOps\r\n */\r\nimport {curry, curry2} from './uncurried/_functionOps/_curry';\r\nimport {\r\n    instanceOf as _instanceOf,\r\n    hasOwnProperty as _hasOwnProperty,\r\n    assign as _assign} from './uncurried/_jsPlatform/_object';\r\nimport {prop as _prop} from './uncurried/_objectOps/_prop';\r\nimport {assignDeep as _assignDeep}      from './uncurried/_objectOps/_assignDeep';\r\nimport {\r\n    objUnion as _objUnion,\r\n    objComplement as _objComplement,\r\n    objIntersect as _objIntersect,\r\n    objDifference as _objDifference}    from './uncurried/_objectOps/_setTheory';\r\nimport {isType as _isType}\r\n    from './uncurried/_objectOps/_is';\r\n\r\nexport {length, keys} from './uncurried/_jsPlatform/_object';\r\nexport * from './uncurried/_objectOps/_typeOf';\r\nexport * from './uncurried/_objectOps/_of';\r\nexport {\r\n    isFunction, isClass, isCallable, isArray, isObject, isBoolean,\r\n    isNumber, isString, isMap, isSet, isWeakMap, isWeakSet, isUndefined,\r\n    isNull, isSymbol, isUsableImmutablePrimitive,\r\n    isEmptyList, isEmptyObject, isEmptyCollection, isEmpty, isset\r\n} from './uncurried/_objectOps/_is';\r\n\r\nexport {_instanceOf, _isType, _hasOwnProperty, _assign, _prop, _assignDeep, _objUnion,\r\n_objComplement, _objIntersect, _objDifference};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Gives `undefined` or prop value if it is available.\r\n     * @function module:objectOps.prop\r\n     * @param propName {String}\r\n     * @param obj {*} - Object to search.\r\n     * @returns {*|undefined}\r\n     * @curried\r\n     */\r\n    prop = curry(_prop),\r\n\r\n    /**\r\n     * `instanceof` in function form.\r\n     * @function module:objectOps.instanceOf\r\n     * @param instance {*}\r\n     * @param Type {Function}\r\n     * @returns {Boolean}\r\n     * @curried\r\n     */\r\n    instanceOf = curry(_instanceOf),\r\n\r\n    /**\r\n     * `hasOwnProperty` as a method (takes object last).\r\n     * @function module:objectOps.hasOwnProperty\r\n     * @param propName {String}\r\n     * @param obj {*} - Object to search.\r\n     * @returns {Boolean}\r\n     * @curried\r\n     */\r\n    hasOwnProperty = curry(_hasOwnProperty),\r\n\r\n    /**\r\n     * `Object.assign` if it is available else a shim.\r\n     * @function module:objectOps.assign\r\n     * @param [...obj]{Object} - One or more objects to merge onto first object.\r\n     * @returns {Object}\r\n     * @curried - Called after having two or more args\r\n     */\r\n    assign = curry2(_assign),\r\n\r\n    /**\r\n     * Same as `Object.assign` except does a deep merge.\r\n     * @function module:objectOps.assignDeep\r\n     * @param [...obj]{Object} - One or more objects to deep merge onto first object.\r\n     * @returns {Object}\r\n     * @curried - Called after having two or more args\r\n     */\r\n    assignDeep = curry2(_assignDeep),\r\n\r\n    /**\r\n     * Cartesian union for objects (operates on two objects).\r\n     * @function module:objectOps.objUnion\r\n     * @param obj1 {Object}\r\n     * @param obj2 {Object}\r\n     * @returns {Object} - Unified obj.\r\n     * @curried\r\n     */\r\n    objUnion = curry(_objUnion),\r\n\r\n    /**\r\n     * Returns the cartesian intersection of two objects.\r\n     * @function module:objectOps.objIntersect\r\n     * @param obj1 {Object}\r\n     * @param obj2 {Object}\r\n     * @returns {Object} - Intersection of given objects.\r\n     * @curried\r\n     */\r\n    objIntersect = curry(_objIntersect),\r\n\r\n    /**\r\n     * Returns the cartesian difference of two objects.\r\n     * @function module:objectOps.objDifference\r\n     * @param obj1 {Object}\r\n     * @param obj2 {Object}\r\n     * @returns {Object} - Difference of given objects.\r\n     * @curried\r\n     */\r\n    objDifference = curry(_objDifference),\r\n\r\n    /**\r\n     * Returns the cartesian complement of one or more objects on given object.\r\n     * @function module:objectOps.objDifference\r\n     * @param obj {Object}\r\n     * @param [...obj]{Object} - One or more objects to calculate complement from.\r\n     * @returns {Object} - Complement of given objects.\r\n     * @curried\r\n     */\r\n    objComplement = curry2(_objComplement),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether a value is of given type or not.\r\n     * @function module:objectOps.isType\r\n     * @param Type {Function|String} - Constructor or constructor name\r\n     * @param value {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry(_isType);\r\n\r\n    /**\r\n     * Returns whether a value is a function or not.\r\n     * @function module:objectOps.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:objectOps.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n\r\n    /**\r\n     * Returns a boolean depicting whether a value is callable or not.\r\n     * @function module:objectOps.isCallable\r\n     * @tentative\r\n     * @private\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is an array.\r\n     * @function module:objectOps.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:objectOps.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is a boolean.\r\n     * @function module:objectOps.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:objectOps.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is a string or not.\r\n     * @function module:objectOps.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:objectOps.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:objectOps.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:objectOps.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:objectOps.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:objectOps.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:objectOps.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:objectOps.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * @tentative\r\n     * @private\r\n     */\r\n\r\n    /**\r\n     * Checks if given `x` is one of the four\r\n     * \"usable\" immutable JS primitives; I.e.,\r\n     *  One of [String, Boolean, Number, Symbol]\r\n     * @function module:objectOps.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:objectOps.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:objectOps.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:objectOps.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Checks to see if passed in argument is empty.\r\n     * @function module:objectOps.isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null.\r\n     * @function module:objectOps.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n\r\n    /**\r\n     * Returns the constructor/class/type name of a value.\r\n     * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n     * @note Returns 'Undefined' if value is `undefined`\r\n     * @note Returns 'Null' if value is `null`\r\n     * For values that have no concrete constructors and/or casters\r\n     * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n     * @function module:objectOps.typeOf\r\n     * @param value {*}\r\n     * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n     *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n     */\r\n\r\n    /**\r\n     * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n     * - If exists `(value).constructor.of` uses this.\r\n     * - If value is of one String, Boolean, Symbol, or Number types calls it's constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n     * - Else if constructor is a function, thus far, then calls constructor using the `new` keyword (with any passed in args).\r\n     * @function module:objectOps.of\r\n     * @param x {*} - Value to derive returned value's type from.\r\n     * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n     * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n     */\r\n\r\n    /**\r\n     * @function module:objectOps.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n\r\n    /**\r\n     * Gets own enumerable keys of passed in object (same as `Object.keys`).\r\n     * @function module:objectOps.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n","export const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true`.\r\n     * @function module:_functionOps.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = (predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    };\r\n","import {reverse} from '../_jsPlatform/_array';\r\nimport {apply, call} from '../_jsPlatform/_function';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Flips a functions arguments order and returns a new functionOps requiring such (arguments in reverse order).\r\n     * @function module:_functionOps.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flipN = fn => (...args) => apply(fn, reverse(args)),\r\n\r\n    /**\r\n     * Returns a function that receives 3 args in reverse (3, 2, 1 etc.).\r\n     * @function module:_functionOps.flip3\r\n     * @param fn {Function} - Function<a, b, c>\r\n     * @returns {Function} - Function<c, b, a>\r\n     */\r\n    flip3 = fn => (a, b, c) => call(fn, c, b, a),\r\n\r\n    /**\r\n     * Returns a function that receives 4 args in reverse (4, 3, 2, 1 etc.).\r\n     * @function module:_functionOps.flip4\r\n     * @param fn {Function} - Function<a, b, c, d>\r\n     * @returns {Function} - Function<d, c, b, a>\r\n     */\r\n    flip4 = fn => (a, b, c, d) => call(fn, d, c, b, a),\r\n\r\n    /**\r\n     * Returns a function that receives 5 args in reverse (5, 4, 3, 2, 1 etc.).\r\n     * @function module:_functionOps.flip5\r\n     * @param fn {Function} - Function<a, b, c, d, e>\r\n     * @returns {Function} - Function<e, d, c, b, a>\r\n     */\r\n    flip5 = fn => (a, b, c, d, e) => call(fn, e, d, c, b, a),\r\n\r\n    /**\r\n     * Flips a _functionOps's first and second arguments and and returns a new _functionOps requiring said arguments in reverse.\r\n     * @function module:_functionOps.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => (b, a) => call(fn, a, b);\r\n","/**\r\n * @memberOf _functionOps\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @description Curry implementation with place holder concept (`__`).\r\n * @todo Make code here more minimal (reuse small parts here).\r\n */\r\n\r\nimport {apply, concat, map, filter, length} from '../_jsPlatform/_jsPlatform';\r\nimport {fnOrError} from '../_objectOps/_utils';\r\n\r\n/**\r\n * PlaceHolder (__) constructor.\r\n * @constructor PlaceHolder\r\n * @private\r\n */\r\nconst PlaceHolder = function PlaceHolder() {},\r\n\r\n    notFnErrPrefix = '`fn` in `curry_(fn, ...args)`',\r\n\r\n    /**\r\n     * Placeholder instance.\r\n     * @type {PlaceHolder}\r\n     * @private\r\n     */\r\n    placeHolderInstance = new PlaceHolder();\r\n\r\n/**\r\n * Checks to see if value is a `PlaceHolder`.\r\n * @param instance {*}\r\n * @returns {boolean}\r\n * @private\r\n */\r\nfunction isPlaceHolder (instance) {\r\n    return instance instanceof PlaceHolder;\r\n}\r\n\r\n/**\r\n * Replaces `placeholder` values in `_listOps`.\r\n * @function replacePlaceHolder\r\n * @private\r\n * @param array {Array} - Array to replace placeholders in.\r\n * @param args {Array} - Args from to choose from to replace placeholders.\r\n * @returns {Array|*} - Returns passed in `_listOps` with placeholders replaced by values in `args`.\r\n */\r\nfunction replacePlaceHolders (array, args) {\r\n    let out = map(element => {\r\n            if (!isPlaceHolder(element)) { return element; }\r\n            else if (length(args)) { return args.shift(); }\r\n            return element;\r\n        }, array);\r\n    return length(args) ? concat(out, args) : out;\r\n}\r\n\r\n/**\r\n * Curries passed in functionOps up to given arguments length (can enforce arity via placeholder values (`__`)).\r\n * @function module:_functionOps.curry_\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\r\nexport function curry_ (fn, ...argsToCurry) {\r\n    return curryN_(fnOrError(notFnErrPrefix, fn).length, fn, ...argsToCurry);\r\n}\r\n\r\n/**\r\n * Curries a _functionOps up to given arity also enforces arity via placeholder values (`__`).\r\n * @function module:_functionOps.curryN_\r\n * @param executeArity {Number}\r\n * @param fn {Function}\r\n * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\r\n * @returns {Function} - Passed in _functionOps wrapped in a _functionOps for currying.\r\n */\r\nexport function curryN_ (executeArity, fn, ...curriedArgs) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(curriedArgs, args),\r\n            placeHolders = filter(isPlaceHolder, concatedArgs),\r\n            canBeCalled = (length(concatedArgs) - length(placeHolders) >= executeArity) || !executeArity;\r\n        return !canBeCalled ?\r\n            apply(curryN_, concat([executeArity, fnOrError(notFnErrPrefix, fn)], concatedArgs)) :\r\n            apply(fnOrError(notFnErrPrefix, fn), concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Place holder object (frozen) used by curry.\r\n * @memberOf _functionOps\r\n * @type {PlaceHolder}\r\n */\r\nexport let __ = Object.freeze ? Object.freeze(placeHolderInstance) : placeHolderInstance,\r\n\r\n    /**\r\n     * Curries a _functionOps up to an arity of 2 (takes into account placeholders `__` (arity enforcers)) (won't call _functionOps until 2 or more args).\r\n     * @function module:_functionOps.curry2_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2_ = fn => curryN_(2, fn),\r\n\r\n    /**\r\n     * Curries a _functionOps up to an arity of 3 (takes into account placeholders `__` (arity enforcers)) (won't call _functionOps until 3 or more args).\r\n     * @function module:_functionOps.curry3_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3_ = fn => curryN_(3, fn),\r\n\r\n    /**\r\n     * Curries a _functionOps up to an arity of 4 (takes into account placeholders `__` (arity enforcers))  (won't call _functionOps until 4 or more args).\r\n     * @function module:_functionOps.curry4_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4_ = fn => curryN_(4, fn),\r\n\r\n    /**\r\n     * Curries a _functionOps up to an arity of 5  (takes into account placeholders `__` (arity enforcers))  (won't call _functionOps until 5 or more args).\r\n     * @function module:_functionOps.curry5_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5_ = fn => curryN_(5, fn)\r\n\r\n;\r\n","/**\r\n * @memberOf _functionOps\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:_functionOps.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","import {reduceRight} from '../_jsPlatform/_array';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the functionOps on the left of itself.\r\n * @function module:_functionOps.compose\r\n * @type {Function}\r\n * @param args {...{Function}}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) =>\r\n        arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","/**\r\n * Function operations: `\r\n * @module functionOps\r\n */\r\n\r\nimport {curry, curry2, curry3} from './uncurried/_functionOps/_curry';\r\n\r\nimport {\r\n    apply as _apply,\r\n    call as _call, reverse\r\n} from './uncurried/_jsPlatform/_jsPlatform';\r\n\r\nimport {\r\n    until as _until\r\n} from './uncurried/_functionOps/_until';\r\n\r\nimport {\r\n    flip as _flip,\r\n    flipN as _flipN,\r\n    flip3 as _flip3,\r\n    flip4 as _flip4,\r\n    flip5 as _flip5\r\n} from './uncurried/_functionOps/_flip';\r\n\r\nexport * from './uncurried/_functionOps/_curry';\r\nexport * from './uncurried/_functionOps/__curry';\r\nexport * from './uncurried/_functionOps/_negate';\r\nexport * from './uncurried/_functionOps/_id';\r\nexport * from './uncurried/_functionOps/_compose';\r\n\r\nexport {_apply, _call, _until, _flip, _flip3, _flip4, _flip5,  _flipN};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:functionOps.apply\r\n     * @param fn {Function}\r\n     * @param [args] {Array<*>}\r\n     * @returns {*}\r\n     * @curried - Triggered at 2 or more args.\r\n     */\r\n    apply = curry(_apply),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:functionOps.call\r\n     * @param fn {Function}\r\n     * @param [args] {...*}\r\n     * @returns {*}\r\n     * @curried\r\n     */\r\n    call = curry2(_call),\r\n\r\n    /**\r\n     * Run `operation` `until` predicate returns `true`.\r\n     * @function module:functionOps.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     * @curried\r\n     */\r\n    until = curry(_until),\r\n\r\n    /**\r\n     * Flips a functions arguments order and returns a new function requiring such (arguments in reverse order).\r\n     * @function module:fnOperators.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     * @curried - Triggered at 3 or more (args).\r\n     */\r\n    flipN = fn => curry3((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\r\n     * @function module:fnOperators.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     * @curried\r\n     */\r\n    flip = fn => curry(_flip(fn)),\r\n\r\n    /**\r\n     * Returns a function that receives 3 args in reverse (3, 2, 1 etc.).\r\n     * @function module:functionOps.flip3\r\n     * @param fn {Function} - Function<a, b, c>\r\n     * @returns {Function} - Function<c, b, a>\r\n     * @curried\r\n     */\r\n    flip3 = fn => curry(_flip3(fn)),\r\n\r\n    /**\r\n     * Returns a function that receives 4 args in reverse (4, 3, 2, 1 etc.).\r\n     * @function module:functionOps.flip4\r\n     * @param fn {Function} - Function<a, b, c, d>\r\n     * @returns {Function} - Function<d, c, b, a>\r\n     * @curried\r\n     */\r\n    flip4 = fn => curry(_flip4(fn)),\r\n\r\n    /**\r\n     * Returns a function that receives 5 args in reverse (5, 4, 3, 2, 1 etc.).\r\n     * @function module:functionOps.flip5\r\n     * @param fn {Function} - Function<a, b, c, d, e>\r\n     * @returns {Function} - Function<e, d, c, b, a>\r\n     * @curried\r\n     */\r\n    flip5 = fn => curry(_flip5(fn));\r\n\r\n    /**\r\n     * Curries a function based on it's defined arity (argument's arrayOps expected length).\r\n     * @function module:functionOps.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     * @curried\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to a given arity.\r\n     * @function module:functionOps.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param curriedArgs {...*}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (won't call function until 2 or more args).\r\n     * @function module:functionOps.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (won't call function until 3 or more args).\r\n     * @function module:functionOps.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (won't call function until 4 or more args).\r\n     * @function module:functionOps.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5 (won't call function until 5 or more args).\r\n     * @function module:functionOps.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries passed in function up to given arguments length (can enforce arity via placeholder values (`__`)).\r\n     * @function module:functionOps.curry_\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to given arity also enforces arity via placeholder values (`__`).\r\n     * @function module:functionOps.curryN_\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\r\n     * @returns {Function} - Passed in function wrapped in a function for currying.\r\n     */\r\n\r\n    /**\r\n     * Place holder object (frozen) used by curry.\r\n     * @memberOf functionOps\r\n     * @type {PlaceHolder}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (takes into account placeholders `__` (arity enforcers))\r\n     * (won't call function until 2 or more args (not counting placeholder (`__`) value).\r\n     * @function module:functionOps.curry2_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (takes into account placeholders `__` (arity enforcers))\r\n     * (won't call function until 3 or more args (not counting placeholder (`__`) value).\r\n     * @function module:functionOps.curry3_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (takes into account placeholders `__` (arity enforcers))\r\n     * (won't call function until 4 or more args (not counting placeholder (`__`) value).\r\n     * @function module:functionOps.curry4_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5  (takes into account placeholders `__` (arity enforcers))\r\n     * (won't call function until 5 or more args (not counting placeholder (`__`) value).\r\n     * @function module:functionOps.curry5_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Takes a function that takes two parameters and returns a negated version of given\r\n     * function.\r\n     * @function module:functionOps.negateF\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Takes a function that takes three parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:functionOps.negateF3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Takes a function that takes four parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:functionOps.negateF4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Takes a function that takes four parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:functionOps.negateF5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Negates a javascript-'generic' predicate; `Function<element, index, list>`.\r\n     * @function module:functionOps.negateP\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Returns a new function which is the dual of `fn` (or the negated version of `fn`).\r\n     * @function module:functionOps.negateFMany\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n\r\n    /**\r\n     * Returns passed in parameter.\r\n     * @haskellType `id :: a -> a`\r\n     * @function module:functionOps.id\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n\r\n    /**\r\n     * Composes all functions passed in from right to left passing each functions return value to\r\n     * the function on the left of itself.\r\n     * @function module:functionOps.compose\r\n     * @param args {...Function}\r\n     * @returns {Function}\r\n     */\r\n","/**\r\n * @module _functionOps\r\n * @private\r\n */\r\nexport {apply, call} from '../_jsPlatform/_function';\r\nexport * from './_compose';\r\nexport * from './_curry';\r\nexport * from './__curry';\r\nexport * from './_flip';\r\nexport * from './_id';\r\nexport * from './_negate';\r\nexport * from './_until';\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n * @module utils\r\n * @private\r\n */\r\n\r\nimport {curry, curry2} from './uncurried/_functionOps/_curry';\r\nexport * from './uncurried/_objectOps/_utils';\r\nexport const\r\n\r\n    fPureTakesOne_ = name => curry((arg, f) => f[name](arg)),\r\n\r\n    fPureTakes2_ = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    fPureTakesOneOrMore_ = name => curry2((f, ...args) => f[name](...args))\r\n;\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Curried functional versions of common array methods (`filter`, `map`, etc.).\r\n * @module jsPlatform_array\r\n * @private\r\n */\r\n\r\nimport {fPureTakesOne_, fPureTakes2_, fPureTakesOneOrMore_} from '../utils';\r\n\r\n/**\r\n * Reverses a list (shimmed if not exists).\r\n * @function module:jsPlatform_array.reverse\r\n * @return {Array}\r\n */\r\nexport {reverse} from '../uncurried/_jsPlatform/_array';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Maps a function to functor (lists etc.).\r\n     * @function module:jsPlatform_array.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne_('map'),\r\n\r\n    /**\r\n     * Filters a functor (lists etc.) with passed in function.\r\n     * @function module:jsPlatform_array.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne_('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (lists etc.) with passed in function.\r\n     * @function module:jsPlatform_array.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2_('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (lists etc.) from the right with passed in function.\r\n     * @function module:jsPlatform_array.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2_('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @function module:jsPlatform_array.forEach\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne_('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @function module:jsPlatform_array.some\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne_('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @function module:jsPlatform_array.every\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne_('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:jsPlatform_array.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne_('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @function module:jsPlatform_array.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore_('push');\r\n","/**\r\n * List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n * on both strings and arrays.\r\n * @module jsPlatform_list\r\n * @private\r\n */\r\n\r\nimport {curry} from '../uncurried/_functionOps/_curry';\r\n\r\nimport {\r\n    concat as concat_,\r\n    slice as slice_,\r\n    includes as includes_,\r\n    indexOf as indexOf_,\r\n    lastIndexOf as lastIndexOf_ } from '../uncurried/_jsPlatform/_list';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:jsPlatform_array.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = curry(concat_),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:jsPlatform_array.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = curry(slice_),\r\n\r\n    includes = curry(includes_),\r\n\r\n    indexOf = curry(indexOf_),\r\n\r\n    lastIndexOf = curry(lastIndexOf_)\r\n\r\n;\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n * @module jsPlatform_string\r\n * @private\r\n */\r\n\r\nimport {curry} from '../uncurried/_functionOps/_curry';\r\n\r\nimport {split as _split} from '../uncurried/_jsPlatform/_string';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @curried\r\n * @function module:jsPlatform_string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = curry(_split);\r\n","/**\n * @module jsPlatform\n * @private\n */\n\nexport * from './jsPlatform/array';\nexport * from './jsPlatform/list';\nexport * from './jsPlatform/string';\n","/**\r\n * List operators.\r\n * @module listOps\r\n * @todo decide whether to throw errors where functions cannot function without a specific type or to\r\n *  return undefined (and also determine which cases are ok for just returning undefined).\r\n */\r\nimport {curry, curry2, curry3, curry4, curry5, curryN} from './uncurried/_functionOps/_functionOps';\r\n\r\nimport {\r\n    _append, _appendMany, _head, _last, _tail, _init, _uncons, _unconsr,\r\n    _map, _concat, _concatMap, _reverse, _intersperse, _intercalate, _transpose,\r\n    _subsequences, _subsequences1, _swapped, _permutations, _foldl, _foldl1,\r\n    _foldr, _foldr1, _unfoldr, _mapAccumL, _mapAccumR, _iterate, _repeat,\r\n    _replicate, _cycle, _findIndex, _findIndices, _elemIndex, _elemIndices,\r\n    _take, _drop, _splitAt, _takeWhile, _dropWhile, _dropWhileEnd, _span,\r\n    _breakOnList, _at, _find, _filter, _partition, _elem, _notElem, _lookup,\r\n    _isPrefixOf, _isSuffixOf, _isInfixOf, _isSubsequenceOf, _group, _groupBy,\r\n    _inits, _tails, _stripPrefix, _zip, _zipN, _zip3, _zip4, _zip5, _zipWith,\r\n    _zipWithN, _zipWith3, _zipWith4, _zipWith5, _unzip, _unzipN, _any, _all,\r\n    _and, _or, _not, _sum, _product, _maximum, _minimum, _scanl, _scanl1, _scanr, _scanr1,\r\n    _nub, _remove, _sort, _sortOn, _sortBy, _insert, _insertBy, _nubBy, _removeBy,\r\n    _removeFirstsBy, _unionBy, _union, _intersect, _intersectBy, _difference,\r\n    _complement\r\n} from './uncurried/_listOps/_listOps';\r\n\r\n// Export single arity methods\r\nexport {\r\n    _and as and, _or as or, _zipN as zipN, _unzip as unzip, _unzipN as unzipN,\r\n    _concat as concat, _reverse as reverse, _transpose as transpose,\r\n    _subsequences as subsequences, _permutations as permutations,\r\n    _group as group, _tails as tails, _sum as sum, _product as product,\r\n    _maximum as maximum, _minimum as minimum, _sort as sort, _nub as nub,\r\n    _head as head, _last as last, _tail as tail, _init as init, _inits as inits,\r\n    _uncons as uncons, _unconsr as unconsr\r\n};\r\n\r\nexport {slice, includes, indexOf, lastIndexOf, split, push} from './jsPlatform';\r\n\r\nexport * from './uncurried/_listOps/_listOps';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Append two lists, i.e.,\r\n     * ```\r\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\r\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\r\n     * ```\r\n     * If the first list is not finite, the result is the first list.\r\n     * @haskellType `append :: List a => a -> a -> a`\r\n     * @function module:listOps.append\r\n     * @param xs1 {Array|String|*} - list or list like.\r\n     * @param xs2 {Array|String|*} - list or list like.\r\n     * @returns {Array|String|*} - Same type as list like passed in.\r\n     */\r\n    append = curry(_append),\r\n\r\n    /**\r\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\r\n     * @haskellType `appendMany :: List a => a -> [a] -> a\r\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\r\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\r\n     * @function module:listOps.appendMany\r\n     * @param x {Array|String|*}\r\n     * @param args ...{Array|String|*} - Lists or lists likes.\r\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\r\n     */\r\n    appendMany = curry2(_appendMany),\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:listOps.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    concatMap = curry2(_concatMap),\r\n\r\n    /**\r\n     * @function module:listOps.map\r\n     * @param fn {Function} - Function to map on functor item(s).\r\n     * @param xs {Array|String|*} - Functor.\r\n     * @returns {Array|String|*} - Functor type that is passed in.\r\n     */\r\n    map = curry(_map),\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\r\n     * @function module:listOps.intersperse\r\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\r\n     *  it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array|String|*} - List.\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersperse = curry(_intersperse),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:listOps.intercalate\r\n     * @param xs {Array|String|*}\r\n     * @param xss {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intercalate = curry(_intercalate),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:listOps.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array|String|*}\r\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\r\n     */\r\n    foldl = curry(_foldl),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from right to left with passed in function.\r\n     * @function module:listOps.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\r\n     */\r\n    foldr = curry(_foldr),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:listOps.foldl1\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*}\r\n     */\r\n    foldl1 = curry(_foldl1),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from right to left with passed in function.\r\n     * @function module:listOps.foldr1\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {*}\r\n     */\r\n    foldr1 = curry(_foldr1),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOps.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry(_mapAccumL),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:listOps.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry(_mapAccumR),\r\n\r\n    /**\r\n     * Iterate on value (`x`) with `op` up to `limit`.\r\n     * @function module:listOps.iterate\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry(_iterate),\r\n\r\n    repeat = curry(_repeat),\r\n\r\n    replicate = curry(_replicate),\r\n\r\n    cycle = curry(_cycle),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:listOps.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry(_unfoldr),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:listOps.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = curry(_findIndex),\r\n\r\n    /**\r\n     * @function module:listOps.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = curry(_findIndices),\r\n\r\n    /**\r\n     * @function module:listOps.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry(_elemIndex),\r\n\r\n    /**\r\n     * @function module:listOps.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry(_elemIndices),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:listOps.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = curry(_take),\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:listOps.take\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = curry(_drop),\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:listOps.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String|*} - functor (list or string) to split.\r\n     * @returns {Array} - Array of whatever type `x` was when passed in\r\n     */\r\n    splitAt = curry(_splitAt),\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:listOps.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry(_takeWhile),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:listOps.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry(_dropWhile),\r\n\r\n    /**\r\n     * @function module:listOps.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry(_dropWhileEnd),\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @function module:listOps.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array|String|*} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    span = curry(_span),\r\n\r\n    breakOnList = curry(_breakOnList),\r\n\r\n    /**\r\n     * @function module:listOps.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    at = curry(_at),\r\n\r\n    /**\r\n     * @function module:listOps.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    find = curry(_find),\r\n\r\n    filter = curry(_filter),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\r\n     * @function module:listOps.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array|String|*}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry(_partition),\r\n\r\n    elem = curry(_elem),\r\n\r\n    notElem = curry2(_notElem),\r\n\r\n    lookup = at,\r\n\r\n    isPrefixOf = curry(_isPrefixOf),\r\n\r\n    isSuffixOf = curry(_isSuffixOf),\r\n\r\n    isInfixOf = curry(_isInfixOf),\r\n\r\n    isSubsequenceOf = curry(_isSubsequenceOf),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:listOps.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry(_groupBy),\r\n\r\n    stripPrefix = curry(_stripPrefix),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:listOps.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry(_zip),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:listOps.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry(_zipWith),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:listOps.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = curry3(_zipWithN),\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:listOps.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = curry4(zipWithN),\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:listOps.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = curry5(zipWithN),\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:listOps.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @param xs3 {Array|String|*}\r\n     * @param xs4 {Array|String|*}\r\n     * @param xs5 {Array|String|*}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = curryN(6, zipWithN),\r\n\r\n    any = curry(_any),\r\n\r\n    all = curry(_all),\r\n\r\n    scanl = curry(_scanl),\r\n\r\n    scanl1 = curry(_scanl1),\r\n\r\n    scanr = curry(_scanr),\r\n\r\n    scanr1 = curry(_scanr1),\r\n\r\n    remove = curry(_remove),\r\n\r\n    sortOn = curry(_sortOn),\r\n\r\n    sortBy = curry(_sortBy),\r\n\r\n    insert = curry(_insert),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:listOps.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` === // something that is order-able\r\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array|String|*} - List to insert into (note new list is returned)\r\n     * @returns {Array|String|*} - New list.\r\n     */\r\n    insertBy = curry(_insertBy),\r\n\r\n    nubBy = curry(_nubBy),\r\n\r\n    removeBy = curry(_removeBy),\r\n\r\n    removeFirstsBy = curry(_removeFirstsBy),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:listOps.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    unionBy = curry(_unionBy),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:listOps.union\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    union = curry(_union),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:listOps.intersect\r\n     * @param arr1 {Array|String|*}\r\n     * @param arr2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    intersect = curry(_intersect),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:listOps.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array|String|*}\r\n     * @param list2 {Array|String|*}\r\n     * @return {Array|String|*}\r\n     */\r\n    intersectBy = curry(_intersectBy),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:listOps.difference\r\n     * @param array1 {Array|String|*}\r\n     * @param array2 {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    difference = curry(_difference),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:listOps.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = curry2(_complement)\r\n\r\n;\r\n","/**\r\n * Contains functions for operating strings.\r\n * @author elyde\r\n * @created 7/9/2017.\r\n * @module stringOps\r\n */\r\nimport {intercalate, _map, _splitAt} from './listOps';\r\n\r\nimport {split} from './jsPlatform/string';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:stringOps.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a string on all '\\s' and/or all '\\t' characters.\r\n     * @function module:stringOps.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:stringOps.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:stringOps.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n'),\r\n\r\n    /**\r\n     * Lower cases first character of string.\r\n     * @function module:stringOps.lcaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     */\r\n    lcaseFirst = xs => xs[0].toLowerCase() + xs.substring(1),\r\n\r\n    /**\r\n     * Upper cases first character of string.\r\n     * @function module:stringOps.ucaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     */\r\n    ucaseFirst = xs => xs[0].toUpperCase() + xs.substring(1),\r\n\r\n    /**\r\n     * Class cases a string.\r\n     * @function module:stringOps.camelCase\r\n     * @param xs {String}\r\n     * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Optional.\r\n     * @returns {string}\r\n     */\r\n    camelCase = (xs, pattern) => _map(ucaseFirst, _splitAt(pattern || /[^a-z\\d]/i, xs))\r\n\r\n    ;\r\n","/**\r\n * Created by elyde on 12/6/2016.\r\n * @file fjl.js\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @description Includes operations from haskell's Prelude.\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n * @module fjl\r\n */\r\nexport * from './objectOps';\r\nexport * from './booleanOps';\r\nexport * from './functionOps';\r\nexport * from './listOps';\r\nexport * from './stringOps';\r\nexport * from './utils';\r\nexport * from './uncurried/_listOps/_utils';\r\n"],"names":["_Number","Number","name","_NaN","_Null","_Undefined","typeOf","value","retVal","undefined","constructorName","constructor","isNaN","fPureTakesOne","arg","f","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","args","fnOrError","symbolName","Function","Error","instanceOf","instanceConstructor","instance","hasOwnProperty","length","x","keys","Object","obj","assign","obj0","objs","reduce","topAgg","agg","key","defineReverse","Array","prototype","reverse","reduceRight","item","push","map","filter","forEach","some","every","join","concat","slice","includes","xs","indexOf","lastIndexOf","split","apply","fn","call","notFnErrPrefix","curry","argsToCurry","curryN","executeArity","curriedArgs","concatedArgs","canBeCalled","curry2","curry3","curry4","curry5","prop","_String","String","_Object","_Boolean","Boolean","_Function","_Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","isFunction","isType","type","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isUsableImmutablePrimitive","typeOfX","isset","Type","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","typeOfValue","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","negateF","a","b","negateF3","c","negateF4","d","negateF5","e","negateP","negateFMany","isTruthy","isFalsy","alwaysTrue","alwaysFalse","Symbol","of","_map","ind","limit","out","aggregateStr","aggregateArr","aggregateObj","aggregatorByType","sliceFrom","startInd","arr","sliceTo","toInd","copy","sliceCopy","genericAscOrdering","lengths","lists","lengthsToSmallest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceRightUntil","operation","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","_append","listAppend","_appendMany","_head","_last","_tail","_init","_uncons","_unconsr","_concat","_concatMap","foldableOfA","_reverse","_foldr","_intersperse","between","lastInd","_foldl","_intercalate","xss","_transpose","numLists","ind2","longestListLen","_maximum","outLists","outList","_filter","_subsequences","listLen","pow","i","entry","j","_subsequences1","_swapped","ind1","tmp","_permutations","_repeat","_foldl1","parts","_foldr1","_mapAccumL","zero","mapped","tuple","_mapAccumR","_iterate","lastX","_replicate","_cycle","_unfoldr","resultTuple","_findIndex","_findIndices","_elemIndex","foundInd","_elemIndices","_take","_drop","count","_splitAt","_takeWhile","_dropWhile","splitPoint","list2","_dropWhileEnd","_span","_breakOnList","_at","_find","_partition","_elem","_notElem","_lookup","_isPrefixOf","xs1","xs2","limit1","limit2","_isSuffixOf","_isInfixOf","foundLen","_isSubsequenceOf","lenXs1","_group","_groupBy","equalityOp","prevItem","predOp","_inits","_tails","_stripPrefix","prefix","_zip","arr1","arr2","a1","a2","_zipN","trimmedLists","lenOfTrimmed","_zip3","arr3","_zip4","arr4","_zip5","arr5","_zipWith","_zipWithN","_zipWith3","xs3","_zipWith4","xs4","_zipWith5","xs5","_unzip","_unzipN","lenItem0","_any","p","_all","_and","_or","_not","_sum","_product","_sortBy","_minimum","_scanl","_scanl1","_scanr","_scanr1","_nub","_nubBy","_remove","_removeBy","_sort","_sortOn","valueFn","decorated","a0","b0","orderingFn","sort","_insert","foundIndex","_insertBy","currItem","anyOp","storedItem","_removeFirstsBy","_unionBy","alreadyAdded","_union","_intersect","_intersectBy","list1","_difference","array1","array2","_complement","arr0","arrays","objUnion","obj1","obj2","objIntersect","foldl","objDifference","objComplement","_prop","_instanceOf","_hasOwnProperty","_assign","_assignDeep","_objUnion","_objIntersect","_objDifference","_objComplement","_isType","until","predicate","typeInstance","flipN","flip3","flip4","flip5","flip","PlaceHolder","placeHolderInstance","isPlaceHolder","replacePlaceHolders","array","element","shift","curry_","curryN_","placeHolders","__","freeze","curry2_","curry3_","curry4_","curry5_","id","compose","arg0","_apply","_call","_until","_flip","_flip3","_flip4","_flip5","fPureTakesOne_","fPureTakes2_","fPureTakesOneOrMore_","concat_","slice_","includes_","indexOf_","lastIndexOf_","_split","append","appendMany","concatMap","intersperse","intercalate","foldr","foldl1","foldr1","mapAccumL","mapAccumR","iterate","repeat","replicate","cycle","unfoldr","findIndex","findIndices","elemIndex","elemIndices","take","drop","splitAt","takeWhile","dropWhile","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","lookup","isPrefixOf","isSuffixOf","isInfixOf","isSubsequenceOf","groupBy","stripPrefix","zip","zipWith","zipWithN","zipWith3","zipWith4","zipWith5","any","all","scanl","scanl1","scanr","scanr1","remove","sortOn","sortBy","insert","insertBy","nubBy","removeBy","removeFirstsBy","unionBy","union","intersect","intersectBy","difference","complement","lines","words","unwords","unlines","lcaseFirst","toLowerCase","substring","ucaseFirst","toUpperCase","camelCase","pattern"],"mappings":"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"}