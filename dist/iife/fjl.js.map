{"version":3,"file":null,"sources":["../../src/functionOps/curry.js","../../src/objectOps/typeOf.js","../../src/objectOps/instanceOf.js","../../src/objectOps/is.js","../../src/utils/utils.js","../../src/objectOps/prop.js","../../src/objectOps/objectPrelude.js","../../src/functionOps/apply.js","../../src/objectOps/of.js","../../src/listOps/listOpsPrelude.js","../../src/objectOps/setTheoryOps.js","../../src/booleanOps/is.js","../../src/booleanOps/booleanOps.js","../../src/functionOps/call.js","../../src/functionOps/compose.js","../../src/functionOps/negateP.js","../../src/functionOps/id.js","../../src/functionOps/flip.js","../../src/functionOps/until.js","../../src/functionOps/functionOps.js","../../src/stringOps/stringOps.js","../../src/numberOps/numberOps.js","../../src/listOps/listOps.js","../../src/compoundedOps/compoundedOps.js","../../generated-for-src/version.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @file fjl-curry/src/curry.js\r\n * @module curry {{curry: Function, curryN: Function, curry2: Function, curry3: Function, curry4: Function, curry5: Function, curry_: Function, curryN_: Function, curry2_: Function, curry3_: Function, curry4_: Function, curry5_: Function}}\r\n * @description Different curry implementations for modern javascript currying.\r\n * @todo Make code here more minimal (reuse small parts here).\r\n * @todo separate curry_ (and it's variants) into a separate file/module.\r\n */\r\n\r\n/**\r\n * PlaceHolder (__) constructor.\r\n * @constructor PlaceHolder\r\n * @private\r\n */\r\nconst PlaceHolder = function PlaceHolder() {},\r\n\r\n    /**\r\n     * Placeholder instance.\r\n     * @type {PlaceHolder}\r\n     */\r\n    placeHolderInstance = new PlaceHolder();\r\n\r\n/**\r\n * Curries a functionOps based on it's defined arity (argument's arrayOps expected length).\r\n * @functionOps curry\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\r\nexport function curry (fn, ...argsToCurry) {\r\n    return (...args) => {\r\n        const concatedArgs = argsToCurry.concat(args);\r\n        return concatedArgs.length < fn.length ?\r\n            curry.apply(null, [fn].concat(concatedArgs)) :\r\n            fn.apply(null, concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Checks to see if value is a `PlaceHolder`.\r\n * @functionOps isPlaceHolder\r\n * @param instance {*}\r\n * @returns {boolean}\r\n */\r\nfunction isPlaceHolder (instance) {\r\n    return instance instanceof PlaceHolder;\r\n}\r\n\r\n/**\r\n * Replaces `placeholder` values in `listOps`.\r\n * @functionOps replacePlaceHolder\r\n * @param array {Array} - Array to replace placeholders in.\r\n * @param args {Array} - Args from to choose from to replace placeholders.\r\n * @returns {Array|*} - Returns passed in `listOps` with placeholders replaced by values in `args`.\r\n */\r\nfunction replacePlaceHolders (array, args) {\r\n    let out = array.map(element => {\r\n        if (!isPlaceHolder(element)) {\r\n            return element;\r\n        }\r\n        else if (args.length > 0) {\r\n            return args.shift();\r\n        }\r\n        return element;\r\n    });\r\n    return args.length > 0 ? out.concat(args) : out;\r\n}\r\n\r\n/**\r\n * Curries passed in functionOps up to given arguments length (can enforce arity via placeholder values (`__`)).\r\n * @functionOps curry_\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\r\nexport function curry_ (fn, ...argsToCurry) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(argsToCurry, args),\r\n            placeHolders = concatedArgs.filter(isPlaceHolder),\r\n            canBeCalled = placeHolders.length === 0 &&\r\n                concatedArgs.length >= fn.length;\r\n        return canBeCalled ? fn.apply(null, concatedArgs) :\r\n            curry_.apply(null, [fn].concat(concatedArgs));\r\n    };\r\n}\r\n\r\n/**\r\n * Curries a functionOps up to given arity also enforces arity via placeholder values (`__`).\r\n * @functionOps curryN_\r\n * @param fn {Function}\r\n * @param executeArity {Number}\r\n * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\r\n * @returns {Function} - Passed in functionOps wrapped in a functionOps for currying.\r\n */\r\nexport function curryN_ (fn, executeArity, ...curriedArgs) {\r\n    return (...args) => {\r\n        let concatedArgs = replacePlaceHolders(curriedArgs, args),\r\n            placeHolders = concatedArgs.filter(isPlaceHolder),\r\n            canBeCalled = (concatedArgs.length - placeHolders.length >= executeArity) || !executeArity;\r\n        return !canBeCalled ? curryN_.apply(null, [fn, executeArity].concat(concatedArgs)) :\r\n            fn.apply(null, concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Curries a functionOps up to a given arity.\r\n * @functionOps curryN\r\n * @param fn {Function}\r\n * @param executeArity {Number}\r\n * @param curriedArgs {...*}\r\n * @returns {Function}\r\n */\r\nexport function curryN (fn, executeArity, ...curriedArgs) {\r\n    return (...args) => {\r\n        let concatedArgs = curriedArgs.concat(args),\r\n            canBeCalled = (concatedArgs.length >= executeArity) || !executeArity;\r\n        return !canBeCalled ? curryN.apply(null, [fn, executeArity].concat(concatedArgs)) :\r\n            fn.apply(null, concatedArgs);\r\n    };\r\n}\r\n\r\n/**\r\n * Place holder object (frozen) used by curry.\r\n * @type {PlaceHolder}\r\n */\r\nexport let __ = Object.freeze ? Object.freeze(placeHolderInstance) : placeHolderInstance,\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 2 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 2 or more args).\r\n     * @functionOps curry2_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2_ = fn => curryN_(fn, 2),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 3 (takes into account placeholders `__` (arity enforcers)) (won't call functionOps until 3 or more args).\r\n     * @functionOps curry3_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3_ = fn => curryN_(fn, 3),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 4 (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 4 or more args).\r\n     * @functionOps curry4_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4_ = fn => curryN_(fn, 4),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 5  (takes into account placeholders `__` (arity enforcers))  (won't call functionOps until 5 or more args).\r\n     * @functionOps curry5_\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5_ = fn => curryN_(fn, 5),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 2 (won't call functionOps until 2 or more args).\r\n     * @functionOps curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(fn, 2),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 3 (won't call functionOps until 3 or more args).\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(fn, 3),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 4 (won't call functionOps until 4 or more args).\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(fn, 4),\r\n\r\n    /**\r\n     * Curries a functionOps up to an arity of 5 (won't call functionOps until 5 or more args).\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(fn, 5);\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined',\r\n    _undefined = 'undefined';\r\n\r\n/**\r\n * Returns the class name of an object from it's class stringOps.\r\n * @note Returns 'NaN' if value `isNaN` and value type is 'Number'.\r\n * @functionOps module:fjl.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name property if not null or undefined (in which case a\r\n *  name representing those types is returned ('Null' and or 'Undefined' (es6 compliant))).\r\n */\r\nexport const typeOf = value => {\r\n    let retVal;\r\n    if (typeof value === _undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n};\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n\r\nimport {curry} from '../functionOps/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived objectOps.\r\n     * @instanceConstructor {Function|Class}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = curry((instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor);\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @module is\r\n * @todo remove `isset`, `isEmpty` and `notEmptyAndOfType`\r\n */\r\nimport {curry} from '../functionOps/curry';\r\nimport {typeOf} from './typeOf';\r\nimport {instanceOf} from './instanceOf';\r\nimport {length, keys, hasOwnProperty} from './objectPrelude';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether a value is a functionOps or not.\r\n     * @functionOps module:is.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = instanceOf(Function),\r\n\r\n    /**\r\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\r\n     * be a named constructor/functionOps-instance;  E.g.,\r\n     * ```\r\n     *  functionOps SomeName () {} // or\r\n     *  var SomeName = functionOps SomeName () {} // or\r\n     *  class SomeName {}\r\n     * ```\r\n     * @functionOps module:fjl.isType\r\n     * @param Type {Function|String} - Constructor or constructor name\r\n     * @param value {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry((type, obj) => typeOf(obj) === (isFunction(type) ? type.name : type)),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @functionOps module:is.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test(x.toString().substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a booleanOps depicting whether a value is callable or not.\r\n     * @functionOps module:is.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an arrayOps.\r\n     * @functionOps module:is.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    isArray = isType(Array),\r\n\r\n    /**\r\n     * Checks whether value is an objectOps or not.\r\n     * @functionOps module:is.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = isType(_Object),\r\n\r\n    /**\r\n     * Checks if value is a booleanOps.\r\n     * @functionOps module:is.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = isType(_Boolean),\r\n\r\n    /**\r\n     * Checks if value is a valid numberOps (also checks if isNaN so that you don't have to).\r\n     * @functionOps module:is.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = isType(_Number),\r\n\r\n    /**\r\n     * Checks whether value is a stringOps or not.\r\n     * @functionOps module:is.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = isType(_String),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @functionOps module:is.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = isType(_Map),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @functionOps module:is.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = isType(_Set),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @functionOps module:is.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap = isType(_WeakMap),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @functionOps module:is.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = isType(_WeakSet),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @functionOps module:is.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = isType(_Undefined),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @functionOps module:is.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = isType(_Null),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @functionOps module:is.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = isType(_Symbol),\r\n\r\n    /**\r\n     * @tentative\r\n     */\r\n    isPromise = isType('Promise'),\r\n\r\n    /**\r\n     * Checks if given `x` is one of the four\r\n     * \"usable\" immutable JS primitives; I.e.,\r\n     *  One of [String, Boolean, Number, Symbol]\r\n     * @function module:is.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return [_String, _Number, _Boolean, _Symbol]\r\n            .some(Type => Type === typeOfX)\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => length(x) === 0,\r\n\r\n    /**\r\n     * Checks if objectOps has own properties/enumerable-props or not.\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in argument is empty.\r\n     * @functionOps module:is.empty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        let typeOfValue = typeOf(value),\r\n            retVal;\r\n\r\n        if (!value) { // '', 0, `null`, `undefined` or `false` then is empty\r\n            retVal = true;\r\n        }\r\n        else if (typeOfValue === _Array || typeOfValue === _Function) {\r\n            retVal = isEmptyList(value);\r\n        }\r\n        else if (typeOfValue === _Number && value !== 0) {\r\n            retVal = false;\r\n        }\r\n        else if (typeOfValue === _Object) {\r\n            retVal = isEmptyObject(value);\r\n        }\r\n        else if (hasOwnProperty('size', value)) {\r\n            retVal = isEmptyCollection(value);\r\n        }\r\n        else {\r\n            retVal = !value;\r\n        }\r\n        return retVal;\r\n    },\r\n\r\n    /**\r\n     * Returns true if an element is not empty and is of type.\r\n     * @functionOps module:is.notEmptyAndOfType\r\n     * @param type {String|Function} - Type to check against (stringOps name or actual constructor).\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    notEmptyAndOfType = curry((type, value) => !isEmpty(value) && isType(type, value)),\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null.\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => !isNull(x) && !isUndefined(x);\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n\r\nimport {curry, curry2} from '../functionOps/curry';\r\n\r\nexport const\r\n\r\n    fPureTakesOne = name => curry((arg, f) => f[name](arg)),\r\n\r\n    fPureTakes2 = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    fPureTakesOneOrMore = name => curry2((f, ...args) => f[name](...args));\r\n","/**\r\n *\r\n */\r\n\r\nimport {curry} from '../functionOps/curry';\r\n\r\nexport const prop = curry((name, obj) => obj[name]);\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\n/**\r\n * Created by elyde on 12/10/2016.\r\n * Set functions for objects.\r\n */\r\n\r\nimport {curry2} from '../functionOps/curry';\r\nimport {isObject} from './is';\r\nimport {fPureTakesOne} from '../utils/utils';\r\nimport {prop} from './prop';\r\n\r\n/**\r\n * @returns {Function}\r\n */\r\nfunction defineAssign () {\r\n    if (Object.assign) {\r\n        return (obj0, ...objs) => Object.assign(obj0, ...objs);\r\n    }\r\n    return (obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n        return keys(obj).reduce((agg, key) => {\r\n            agg[key] = obj[key];\r\n            return agg;\r\n        }, topAgg);\r\n    }, obj0);\r\n}\r\n\r\nexport {instanceOf} from './instanceOf';\r\n\r\nexport const\r\n\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    length = prop('length'),\r\n\r\n    keys = obj => Object.keys(obj),\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @functionOps module:assign.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = curry2(defineAssign()),\r\n\r\n    /**\r\n     * Merges all objects down into one.\r\n     * @functionOps module:assign.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = curry2((obj0, ...objs) =>\r\n        objs.reduce((topAgg, obj) => {\r\n            return keys(obj).reduce((agg, key) => {\r\n                let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                // If property is not writable move to next item in collection\r\n                if (hasOwnProperty(key, agg) && propDescription &&\r\n                    !(propDescription.get && propDescription.set) &&\r\n                    !propDescription.writable) {\r\n                    return agg;\r\n                }\r\n                if (isObject(agg[key]) && isObject(obj[key])) {\r\n                    assignDeep(agg[key], obj[key]);\r\n                }\r\n                else {\r\n                    agg[key] = obj[key];\r\n                }\r\n                return agg;\r\n            }, topAgg);\r\n        }, obj0));\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\nimport {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` functionOps (takes no context).\r\n     * @functionOps module:fnOperators.apply\r\n     * @param fn {Function}\r\n     * @param args {*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry((fn, args) => fn.apply(null, args));\r\n","import {isFunction, isUsableImmutablePrimitive} from './is';\r\nimport {hasOwnProperty} from './objectPrelude';\r\nimport {apply} from '../functionOps/apply';\r\nimport {typeOf} from './typeOf';\r\n\r\nexport const of = (x, ...args) => {\r\n    const constructor = x.constructor,\r\n        typeOfX = typeOf(x);\r\n    if (hasOwnProperty('of', constructor)) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(typeOfX)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * All functions here are functional versions of methods of types;  E.g., map, filter etc.\r\n * @todo add `reverse` to './compounded'\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils/utils';\r\n\r\n/**\r\n * Array.prototype.reverse generator (generates a functionOps that calls the prototype version or a\r\n * shimmed version if it doesn't exist).\r\n * @returns {Function}\r\n */\r\nfunction defineReverse () {\r\n    return Array.prototype.reverse ? x => x.reverse() :\r\n        x => x.reduceRight((agg, item) => {\r\n            agg.push(item);\r\n            return agg;\r\n        }, []);\r\n}\r\n\r\nexport const\r\n\r\n    /**\r\n     * Maps a functionOps to functor (listOps etc.).\r\n     * @functionOps module:arrayOperators.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (listOps etc.) with passed in functionOps.\r\n     * @functionOps module:arrayOperators.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (listOps etc.) with passed in functionOps.\r\n     * @functionOps module:arrayOperators.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (listOps etc.) from the right with passed in functionOps.\r\n     * @functionOps module:arrayOperators.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of objectOps you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in objectOps doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in objectOps doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in objectOps doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @functionOps module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an listOps (shimmed if not exists).\r\n     * @functionOps module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","import {curry, curry2} from '../functionOps/curry';\r\nimport {assignDeep, hasOwnProperty, keys} from './objectPrelude';\r\nimport {reduce} from '../listOps/listOpsPrelude';\r\n\r\nexport const\r\n\r\n    objUnion = curry((obj1, obj2) => assignDeep(obj1, obj2)),\r\n\r\n    objIntersect = curry((obj1, obj2) => reduce((agg, key) => {\r\n        if (hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objDifference = curry((obj1, obj2) => reduce((agg, key) => {\r\n        if (!hasOwnProperty(key, obj2)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objComplement = curry2((obj0, ...objs) => reduce((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs));\r\n","\r\nexport const\r\n\r\n    isTruthy = value => !!value,\r\n\r\n    isFalsy = value => !value;\r\n","/**\r\n * Created by elyde on 7/15/2017.\r\n * @module booleanOps\r\n */\r\n\r\nimport {curry2} from '../functionOps/curry';\r\n\r\nexport {isTruthy, isFalsy} from './is';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether both values are truthy or not.\r\n     * @function module:booleanOps.and\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {Boolean}\r\n     */\r\n    and = curry2((a, b) => a && b),\r\n\r\n    /**\r\n     * Returns whether one of the two passed in values\r\n     *  are truthy or not.\r\n     * @function module:booleanOps.or\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {Boolean}\r\n     */\r\n    or = curry2((a, b) => a || b),\r\n\r\n    /**\r\n     * Returns whether passed in value is truthy or not.\r\n     * @function module:booleanOps.not\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    not = x => !x,\r\n\r\n    /**\r\n     * Returns `true` - Makes code more readable in places.\r\n     * @tentative\r\n     * @function module:booleanOps.otherwise\r\n     * @returns {Boolean} - Always true\r\n     */\r\n    otherwise = () => true,\r\n\r\n    /**\r\n     * Returns whether both values passed in are equal or not.\r\n     * @function module:booleanOps.equal\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {Boolean}\r\n     */\r\n    equal = curry2((a, b) => a === b);\r\n","/**\r\n * Created by elydelacruz on 7/22/2017.\r\n */\r\nimport {curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Functional `call` functionOps (takes no context).\r\n     * @functionOps module:fnOperators.call\r\n     * @param fn {Function}\r\n     * @param args {*}\r\n     * @returns {*}\r\n     */\r\n    call = curry2((fn, ...args) => fn.call(null, ...args));\r\n","import {reduceRight} from '../listOps/listOpsPrelude';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the functionOps on the left of itself.\r\n * @functionOps module:fjl.compose\r\n * @type {Function}\r\n * @param args {...Function}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) => arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","/**\r\n * @module negate\r\n */\r\n\r\n/**\r\n * Negates a predicate function.\r\n * @function module:functionOps.negateP\r\n * @param fn {Function}\r\n * @returns {Function} - Negated predicate\r\n */\r\nexport const negateP = fn => (x, ind, xs) => !fn(x, ind, xs);\r\n","/**\r\n * @module id\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","import {reverse} from '../listOps/listOpsPrelude';\r\nimport {curry, curry3} from './curry';\r\nimport {apply} from './apply';\r\nimport {call} from './call';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Flips a functions arguments order and returns a new functionOps requiring such (arguments in reverse order).\r\n     * @functionOps module:fnOperators.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flipN = fn => curry3((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a functionOps's first and second arguments and and returns a new functionOps requiring said arguments in reverse.\r\n     * @functionOps module:fnOperators.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b));\r\n","import {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true`.\r\n     * @function module:function.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = curry((predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    });","/**\r\n * Function operations: `\r\n * @module function\r\n */\r\nexport {call} from './call';\r\n\r\nexport {apply} from './apply';\r\n\r\nexport {compose} from './compose';\r\n\r\nexport {curry, curryN, curry2, curry3, curry4, curry5,\r\n    __, curry_, curryN_, curry2_, curry3_, curry4_, curry5_} from './curry';\r\n\r\nexport {negateP} from './negateP';\r\n\r\nexport {id} from './id';\r\n\r\nexport {flip, flipN} from './flip';\r\n\r\nexport {until} from './until';\r\n","/**\r\n * Contains functions for operating strings.\r\n * @author elyde\r\n * @created 7/9/2017.\r\n */\r\n\r\n'use strict';\r\n\r\nimport {join} from '../listOps/listOpsPrelude';\r\n\r\nimport {curry} from '../functionOps/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Functional version of `String.prototype.split`.\r\n     * @functionOps module:stringOps.split\r\n     * @param separator {String|RegExp}\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    split = curry((separator, str) => {\r\n        return str ? str.split(separator) : [];\r\n    }),\r\n\r\n    /**\r\n     * Splits a stringOps on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @functionOps module:stringOps.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a stringOps on all '\\s' and/or all '\\t' characters.\r\n     * @functionOps module:stringOps.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Joins an arrayOps of strings with '\\s'.\r\n     * @functionOps module:stringOps.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = join('\\s'),\r\n\r\n    /**\r\n     * Splits a stringOps on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @functionOps module:stringOps.unlines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    unlines = join('\\n');\r\n","export const negate = x => x * -1;\r\n","/**\r\n * Array operators module.\r\n * @module arrayOps\r\n */\r\n\r\n\r\n'use strict';\r\n\r\nimport {curry, curry2}      from '../functionOps/curry';\r\nimport {apply}              from '../functionOps/apply';\r\nimport {negateP}  from '../functionOps/functionOps';\r\nimport {isTruthy, isFalsy}  from '../booleanOps/is';\r\nimport {isString, isArray, isset}  from '../objectOps/is';\r\nimport {prop} from '../objectOps/prop';\r\nimport {typeOf}             from '../objectOps/typeOf';\r\nimport {length, keys as objectKeys, hasOwnProperty} from '../objectOps/objectPrelude';\r\nimport {concat as arrayConcat, slice}   from './listOpsPrelude';\r\n// import {log}                            from '../../tests/for-server/helpers';\r\nimport {fPureTakesOne}                  from '../utils/utils';\r\n\r\nexport const\r\n\r\n    ASC = 1,\r\n\r\n    DESC = -1,\r\n\r\n    sliceToEndFrom = curry((startInd, arr) => slice(startInd, length(arr), arr)),\r\n\r\n    sliceFromZero = sliceToEndFrom(0),\r\n\r\n    onlyOneOrNegOne = x => x === 1 || x === -1 ? x : 1,\r\n\r\n    getSortByOrder = curry((multiplier, valueFn) => {\r\n        valueFn = valueFn || (v => v);\r\n        const x = onlyOneOrNegOne(multiplier),\r\n            ifGreaterThan = 1 * x,\r\n            ifLessThan = -1 * x;\r\n        return (...values) => values.sort((a1, b1) => {\r\n            let a = valueFn(a1),\r\n                b = valueFn(b1);\r\n            if (a > b) {\r\n                return ifGreaterThan;\r\n            }\r\n            else if (b > a) {\r\n                return ifLessThan;\r\n            }\r\n            return 0;\r\n        });\r\n    }),\r\n\r\n    sortDesc = getSortByOrder(DESC),\r\n\r\n    sortAsc = getSortByOrder(ASC),\r\n\r\n    sortDescByLength = getSortByOrder(DESC, x => length(x)),\r\n\r\n    lengths = curry2((...arrs) => length(arrs) ? arrs.map(length) : []),\r\n\r\n    getOrderedLengths = curry2((orderDir, ...arrs) => (orderDir ? sortAsc : sortDesc)(lengths(arrs))),\r\n\r\n    trimLengths = (...arrays) => {\r\n        const smallLen = getOrderedLengths(ASC, arrays)[0];\r\n        return arrays.map(arr => length(arr) > smallLen ? slice(0, smallLen, arr) : sliceFromZero(arr));\r\n    },\r\n\r\n\r\n    reduceUntil = (pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (limit === 0) {\r\n            return agg;\r\n        }\r\n        let ind = 0,\r\n            result = agg,\r\n            keys = objectKeys(arr),\r\n            key;\r\n        for (; ind < limit; ind++) {\r\n            key = keys[ind];\r\n            if (pred(arr[key], key, arr)) { break; }\r\n            result = op(result, arr[key], key, arr);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    reduceRightUntil = (pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (limit === 0) {\r\n            return agg;\r\n        }\r\n        let ind = limit - 1,\r\n            result = agg,\r\n            keys = objectKeys(arr),\r\n            key;\r\n        for (; ind >= 0; ind--) {\r\n            key = keys[ind];\r\n            if (pred(arr[key], key, arr)) { break; }\r\n            result = op(result, arr[key], key, arr);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    aggregateStr = (agg, item) => {\r\n        agg += item;\r\n        return agg;\r\n    },\r\n\r\n    aggregateArr = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    },\r\n\r\n    aggregateObj = (agg, item, ind) => {\r\n        agg[ind] = item;\r\n        return agg;\r\n    },\r\n\r\n    aggregatorByType = x => {\r\n        switch (typeOf(x)) {\r\n            case 'String': return aggregateStr;\r\n            case 'Array': return aggregateArr;\r\n            case 'Object':\r\n            default: return aggregateObj;\r\n        }\r\n    },\r\n\r\n    reduce = curry((operation, agg, arr) =>\r\n        reduceUntil(\r\n            () => false,            // predicate\r\n            operation,              // operation\r\n            agg,                    // aggregator\r\n            arr)),                  // listOps\r\n\r\n    reduceRight = curry((operation, agg, arr) =>\r\n        reduceRightUntil(\r\n            () => false,            // predicate\r\n            operation,              // operation\r\n            agg,                    // aggregator\r\n            arr)),                  // listOps\r\n\r\n\r\n    strConcat = (x, ...args) => reduce(aggregateStr, x, args),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @functionOps module:listOps.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - listOps or listOps like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @functionOps module:listOps.lastIndex\r\n     * @param x {Array|String|*} - listOps like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Append two lists, i.e.,\r\n     * ```\r\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\r\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\r\n     * ```\r\n     * If the first list is not finite, the result is the first list.\r\n     * @haskellType `append :: [a] -> [a] -> [a]`\r\n     * @functionOps module:listOps.append\r\n     * @param xs1 {Array|String|*} - listOps or list like.\r\n     * @param xs2 {Array|String|*} - listOps or list like.\r\n     * @returns {Array|String|*} - Same type as list like passed in.\r\n     */\r\n    append = curry((xs1, xs2) => (isArray(xs1) ? arrayConcat : strConcat)(xs1, xs2)),\r\n\r\n    /**\r\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\r\n     * @functionOps module:listOps.appendMany\r\n     * @param xs1 {Array|String|*} - listOps or list like.\r\n     * @param [...args] {Array|String|*} - Lists or lists likes.\r\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\r\n     */\r\n    appendMany = curry2((x, ...args) => (isArray(x) ? arrayConcat : strConcat)(x, ...args)),\r\n\r\n    /**\r\n     * Returns head of listOps (first item of listOps).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @functionOps module:listOps.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from listOps\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of listOps.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @functionOps module:listOps.last\r\n     * @param functor {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = functor => functor[lastIndex(functor)],\r\n\r\n    /**\r\n     * Returns tail part of listOps (everything after the first item as new listOps).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @functionOps module:listOps.tail\r\n     * @param functor {Array}\r\n     * @returns {Array}\r\n     */\r\n    tail = functor => sliceToEndFrom(1, functor),\r\n\r\n    /**\r\n     * Returns everything except last item of listOps as new listOps.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @functionOps module:listOps.init\r\n     * @param functor {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = functor => slice(0, lastIndex(functor), functor),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in listOps/stringOps in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @functionOps module:listOps.uncons\r\n     * @param x {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    uncons = x => {\r\n        const len = length(x);\r\n        if (len === 0) {\r\n            return undefined;\r\n        }\r\n        return [head(x), tail(x)];\r\n    },\r\n\r\n    map = curry ((fn, xs) => {\r\n        let ind = -1,\r\n            limit = length(xs),\r\n            out = (xs).constructor(),\r\n            aggregate = aggregatorByType(xs);\r\n        while (++ind < limit) {\r\n            out = aggregate(out, fn(xs[ind], ind, xs), ind, xs);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    reverse = x => reduceRight((agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    }, x.constructor(), x),\r\n\r\n    intersperse = curry((between, arr) => {\r\n        const limit = length(arr) - 1,\r\n            aggregator = (arr).constructor(),\r\n            aggregatorOp = aggregatorByType(arr);\r\n        return reduce((agg, item, ind) => {\r\n            if (ind === limit) {\r\n                return aggregatorOp(agg, item);\r\n            }\r\n            return aggregatorOp(\r\n                aggregatorOp(agg, item),\r\n                between\r\n            );\r\n        }, aggregator, arr);\r\n    }),\r\n\r\n    intercalate = curry((xs, xss) => concat(intersperse(xs, xss))),\r\n\r\n    transpose = xss => {\r\n        const orderedLengths = getOrderedLengths(DESC, ...xss),\r\n            out = new Array(orderedLengths[0]);\r\n        return reduce((agg, item) =>\r\n            reduce((agg2, element, ind2) => {\r\n                agg2[ind2].push(element);\r\n                return agg2;\r\n            }, agg, item), out.map(_ => []), xss);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (stringOps/listOps) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @functionOps module:listOps.subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    subsequences = xs => {\r\n        const len = Math.pow(2, length(xs)),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            const entry = [];\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    permutations = xs => [xs],\r\n\r\n    foldl = reduce,\r\n\r\n    foldr = reduceRight,\r\n\r\n    foldl1 = curry((op, xs) => {\r\n        const arr = sliceToEndFrom(0, xs);\r\n        return reduce (op, arr.shift(), arr);\r\n    }),\r\n\r\n    foldr1 = curry((op, xs) => {\r\n        const arr = sliceToEndFrom(0, xs);\r\n        return reduceRight (op, arr.pop(), arr);\r\n    }),\r\n\r\n    /**\r\n     * Accumulative map functionOps which effectively does a map and reduce (from the left) all in one;  Returns a tuple\r\n     * containing the aggregated value and the mapped result of map the passed in `op` on the passed in\r\n     * list (`xs`).\r\n     * @functionOps module:listOps.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - listOps type.\r\n     * @return {Array} - [aggregated, listOps]\r\n     */\r\n    mapAccumL = curry((op, zero, xs) => {\r\n        const list = sliceToEndFrom(0, xs),\r\n            limit = length(xs);\r\n        if (!limit) { return [zero, list]; }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = xs.constructor(),\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * Accumulative map functionOps which effectively does a map and reduce (from the right) all in one;  Returns a tuple\r\n     * containing the aggregated value and the mapped result of map the passed in `op` on the passed in\r\n     * list (`xs`).\r\n     * @functionOps module:listOps.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\r\n     * @param xs {Array|String|*} - listOps type.\r\n     * @return {Array} - [aggregated, listOps]\r\n     */\r\n    mapAccumR = curry((op, zero, xs) => {\r\n        const list = sliceToEndFrom(0, xs),\r\n            limit = length(xs);\r\n        if (!limit) { return [zero, list]; }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = xs.constructor(),\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    unfoldr = curry((op, x, zero) => {\r\n        let ind = 0,\r\n            out = !isset(zero) ? [] : zero,\r\n            aggregator = aggregatorByType(out),\r\n            resultTuple = op(x, ind, out);\r\n        while (isset(resultTuple[1])) {\r\n            out = aggregator(out, resultTuple[0], ind);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Takes `n` items from start of listOps to `limit` (exclusive).\r\n     * @functionOps module:listOps.take\r\n     * @param listOps {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = curry((limit, array) => slice(0, limit, array)),\r\n\r\n    /**\r\n     * Drops `n` items from start of listOps to `count` (exclusive).\r\n     * @functionOps module:listOps.take\r\n     * @param listOps {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = curry((count, array) => sliceToEndFrom(count, array)),\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned listOps)).\r\n     * @functionOps module:listOps.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param functor {Array|String} - functor (listOps or stringOps) to split.\r\n     * @returns {Array} - Array of whatever type `x` was when passed in\r\n     */\r\n    splitAt = curry((ind, arr) => [\r\n        slice(0, ind, arr),\r\n        sliceToEndFrom(ind, arr)\r\n    ]),\r\n\r\n    /**\r\n     * Gives an listOps with passed elements while predicate was true.\r\n     * @functionOps module:listOps.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, listOps|stringOps>\r\n     * @param arr {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry((pred, arr) => {\r\n        let zero =  (arr).constructor();\r\n        const operation = aggregatorByType(arr);\r\n        return reduceUntil (\r\n            negateP(pred),  // predicate\r\n            operation,      // operation\r\n            zero,           // aggregator\r\n            arr\r\n        );\r\n    }),\r\n\r\n    /**\r\n     * Returns an listOps without elements that match predicate.\r\n     * @functionOps module:listOps.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, listOps|stringOps>\r\n     * @param arr {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry((pred, arr) => {\r\n        const limit = length(arr),\r\n            splitPoint =\r\n                findIndexWhere((item, ind, arr2) =>\r\n                    !pred(arr[ind], ind, arr2), arr);\r\n\r\n        return splitPoint === -1 ?\r\n            slice(0, limit, arr) :\r\n            slice(splitPoint, limit, arr);\r\n    }),\r\n\r\n    /**\r\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\r\n     * the second list in the tuple is a list of the remaining elements in the given list.\r\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\r\n     * @functionOps module:listOps.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type listOps or stringOps)).\r\n     */\r\n    span = curry((pred, arr) => {\r\n        const splitPoint = findIndexWhere(negateP(pred), arr);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, arr) : splitAt(splitPoint, arr);\r\n    }),\r\n\r\n    breakOnList = curry((pred, arr) => {\r\n        const splitPoint = findIndexWhere(pred, arr);\r\n        return splitPoint === -1 ?\r\n            splitAt(0, arr) : splitAt(splitPoint, arr);\r\n    }),\r\n\r\n    stripPrefix = curry((prefix, arr) =>\r\n        isPrefixOf(prefix, arr) ? splitAt(prefix.length, arr)[1] : sliceToEndFrom(0, arr)),\r\n\r\n    /**\r\n     * @functionOps module:listOps.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array|String|*} - listOps or listOps like.\r\n     * @returns {*}\r\n     */\r\n    at = prop,\r\n\r\n    /**\r\n     * @functionOps module:listOps.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - listOps or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    }),\r\n\r\n    /**\r\n     * @functionOps module:listOps.find\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - listOps or list like.\r\n     * @returns {*}\r\n     */\r\n    find = findWhere,\r\n\r\n    filter = curry ((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            aggregator = aggregatorByType(xs),\r\n            out = (xs).constructor();\r\n        if (!limit) { return out; }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out = aggregator(out, xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\r\n     * @functionOps module:listOps.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type listOps or stringOps)).\r\n     */\r\n    partition = curry((pred, arr) => {\r\n        const limit = length(arr),\r\n            receivedString = isString(arr),\r\n            zero = receivedString ? '' : [];\r\n        if (!limit) { return [zero, zero]; }\r\n        return [filter(pred, arr), filter(negateP(pred), arr)];\r\n    }),\r\n\r\n    elem = curry((elm, xs) => indexOf(elm, xs) !== -1),\r\n\r\n    notElem = curry((elm, xs) => indexOf(elm, xs) === -1),\r\n\r\n    lookup = curry((key, xs) => hasOwnProperty(key, xs) ? xs[key] : undefined),\r\n\r\n    /**\r\n     * Finds index in stringOps or listOps.\r\n     * @functionOps module:listOps.findIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = curry((pred, arr) => {\r\n        let ind = -1,\r\n            predicateFulfilled = false;\r\n        const limit = length(arr);\r\n        while (ind < limit && !predicateFulfilled) {\r\n            predicateFulfilled = pred(arr[++ind], ind, arr);\r\n        }\r\n        return ind;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in stringOps or listOps (alias for `findIndex`).\r\n     * @functionOps module:listOps.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @functionOps module:listOps.findIndicesWhere\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - listOps or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = curry((pred, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) { return undefined; }\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * @functionOps module:listOps.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - listOps or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices =  findIndicesWhere,\r\n\r\n    /**\r\n     * @functionOps module:listOps.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - listOps or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry((x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @functionOps module:listOps.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array|String|*} - listOps or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry((value, xs) => findIndices(x => x === value, xs)),\r\n\r\n    isPrefixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) { return false; }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    isSuffixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false\r\n        }\r\n        let ind = limit2 - 1;\r\n        for (; ind >= 0; ind--) {\r\n            if (xs1[ind] !== xs2[ind]) { return false; }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    isInfixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false\r\n        }\r\n        let ind = limit2 - 1;\r\n        for (; ind >= 0; ind--) {\r\n            if (xs1[ind] !== xs2[ind]) { return false; }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    group = xs => [xs],\r\n\r\n    inits = xs => [xs],\r\n\r\n    tails = xs => [xs],\r\n\r\n    /**\r\n     * Flattens an listOps.\r\n     * @functionOps module:listOps.flatten\r\n     * @param arr {Array}\r\n     * @returns {Array}\r\n     */\r\n    flatten = arr => reduce((agg, elm) => {\r\n        if (isArray(elm)) {\r\n            return append(agg, flatten(elm));\r\n        }\r\n        agg.push(elm);\r\n        return agg;\r\n    }, [], arr),\r\n\r\n    /**\r\n     * Flattens all arrays passed in into one listOps.\r\n     * @functionOps module:listOps.flattenMulti\r\n     * @param arr {Array}\r\n     * @param [...arrays{Array}] - Other arrays to flatten into new listOps.\r\n     * @returns {Array}\r\n     */\r\n    flattenMulti = curry2((arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, flatten(arr)), flatten(arr0), arrays)),\r\n\r\n    /**\r\n     * zip :: [a] -> [b] -> [(a, b)]\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @functionOps module:listOps.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry((arr1, arr2) => {\r\n        const {0: a1, 1: a2} = trimLengths(arr1, arr2);\r\n        return reduce((agg, item, ind) => {\r\n                agg.push([item, a2[ind]]);\r\n            return agg;\r\n        }, [], a1);\r\n    }),\r\n\r\n    zipN = curry2((...arrs) => {\r\n        const lists = apply(trimLengths, arrs);\r\n        return reduce((agg, arr, ind) => {\r\n            if (!ind) {\r\n                return zip (agg, arr);\r\n            }\r\n            return agg.map (arr2 => {\r\n                arr.forEach (elm => {\r\n                    arr2.push(elm);\r\n                });\r\n                return arr2;\r\n            });\r\n        }, lists.shift(), lists);\r\n    }),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the functionOps given as the\r\n     * first argument, instead of a tupling functionOps. For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @type {Function}\r\n     */\r\n    zipWith = curry((combinator, xs1, xs2) => []),\r\n\r\n    /**\r\n     * unzip :: [(a, b)] -> ([a], [b])\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @param arr\r\n     */\r\n    unzip = arr =>\r\n        reduce((agg, item) => {\r\n            agg[0].push(item[0]);\r\n            agg[1].push(item[1]);\r\n            return agg;\r\n        }, [[], []], arr),\r\n\r\n    unzipN = (...arrs) =>\r\n        reduce((agg, item) => {\r\n            agg.push(unzip(item));\r\n            return agg;\r\n        }, [], arrs),\r\n\r\n    concat = foldableOfA => appendMany(...foldableOfA),\r\n\r\n    concatMap = curry((fn, foldableOfA) => concat(map(fn, foldableOfA))),\r\n\r\n    any = curry((p, xs) => reduceUntil(p, (_ => true), false, xs)),\r\n\r\n    all = curry((p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (limit === 0) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    and = all(isTruthy),\r\n\r\n    or = any(isTruthy),\r\n\r\n    not = all(isFalsy),\r\n\r\n    equal = curry2((arg0, ...args) => all(x => arg0 === x, args)),\r\n\r\n    sum = arr => {\r\n        const parts = uncons(arr);\r\n        return reduce((agg, x) => agg + x, parts[0], parts[1]);\r\n    },\r\n\r\n    product = arr => {\r\n        const parts = uncons(arr);\r\n        return reduce((agg, x) => agg * x, parts[0], parts[1]);\r\n    },\r\n\r\n    maximum = arr => apply(Math.max, arr),\r\n\r\n    minimum = arr => apply(Math.min, arr),\r\n\r\n    /**\r\n     * Creates a arrayUnion on matching elements from array1.\r\n     * @functionOps module:listOps.arrayUnion\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    arrayUnion = curry((arr1, arr2) =>\r\n        append(arr1, filter(elm => indexOf(elm, arr1) === -1, arr2))),\r\n\r\n    /**\r\n     * Performs an intersection on listOps 1 with  elements from listOps 2.\r\n     * @functionOps module:listOps.arrayIntersect\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    arrayIntersect = curry((arr1, arr2) => length(arr2) === 0 ? [] :\r\n            filter(elm => indexOf(elm, arr2) > -1, arr1)),\r\n\r\n    /**\r\n     * Returns the difference of listOps 1 from listOps 2.\r\n     * @functionOps module:listOps.arrayDifference\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    arrayDifference = curry((array1, array2) => { // augment this with max length and min length ordering on op\r\n        let [arr1, arr2] = sortDescByLength(array1, array2);\r\n        if (!arr2 || length(arr2) === 0) {\r\n            return slice(0, length(arr1), arr1);\r\n        }\r\n        return reduce((agg, elm) => {\r\n            if (indexOf(elm, arr2) === -1) {\r\n                agg.push(elm);\r\n            }\r\n            return agg;\r\n        }, [], arr1);\r\n    }),\r\n\r\n    /**\r\n     * Returns the complement of listOps 0 and the reset of the passed in arrays.\r\n     * @functionOps module:listOps.arrayComplement\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    arrayComplement = curry2((arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, arrayDifference(arr0, arr)), [], arrays));\r\n","import {curry} from '../functionOps/curry';\r\nimport {typeOf} from '../objectOps/typeOf';\r\nimport {\r\n    arrayComplement,\r\n    arrayDifference,\r\n    arrayUnion,\r\n    arrayIntersect\r\n} from '../listOps/listOps';\r\n\r\nimport {\r\n    objComplement,\r\n    objDifference,\r\n    objUnion,\r\n    objIntersect\r\n} from '../objectOps/objectOps';\r\n\r\nexport const\r\n\r\n    complement = curry((functor, ...others) => {\r\n        switch (typeOf(functor)) {\r\n            case 'Array':\r\n                return arrayComplement(functor, ...others);\r\n            default:\r\n                return objComplement(functor, ...others);\r\n        }\r\n    }),\r\n\r\n    difference = curry((functor1, functor2) => {\r\n        switch (typeOf(functor1)) {\r\n            case 'Array':\r\n                return arrayDifference(functor1, functor2);\r\n            default:\r\n                return objDifference(functor1, functor2);\r\n        }\r\n    }),\r\n\r\n    union = curry((functor1, functor2) => {\r\n        switch (typeOf(functor1)) {\r\n            case 'Array':\r\n                return arrayUnion(functor1, functor2);\r\n            default:\r\n                return objUnion(functor1, functor2);\r\n        }\r\n    }),\r\n\r\n    intersect = curry((functor1, functor2) => {\r\n        switch (typeOf(functor1)) {\r\n            case 'Array':\r\n                return arrayIntersect(functor1, functor2);\r\n            default:\r\n                return objIntersect(functor1, functor2);\r\n        }\r\n    });\r\n","/**\n * Content generated by '{project-root}/node-scripts/VersionNumberReadStream.js'.\n * Generated Sat Aug 12 2017 19:30:43 GMT-0400 (Eastern Daylight Time) \n */\n\nexport let version = '0.13.3';\n\nexport default version;\n\n","/**\r\n * Created by elyde on 12/6/2016.\r\n * @file fjl.js\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @description Includes operations from haskell's Prelude.\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n * @module fjl\r\n */\r\n\r\nexport * from './objectOps/objectPrelude';\r\n// export * from './listOps/listOpsPrelude';\r\nexport * from './objectOps/objectOps';\r\nexport * from './booleanOps/booleanOps';\r\nexport * from './functionOps/functionOps';\r\nexport * from './stringOps/stringOps';\r\nexport * from './numberOps/numberOps';\r\nexport * from './compoundedOps/compoundedOps';\r\n\r\nexport {version} from '../generated-for-src/version';\r\n"],"names":["PlaceHolder","placeHolderInstance","curry","fn","argsToCurry","args","concatedArgs","concat","length","apply","isPlaceHolder","instance","replacePlaceHolders","array","out","map","element","shift","curry_","placeHolders","filter","canBeCalled","curryN_","executeArity","curriedArgs","curryN","__","Object","freeze","curry2_","curry3_","curry4_","curry5_","curry2","curry3","curry4","curry5","_Number","Number","name","_NaN","_Null","_Undefined","_undefined","typeOf","retVal","value","constructorName","constructor","isNaN","instanceOf","instanceConstructor","_String","String","_Object","_Boolean","Boolean","_Function","Function","_Array","Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","isFunction","isType","type","obj","isClass","x","test","toString","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isPromise","isUsableImmutablePrimitive","typeOfX","some","Type","isEmptyList","isEmptyObject","keys","isEmptyCollection","size","isEmpty","typeOfValue","hasOwnProperty","notEmptyAndOfType","isset","fPureTakesOne","arg","f","fPureTakes2","arg1","arg2","fPureTakesOneOrMore","prop","defineAssign","assign","obj0","objs","reduce","topAgg","agg","key","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","of","undefined","defineReverse","prototype","reverse","reduceRight","item","push","forEach","every","join","slice","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","isTruthy","isFalsy","and","a","b","or","not","otherwise","equal","call","compose","arg0","negateP","ind","xs","id","flipN","flip","until","predicate","operation","typeInstance","result","split","separator","str","lines","words","unwords","unlines","negate","ASC","DESC","sliceToEndFrom","startInd","arr","sliceFromZero","onlyOneOrNegOne","getSortByOrder","multiplier","valueFn","v","ifGreaterThan","ifLessThan","values","sort","a1","b1","sortDesc","sortAsc","sortDescByLength","lengths","arrs","getOrderedLengths","orderDir","trimLengths","arrays","smallLen","reduceUntil","pred","op","limit","objectKeys","reduceRightUntil","aggregateStr","aggregateArr","aggregateObj","aggregatorByType","strConcat","indexOf","lastIndex","len","append","xs1","xs2","arrayConcat","appendMany","head","last","functor","tail","init","uncons","aggregate","intersperse","between","aggregator","aggregatorOp","intercalate","xss","transpose","orderedLengths","agg2","ind2","subsequences","Math","pow","i","entry","j","permutations","foldl","foldr","foldl1","foldr1","pop","mapAccumL","zero","list","mapped","tuple","mapAccumR","unfoldr","resultTuple","take","drop","count","splitAt","takeWhile","dropWhile","splitPoint","findIndexWhere","arr2","span","breakOnList","stripPrefix","prefix","isPrefixOf","at","findWhere","elm","find","partition","receivedString","elem","notElem","lookup","predicateFulfilled","findIndex","findIndicesWhere","findIndices","elemIndex","foundInd","elemIndices","limit1","limit2","isSuffixOf","isInfixOf","group","inits","tails","flatten","flattenMulti","arr0","zip","arr1","a2","zipN","lists","zipWith","combinator","unzip","unzipN","foldableOfA","concatMap","any","p","all","sum","parts","product","maximum","max","minimum","min","arrayUnion","arrayIntersect","arrayDifference","array1","array2","arrayComplement","complement","others","difference","functor1","functor2","union","intersect","version"],"mappings":"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"}