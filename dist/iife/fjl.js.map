{"version":3,"file":"fjl.js","sources":["../../src/uncurried/_objectOps/_typeOf.js","../../src/uncurried/_objectOps/_utils.js","../../src/uncurried/_jsPlatform/_object.js","../../src/uncurried/_jsPlatform/_array.js","../../src/uncurried/_jsPlatform/_list.js","../../src/uncurried/_jsPlatform/_string.js","../../src/uncurried/_jsPlatform/_function.js","../../src/uncurried/_jsPlatform/_jsPlatform.js","../../src/uncurried/_functionOps/_curry.js","../../src/uncurried/_objectOps/_prop.js","../../src/uncurried/_objectOps/_is.js","../../src/uncurried/_objectOps/_assignDeep.js","../../src/uncurried/_functionOps/_negate.js","../../src/booleanOps.js","../../src/uncurried/_objectOps/_of.js","../../src/uncurried/_objectOps/_console.js","../../src/uncurried/_objectOps/_errorThrowing.js","../../src/uncurried/_objectOps/_objectOps.js","../../src/uncurried/_listOps/_map.js","../../src/uncurried/_listOps/_aggregation.js","../../src/uncurried/_listOps/_utils.js","../../src/uncurried/_listOps/_listOps.js","../../src/uncurried/_objectOps/_setTheory.js","../../src/objectOps.js","../../src/uncurried/_functionOps/_until.js","../../src/uncurried/_functionOps/_flip.js","../../src/uncurried/_functionOps/__curry.js","../../src/uncurried/_functionOps/_id.js","../../src/uncurried/_functionOps/_compose.js","../../src/functionOps.js","../../src/uncurried/_functionOps/_functionOps.js","../../src/utils.js","../../src/jsPlatform/array.js","../../src/jsPlatform/list.js","../../src/jsPlatform/string.js","../../src/jsPlatform.js","../../src/listOps.js","../../src/stringOps.js","../../src/fjl.js"],"sourcesContent":["/**\n * Created by elyde on 12/18/2016.\n * @memberOf _objectOps\n */\nconst _Number = Number.name,\n    _NaN = 'NaN',\n    _Null = 'Null',\n    _Undefined = 'Undefined';\n\n/**\n * Returns the constructor/class/type name of a value.\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\n * @note Returns 'Undefined' if value is `undefined`\n * @note Returns 'Null' if value is `null`\n * For values that have no concrete constructors and/or casters\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\n * @function module:objectOps.typeOf\n * @param value {*}\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\n */\nexport function typeOf (value) {\n    let retVal;\n    if (value === undefined) {\n        retVal = _Undefined;\n    }\n    else if (value === null) {\n        retVal = _Null;\n    }\n    else {\n        let constructorName = (value).constructor.name;\n        retVal = constructorName === _Number && isNaN(value) ?\n            _NaN : constructorName;\n    }\n    return retVal;\n}\n","import {typeOf} from './_typeOf';\n\nexport const\n\n    fPureTakesOne = name => (arg, f) => f[name](arg),\n\n    fPureTakes2 = name => (arg1, arg2, f) => f[name](arg1, arg2),\n\n    fPureTakes3 = name => (arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3),\n\n    fPureTakes4 = name => (arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4),\n\n    fPureTakes5 = name => (arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5),\n\n    fPureTakesOneOrMore = name => (f, ...args) => f[name](...args),\n\n    fnOrError = (symbolName, f) => {\n        if (!f || typeof f !== 'function') {\n            throw new Error (`${symbolName} should be a function. ` +\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\n        }\n        return f;\n    };\n","/**\n * Created by elydelacruz on 9/6/2017.\n * Defines some of the platform methods for objects (the ones used within `fjl`) uncurried for use\n * throughout the library.  @note Doesn't include all methods for objects just the ones used in\n *  the library.\n * @todo change all files named '*UnCurried' to '*_'.\n */\n\nimport {fPureTakesOne} from '../_objectOps/_utils';\n\nexport const\n\n    /**\n     * Returns whether constructor has derived _objectOps.\n     * @function module:_jsPlatform_objectOps.instanceOf\n     * @param instanceConstructor {Function} - Constructor.\n     * @param instance {*}\n     * @instance {*}\n     * @returns {Boolean}\n     */\n    instanceOf = (instanceConstructor, instance) =>\n        instance instanceof instanceConstructor,\n\n    /**\n     * @function module:_jsPlatform_objectOps.hasOwnProperty\n     * @param propName {*}\n     * @param typeInstance {*}\n     * @returns {Boolean}\n     */\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\n\n    /**\n     * @function module:_jsPlatform_objectOps.length\n     * @param x {*}\n     * @returns {Number}\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\n     */\n    length = x => x.length,\n\n    /**\n     * Gets own enumerable keys of passed in object (`Object.keys`).\n     * @function module:_jsPlatform_objectOps.keys\n     * @param obj {*}\n     * @returns {Array<String>}\n     */\n    keys = obj => Object.keys(obj),\n\n    /**\n     * Defined as `Object.assign` else is the same thing but shimmed.\n     * @function module:_jsPlatform_objectOps.assign\n     * @param obj0 {Object}\n     * @param objs {...{Object}}\n     * @returns {Object}\n     */\n    assign = (() => Object.assign ?\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\n            (obj0, ...objs) => objs.reduce((topAgg, obj) => {\n                return keys(obj).reduce((agg, key) => {\n                    agg[key] = obj[key];\n                    return agg;\n                }, topAgg);\n            }, obj0)\n        )();\n","/**\n * Created by elyde on 7/20/2017.\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\n * @module _jsPlatform_arrayOps\n * @private\n * @todo updated doc blocks to list correct/updated module name.\n */\n\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../_objectOps/_utils';\n\nexport const\n\n    /**\n     * Array.prototype.reverse generator (generates a _functionOps that calls the prototype version or a\n     * shimmed version if it doesn't exist).\n     * @returns {Function}\n     */\n    defineReverse = () =>\n        Array.prototype.reverse ? x => x.reverse() :\n            x => x.reduceRight((agg, item) => {\n                agg.push(item);\n                return agg;\n            }, []),\n\n    /**\n     * Maps a _functionOps to functor (_listOps etc.).\n     * @function module:_jsPlatform_array.map\n     * @param fn {Function}\n     * @param functor {Array|{map: {Function}}}\n     * @returns {Array|{map: {Function}}}\n     */\n    map = fPureTakesOne('map'),\n\n    /**\n     * Filters a functor (_listOps etc.) with passed in _functionOps.\n     * @function module:_jsPlatform_array.filter\n     * @param fn {Function}\n     * @param functor {Array|{filter: {Function}}}\n     * @returns {Array|{filter: {Function}}}\n     */\n    filter = fPureTakesOne('filter'),\n\n    /**\n     * Reduces a foldable (_listOps etc.) with passed in _functionOps.\n     * @function module:_jsPlatform_array.reduce\n     * @param fn {Function}\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {Array|{reduce: {Function}}}\n     */\n    reduce = fPureTakes2('reduce'),\n\n    /**\n     * Reduces a foldable (_listOps etc.) from the right with passed in _functionOps.\n     * @function module:_jsPlatform_array.reduceRight\n     * @param fn {Function}\n     * @param functor {Array|{reduceRight: {Function}}}\n     * @returns {Array|{reduceRight: {Function}}}\n     */\n    reduceRight = fPureTakes2('reduceRight'),\n\n    /**\n     * For each on functor (Array|Object|etc.).\n     * @param fn {Function}\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\n     */\n    forEach = fPureTakesOne('forEach'),\n\n    /**\n     * Returns `true` if `fn` (predicate) returns true for at least one item\n     * in functor else returns `false`.\n     * @param fn {Function} - Predicate.\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have a `some` method.\n     */\n    some = fPureTakesOne('some'),\n\n    /**\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\n     * @param fn {Function} - Predicate.\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have an `every` method.\n     */\n    every = fPureTakesOne('every'),\n\n    /**\n     * Array.prototype.join\n     * @function module:listPrelude.join\n     * @param separator {String|RegExp}\n     * @param arr {Array}\n     * @returns {String}\n     */\n    join = fPureTakesOne('join'),\n\n    /**\n     * Same as Array.prototype.push\n     * @param item {*}\n     * @param arr {Array}\n     * @returns {Number}\n     */\n    push = fPureTakesOneOrMore('push'),\n\n    /**\n     * Reverses an _listOps (shimmed if not exists).\n     * @function module:listPrelude.reverse\n     * @return {Array}\n     */\n    reverse = defineReverse();\n","/**\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\n *      on both strings and arrays.\n */\n\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../_objectOps/_utils';\n\nexport const\n\n    /**\n     * Concats/appends all functors onto the end of first functor.\n     * Note:  functors passed in after the first one must be of the same type.\n     * @function module:_jsPlatform_list.concat\n     * @param functor {Array|Object|*}\n     * @param ...functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have an `every` method.\n     */\n    concat = fPureTakesOneOrMore('concat'),\n\n    /**\n     * Same as Array.prototype.slice\n     * @function module:_jsPlatform_list.slice\n     * @param separator {String|RegExp}\n     * @param arr{Array}\n     * @returns {Array}\n     */\n    slice = fPureTakes2('slice'),\n\n    /**\n     * `Array.prototype.includes` or shim.\n     * @function module:_jsPlatform_list.includes\n     * @param value {*}\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    includes = (() => 'includes' in Array.prototype ?\n            fPureTakesOne('includes') :\n            (value, xs) => xs.indexOf(value) > -1)(),\n\n    /**\n     * Searches list/list-like for given element `x`.\n     * @function module:_jsPlatform_list.indexOf\n     * @param x {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like to look in.\n     * @returns {Number} - `-1` if element not found else index at which it is found.\n     */\n    indexOf = fPureTakesOne('indexOf'),\n\n    /**\n     * Last index of (`Array.prototype.lastIndexOf`).\n     * @function module:_jsPlatform_list.lastIndexOf\n     * @param x {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like to look in.\n     * @returns {Number} - `-1` if element not found else index at which it is found.\n     */\n    lastIndexOf = fPureTakesOne('lastIndexOf')\n\n;\n","/**\n * Created by elydelacruz on 9/6/2017.\n */\n\nimport {fPureTakesOne} from '../_objectOps/_utils';\n\n/**\n * Functional version of `String.prototype.split`.\n * @function module:_stringOps.split\n * @param separator {String|RegExp}\n * @param str {String}\n * @returns {Array}\n */\nexport const split = fPureTakesOne('split');\n","/**\n * Created by elydelacruz on 9/7/2017.\n * @module _jsPlatform_function\n * @private\n */\nexport const\n\n    /**\n     * Functional `apply` function (takes no context).\n     * @function module:_jsPlatform_function.apply\n     * @param fn {Function}\n     * @param args {Array|*}\n     * @returns {*}\n     */\n    apply = (fn, args) => fn.apply(null, args),\n\n    /**\n     * Functional `call` function (takes no context).\n     * @function module:_jsPlatform_function.call\n     * @param fn {Function}\n     * @param args {...*}\n     * @returns {*}\n     */\n    call = (fn, ...args) => apply(fn, args);\n","/**\n * @module jsPlatform_\n * @private\n */\nexport * from './_object';\nexport * from './_array';\nexport * from './_list';\nexport * from './_string';\nexport * from './_function';\n","/**\n * @author elydelacruz\n * @created 12/6/2016.\n * @memberOf _functionOps\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\n */\nimport {apply, length, concat} from '../_jsPlatform/_jsPlatform';\nimport {fnOrError} from '../_objectOps/_utils';\n\nconst notFnErrPrefix = '`fn` in `curry(fn, ...args)`';\n\nexport const\n\n    /**\n     * Curries a functionOps based on it's defined arity (argument's arrayOps expected length).\n     * @function module:_functionOps.curry\n     * @param fn {Function}\n     * @param argsToCurry {...*}\n     * @returns {Function}\n     */\n    curry = (fn, ...argsToCurry) => curryN(fnOrError(notFnErrPrefix, fn).length, fn, ...argsToCurry),\n\n    /**\n     * Curries a functionOps up to a given arity.\n     * @function module:_functionOps.curryN\n     * @param executeArity {Number}\n     * @param fn {Function}\n     * @param curriedArgs {...*}\n     * @returns {Function}\n     */\n    curryN = (executeArity, fn, ...curriedArgs) => {\n        return (...args) => {\n            let concatedArgs = concat(curriedArgs, args),\n                canBeCalled = (length(concatedArgs) >= executeArity) || !executeArity;\n            return !canBeCalled ? apply(curryN, concat([executeArity, fnOrError(notFnErrPrefix, fn)], concatedArgs)) :\n                apply(fnOrError(notFnErrPrefix, fn), concatedArgs);\n        };\n    },\n\n    /**\n     * Curries a _functionOps up to an arity of 2 (won't call _functionOps until 2 or more args).\n     * @function module:_functionOps.curry2\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry2 = fn => curryN(2, fn),\n\n    /**\n     * Curries a _functionOps up to an arity of 3 (won't call _functionOps until 3 or more args).\n     * @function module:_functionOps.curry3\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry3 = fn => curryN(3, fn),\n\n    /**\n     * Curries a _functionOps up to an arity of 4 (won't call _functionOps until 4 or more args).\n     * @function module:_functionOps.curry4\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry4 = fn => curryN(4, fn),\n\n    /**\n     * Curries a _functionOps up to an arity of 5 (won't call _functionOps until 5 or more args).\n     * @function module:_functionOps.curry5\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry5 = fn => curryN(5, fn);\n","/**\n * @memberOf _objectOps\n */\n\n/**\n * Returns property value if found; Else `undefined`.\n * @function module:_objectOps.prop\n * @param name {String} - Key to search on `obj`\n * @param obj {Object} - Object to search `name` on.\n * @returns {*}\n */\nexport const prop = (name, obj) => obj[name];\n","/**\n * Created by elyde on 12/18/2016.\n * @memberOf _objectOps\n */\n\nimport {typeOf} from './_typeOf';\nimport {instanceOf, length, keys, hasOwnProperty} from '../_jsPlatform/_object';\n\nlet _String = String.name,\n    _Number = Number.name,\n    _Object = Object.name,\n    _Boolean = Boolean.name,\n    _Function = Function.name,\n    _Array = Array.name,\n    _Symbol = 'Symbol',\n    _Map = 'Map',\n    _Set = 'Set',\n    _WeakMap = 'WeakMap',\n    _WeakSet = 'WeakSet',\n    _Null = 'Null',\n    _Undefined = 'Undefined';\n\nexport const\n\n    /**\n     * Returns whether a value is a _functionOps or not.\n     * @function module:objectOps._isFunction\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isFunction = value => instanceOf(Function, value),\n\n    /**\n     * Type checker.  Note** The `Type` passed in, if a constructor, should\n     * be a named constructor/_functionOps-instance;  E.g.,\n     * ```\n     *  _functionOps SomeName () {} // or\n     *  var SomeName = _functionOps SomeName () {} // or\n     *  class SomeName {}\n     * ```\n     * @function module:objectOps._isType\n     * @param type {Function|String} - Constructor or constructor name\n     * @param obj {*}\n     * @return {Boolean}\n     */\n    isType = (type, obj) => typeOf(obj) === (isFunction(type) ? type.name : type),\n\n    /**\n     * Checks if `value` is an es2015 `class`.\n     * @function module:objectOps._isClass\n     * @param x {*}\n     * @returns {boolean}\n     */\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\n\n    /**\n     * Returns a boolean depicting whether a value is callable or not.\n     * @function module:objectOps._isCallable\n     * @tentative\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isCallable = x => isFunction(x) && !isClass(x),\n\n    /**\n     * Checks if value is an array (same as `Array.isArray`).\n     * @function module:objectOps._isArray\n     * @param value {*}\n     * @returns {boolean}\n     */\n    {isArray} = Array,\n\n    /**\n     * Checks whether value is an object or not.\n     * @function module:objectOps._isObject\n     * @param value\n     * @returns {Boolean}\n     */\n    isObject = value => isType(_Object, value),\n\n    /**\n     * Checks if value is a boolean.\n     * @function module:objectOps._isBoolean\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isBoolean = value => isType(_Boolean, value),\n\n    /**\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\n     * @function module:objectOps._isNumber\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isNumber = value => isType(_Number, value),\n\n    /**\n     * Checks whether value is a stringOps or not.\n     * @function module:objectOps._isString\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isString = value => isType(_String, value),\n\n    /**\n     * Checks whether value is of `Map` or not.\n     * @function module:objectOps._isMap\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isMap = value => isType(_Map, value),\n\n    /**\n     * Checks whether value is of `Set` or not.\n     * @function module:objectOps._isSet\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isSet = value => isType(_Set, value),\n\n    /**\n     * Checks whether value is of `WeakMap` or not.\n     * @function module:objectOps._isWeakMap\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isWeakMap = value => isType(_WeakMap, value),\n\n    /**\n     * Checks whether value is of `WeakSet` or not.\n     * @function module:objectOps._isWeakSet\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isWeakSet = value => isType(_WeakSet, value),\n\n    /**\n     * Checks if value is undefined.\n     * @function module:objectOps._isUndefined\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isUndefined = value => isType(_Undefined, value),\n\n    /**\n     * Checks if value is null.\n     * @function module:objectOps._isNull\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isNull = value => isType(_Null, value),\n\n    /**\n     * Checks if value is a `Symbol`.\n     * @function module:objectOps._isSymbol\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    isSymbol = value => isType(_Symbol, value),\n\n    /**\n     * Checks if given `x` is set and of one of\n     *  [String, Boolean, Number, Symbol] (null and undefined are immutable\n     *  but are not \"usable\" (usually not what we want to operate on).\n     * @function module:objectOps._isUsableImmutablePrimitive\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isUsableImmutablePrimitive = x => {\n        const typeOfX = typeOf(x);\n        return isset(x) &&\n            [_String, _Number, _Boolean, _Symbol]\n                .some(Type => Type === typeOfX);\n    },\n\n    /**\n     * Checks if !length.\n     * @function module:objectOps._isEmptyList\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isEmptyList = x => !length(x),\n\n    /**\n     * Checks if object has own properties/enumerable-props or not.\n     * @function module:objectOps._isEmptyObject\n     * @param obj {*}\n     * @returns {Boolean}\n     */\n    isEmptyObject = obj => isEmptyList(keys(obj)),\n\n    /**\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\n     * @function module:objectOps._isEmptyCollection\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isEmptyCollection = x => x.size === 0,\n\n    /**\n     * Checks to see if passed in value is empty;  I.e.,\n     *  check for one of '', 0, `null`, `undefined`, `false`, empty array, empty object, empty function (zero arity),\n     *  or empty collection (es6 Map, Set, WeakMap, or WeakSet etc. (`!value.size`);\n     * @function module:objectOps._isEmpty\n     * @param value {*} - Value to check.\n     * @returns {Boolean}\n     */\n    isEmpty = value => {\n        let retVal;\n        if (!value) { // if '', 0, `null`, `undefined`, or `false` then is empty\n            retVal = true;\n        }\n\n        const typeOfValue = typeOf(value);\n        if (typeOfValue === _Array || typeOfValue === _Function) {\n            retVal = isEmptyList(value);\n        }\n        else if (typeOfValue === _Number) {\n            retVal = false;\n        }\n        else if (typeOfValue === _Object) {\n            retVal = isEmptyObject(value);\n        }\n        else if (hasOwnProperty('size', value) && isNumber(value.size)) {\n            retVal = isEmptyCollection(value);\n        }\n        else {\n            retVal = !value;\n        }\n        return retVal;\n    },\n\n    /**\n     * Returns whether passed in values is defined and not null or not.\n     * @function module:objectOps._isset\n     * @param x {*}\n     * @returns {Boolean}\n     */\n    isset = x => x !== null && x !== undefined;\n","\nimport {isObject} from './_is';\n\nimport {keys, hasOwnProperty} from '../_jsPlatform/_object';\n\nexport const\n    /**\n     * Merges all objects down into one.\n     * @function module:_objectOps.assignDeep\n     * @param obj0 {Object}\n     * @param objs {...{Object}}\n     * @returns {Object}\n     */\n    assignDeep = (obj0, ...objs) =>\n        objs.reduce((topAgg, obj) =>\n            !obj ? topAgg : keys(obj).reduce((agg, key) => {\n                let propDescription = Object.getOwnPropertyDescriptor(agg, key);\n                // If property is not writable move to next item in collection\n                if (hasOwnProperty(key, agg) && propDescription &&\n                    !(propDescription.get && propDescription.set) &&\n                    !propDescription.writable) {\n                    return agg;\n                }\n                if (isObject(agg[key]) && isObject(obj[key])) {\n                    assignDeep(agg[key], obj[key]);\n                }\n                else { agg[key] = obj[key]; }\n                return agg;\n            }, topAgg)\n        , obj0);\n","/**\n * @memberOf _functionOps\n */\n\nimport {apply} from '../_jsPlatform/_function';\n\nexport const\n\n    /**\n     * Takes a function that takes two parameters and returns a negated version of given\n     * function.\n     * @function module:_negate.negateF\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    negateF = fn => (a, b) => !fn(a, b),\n\n    /**\n     * Takes a function that takes three parameters and returns a\n     * negated version of given function.\n     * @function module:_negate.negateF3\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    negateF3 = fn => (a, b, c) => !fn(a, b, c),\n\n    /**\n     * Takes a function that takes four parameters and returns a\n     * negated version of given function.\n     * @function module:_negate.negateF4\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    negateF4 = fn => (a, b, c, d) => !fn(a, b, c, d),\n\n    /**\n     * Takes a function that takes four parameters and returns a\n     * negated version of given function.\n     * @function module:_negate.negateF5\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    negateF5 = fn => (a, b, c, d, e) => !fn(a, b, c, d, e),\n\n    /**\n     * Negates a javascript-'generic' predicate; `Function<element, index, list>`.\n     * @function module:_functionOps.negateP\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    negateP = negateF3,\n\n    /**\n     * Returns a new function which is the dual of `fn` (or the negated version of `fn`).\n     * @function module:_functionOps.negateFMany\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    negateFMany = fn => (...args) => !apply(fn, args);\n","/**\n * Created by elyde on 7/15/2017.\n * @module booleanOps\n */\n\nexport const\n\n    /**\n     * Returns whether `value` is 'truthy' or not\n     * @function module:booleanOps.isTruthy\n     * @param value\n     * @returns {Boolean}\n     */\n    isTruthy = value => !!value,\n\n    /**\n     * Returns whether `value` is 'falsy' or not\n     * @function module:booleanOps.isFalsy\n     * @param value\n     * @returns {Boolean}\n     */\n    isFalsy = value => !value,\n\n    /**\n     * Returns `true`.\n     * @function module:booleanOps.alwaysTrue\n     * @returns {Boolean}\n     */\n    alwaysTrue = () => true,\n\n    /**\n     * Returns `false`.\n     * @function module:booleanOps.alwaysFalse\n     * @returns {Boolean}\n     */\n    alwaysFalse = () => false;\n","import {isFunction, isset} from './_is';\nimport {hasOwnProperty} from '../_jsPlatform/_object';\nimport {apply} from '../_jsPlatform/_function';\nimport {typeOf} from './_typeOf';\n\n/**\n * Checks if given `x` is set and of one of\n *  [String, Boolean, Number, or Symbol] (null and undefined are immutable\n *   but are not \"usable\" or 'not what we usually want to operate on'.\n * @private\n * @param x {*}\n * @returns {Boolean}\n */\nfunction isUsableImmutablePrimitive (x) {\n    const typeOfX = typeOf(x);\n    return isset(x) &&\n        [String.name, Number.name, Boolean.name, Symbol.name]\n            .some(Type => Type === typeOfX);\n}\n\n/**\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\n * ```\n * // - If exists `(value).constructor.of` uses this.\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\n * // - Else if constructor is a function, thus far, then calls constructor using\n * //      the `new` keyword (with any passed in args).\n * ```\n * @function module:_objectOps.of\n * @param x {*} - Value to derive returned value's type from.\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\n * @returns {*|undefined} - New value of given value's type else `undefined`.\n */\nexport const of = (x, ...args) => {\n    if (!isset(x)) { return undefined; }\n    const constructor = x.constructor;\n    if (hasOwnProperty('of', constructor)) {\n        return apply(constructor.of, args);\n    }\n    else if (isUsableImmutablePrimitive(x)) {\n        return apply(constructor, args);\n    }\n    else if (isFunction(constructor)) {\n        return new constructor(...args);\n    }\n    return undefined;\n};\n","export const\n\n    /**\n     * `Console.log` method.\n     * @function module:objectOps.log\n     * @params args {...*}\n     * @returns {void}\n     */\n    log = console.log.bind(console),\n\n    /**\n     * `Console.error` method.\n     * @function module:objectOps.error\n     * @params args {...*}\n     * @returns {void}\n     */\n    error = console.error.bind(console),\n\n    /**\n     * Peeks at incoming value(s) and returns the last value.\n     * @function module:objectOps.peek\n     * @param args {...*}\n     * @returns {*} - Last given value (if one or more values) else first value.\n     */\n    peek = (...args) => (log(...args), args.pop())\n\n;\n","/**\n * @module errorThrowing\n * @description Contains error throwing facilities for when a value doesn't match a type.\n *  In addition gives you curried and uncurried versions of the multi arity functions.\n */\nimport {typeOf} from './_typeOf';\nimport {isset, isType, isString, isArray, isFunction} from './_is';\nimport {curry, curry4} from '../_functionOps/_curry';\n\nexport const\n\n    /**\n     * Checks if `type` is a string or a function (constructor or constructor name)\n     * @function module:errorThrowing.isCheckableType\n     * @param type {TypeRef}\n     * @returns {Boolean}\n     */\n    isCheckableType = type => isString(type) || isFunction(type),\n\n    /**\n     * Throws an error if `type` is not a checkable type (can't be checked by the `TypeChecker` type)\n     * @function module:errorThrowing._errorIfNotCheckableType\n     * @param contextName {String}\n     * @param type {TypeRef}\n     * @returns {TypeRef} - Type passed in if `type` is checkable\n     */\n    _errorIfNotCheckableType = (contextName, type) => {\n        if (!isCheckableType(type)) {\n            throw new Error (`${contextName} expects \\`type\\` to be of type \\`String\\` or \\`Function\\`.` +\n                `  Type received \\`${typeOf(type)}\\`.  Value \\`${type}\\`.`);\n        }\n        return type;\n    },\n\n    /**\n     * Resolves/normalizes a type name from either a string or a constructor.\n     * @private\n     * @function module:errorThrowing.getTypeName\n     * @param type {Function|String} - String or function representing a type.\n     * @returns {String}\n     * @private\n     */\n    getTypeName = type =>\n        _errorIfNotCheckableType('getTypeName', type) &&\n            isString(type) ? type : type.name,\n\n    /**\n     * Returns a boolean indicating whether given value matches given type.\n     * @function module:errorThrowing.defaultTypeChecker$\n     * @param Type {String|Function} - Type name, constructor and/or class.\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    _defaultTypeChecker = (Type, value) => isType(getTypeName(Type), value) || (\n        isFunction(Type) && isset(value) && value instanceof Type),\n\n    /**\n     * Pretty prints an array of types/type-strings for use by error messages;\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\n     * @private\n     * @function module:errorThrowing.multiTypesToString\n     * @param types {Array|TypesArray}\n     * @return {String}\n     * @private\n     */\n    multiTypesToString = types => types.length ?\n             types.map(type => `\\`${getTypeName(type)}\\``).join(', ') : '',\n\n    /**\n     * Prints a message from an object.  Object signature:\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\n     * @function module:errorThrowing.defaultErrorMessageCall\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\n     * @returns {string}\n     * @private\n     */\n    defaultErrorMessageCall = tmplContext => {\n        const {\n            contextName, valueName, value, expectedTypeName,\n            foundTypeName, messageSuffix\n        } = tmplContext,\n            isMultiTypeNames = isArray(expectedTypeName),\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\n            typesToMatchCopy = isMultiTypeNames ? multiTypesToString(expectedTypeName) : expectedTypeName;\n        return (contextName ? `\\`${contextName}.` : '`') +\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\n            `Type received: ${foundTypeName}.  Value: ${value};` +\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\n    },\n\n    /**\n     * Gets the error message thrower seeded with passed in errorMessage template call.\n     * @function module:errorThrowing.getErrorIfNotTypeThrower$\n     * @param errorMessageCall {Function|ErrorMessageCall}\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\n     * @returns {Function|ErrorIfNotType}\n     */\n    _getErrorIfNotTypeThrower = (errorMessageCall, typeChecker = _defaultTypeChecker) =>\n      (ValueType, contextName, valueName, value, messageSuffix = null) => {\n        const expectedTypeName = getTypeName(ValueType),\n            foundTypeName = typeOf(value);\n        if (typeChecker(ValueType, value)) { return value; } // Value matches type\n        throw new Error(errorMessageCall(\n            {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\n        ));\n    },\n\n    /**\n     * Gets the error message thrower seeded with passed in errorMessage template call.\n     * @function module:errorThrowing.getErrorIfNotTypesThrower$\n     * @param errorMessageCall {Function|ErrorMessageCall}\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\n     * @returns {Function|ErrorIfNotTypes}\n     */\n    _getErrorIfNotTypesThrower = (errorMessageCall, typeChecker = _defaultTypeChecker) =>\n      (valueTypes, contextName, valueName, value) => {\n            const expectedTypeNames = valueTypes.map(getTypeName),\n                matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\n                foundTypeName = typeOf(value);\n            if (matchFound) { return value; }\n            throw new Error(\n                errorMessageCall({\n                    contextName, valueName, value,\n                    expectedTypeName: expectedTypeNames, foundTypeName\n                })\n            );\n        },\n\n    /**\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\n     * is not of given `type`.  This is the un-curried version.  For the curried version\n     * see `module:errorThrowing.errorIfNotType`.\n     * @function module:errorThrowing.errorIfNotType$\n     * @param type {String|Function} - Type's name or type itself.\n     * @param contextName {String} - Name of context to attribute errors if thrown.\n     * @param valueName {String} - String rep of value.\n     * @param value {*}\n     * @param [messageSuffix=null] {String} - Optional.\n     * @returns {undefined}\n     * @uncurried\n     */\n    _errorIfNotType = _getErrorIfNotTypeThrower(defaultErrorMessageCall),\n\n    /**\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\n     * see `module:errorThrowing.errorIfNotTypes`.\n     * @type {Function|module:errorThrowing.errorIfNotTypes}\n     * @function module:errorThrowing.errorIfNotTypes$\n     * @param types {Array} - Array of one or more types or type names themselves.\n     * @param contextName {String} - Name of context to attribute errors if thrown.\n     * @param valueName {String} - String rep of value.\n     * @param value {*}\n     * @returns {undefined}\n     * @uncurried\n     */\n    _errorIfNotTypes = _getErrorIfNotTypesThrower(defaultErrorMessageCall),\n\n    /**\n     * Same as `defaultTypeChecker$` except curried:\n     *  \"Returns a boolean indicating whether given value matches given type\".\n     * @curried\n     * @function module:errorThrowing.defaultTypeChecker\n     * @param Type {String|Function} - Type name, constructor and/or class.\n     * @param value {*}\n     * @returns {Boolean}\n     */\n    defaultTypeChecker = curry(_defaultTypeChecker),\n\n    /**\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\n     * is not of given `type`.  Curried.\n     * @function module:errorThrowing.errorIfNotType\n     * @param type {String|Function} - Type's name or type itself.\n     * @param contextName {String} - Name of context to attribute errors if thrown.\n     * @param valueName {String} - String rep of value.\n     * @param value {*}\n     * @param [messageSuffix=null] {String} - Optional.\n     * @returns {undefined}\n     * @curried\n     */\n    errorIfNotType = curry(_errorIfNotType),\n\n    /**\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\n     *  is not of one of the given `types`.  Curried.\n     * @function module:errorThrowing.errorIfNotTypes\n     * @param types {Array} - Array of one or more types or type names themselves.\n     * @param contextName {String} - Name of context to attribute errors if thrown.\n     * @param valueName {String} - String rep of value.\n     * @param value {*}\n     * @returns {undefined}\n     * @curried\n     */\n    errorIfNotTypes = curry4(_errorIfNotTypes),\n\n    /**\n     * Returns a function that can be used to ensure that values are of a given type.\n     *   Also throws informative error messages containing the value types, names, expected type names,\n     *   etc.\n     * @function module:errorThrowing.getErrorIfNotTypeThrower\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\n     * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\n     */\n    getErrorIfNotTypeThrower = errorMessageCall => curry(_getErrorIfNotTypeThrower(errorMessageCall)),\n\n    /**\n     * Returns a function that can be used to ensure that a value is of one or more given types.\n     *   The returned function is used in cases where informative error messages\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\n     * @function module:errorThrowing.getErrorIfNotTypesThrower\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\n     * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\n     */\n    getErrorIfNotTypesThrower = errorMessageCall => curry4(_getErrorIfNotTypesThrower(errorMessageCall))\n;\n\n/**\n * @typedef {*} Any - Synonym for 'any value'.\n */\n\n/**\n * @typedef {String|Function} TypeRef\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\n */\n\n/**\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\n * @property value {*}\n * @property valueName {String}\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\n *  directing user to fix where his/her error has occurred).  Optional.\n */\n\n/**\n * @typedef {Array<(String|Function)>} TypesArray\n */\n\n/**\n * @typedef {Function} TypeChecker\n * @description Checks whether a value is of given type.\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\n * @param value {*}\n * @returns {Boolean}\n */\n\n/**\n * @typedef {Function} ErrorMessageCall\n * @description Error message template function.\n * @param tmplContext {TemplateContext}\n * @returns {String}\n */\n\n/**\n * @typedef {Function} ErrorIfNotType\n * @description Used to ensure value matches passed in type.\n * @param type {TypeRef} - Constructor name or constructor.\n * @param contextName {String}\n * @param valueName {String}\n * @param value {*}\n * @throws {Error} - If value doesn't match type.\n * @returns {*} - What ever value is.\n */\n\n/**\n * @typedef {Function} ErrorIfNotTypes\n * @description Used to ensure a value matches one of one or more types passed in.\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\n * @param contextName {String}\n * @param valueName {String}\n * @param value {*}\n * @throws {Error} - If value doesn't match type.\n * @returns {*} - Whatever value is.\n */\n","/**\n * @module _objectOps\n * @description Object operations (uncurried).\n * @private\n */\nexport * from '../_jsPlatform/_object';\nexport * from './_prop';\nexport * from './_typeOf';\nexport * from './_is';\nexport * from './_of';\nexport * from './_assignDeep';\nexport * from './_setTheory';\nexport * from './_console';\nexport * from './_errorThrowing';\n\nimport {typeOf} from './_typeOf';\n\nexport const\n\n    /**\n     * Clones and object or array using `JSON.parse(JSON.stringify(...))` pattern.\n     * @function module:objectOps.jsonClone\n     * @param x {*}\n     * @returns {*}\n     */\n    jsonClone = x => JSON.parse(JSON.stringify(x)),\n\n    /**\n     * Returns an array map (associated list) representing incoming value (object, array, etc.).\n     * @function module:objectOps.toArrayMap\n     * @param obj {(Object|Array|*)}\n     * @returns {*}\n     */\n    toArrayMap = obj => Object.keys(obj).map(key => {\n        if (typeof obj[key] === 'object') {\n            return [key, toArrayMap(obj[key])];\n        }\n        return [key, obj[key]];\n    }),\n\n    /**\n     * Converts an array-map into an object (one level).\n     * @param xs {Array|*} - Array-map (associated list).\n     * @returns {*}\n     */\n    fromArrayMap = xs => xs.reduce((agg, [key, value]) => {\n        agg[key] = value;\n        return agg;\n    }, {}),\n\n    /**\n     * Attempts to convert incoming value into an array.  This method will yield\n     * an array for most cases and throw errors where it cannot convert given value\n     * to an array.\n     * @note For `WeakMap`, `WeakSet`, `Map` and `Set` result is the same as calling `Array.from` on such.\n     * @note For `null` and `undefined` we are returning an empty array (since method name implies 'anything to array' etc.)..\n     * @param x {*}\n     * @returns {Array}\n     */\n    toArray = x => {\n        switch (typeOf(x)) {\n            case 'Null':\n            case 'Undefined':\n                return [];\n            case String.name:\n            case Array.name:\n            case 'WeakMap':\n            case 'WeakSet':\n            case 'Map':\n            case 'Set':\n                return Array.from(x);\n            case Object.name:\n            default:\n                return toArrayMap(x);\n        }\n    }\n\n;\n","import {length} from '../_jsPlatform/_object';\n\n/**\n * @function module:_listOps.map\n * @param fn {Function} - Function to map on array.\n * @param xs {Array}\n * @returns {Array}\n */\nexport default function _map (fn, xs) {\n    let ind = 0,\n        limit = length(xs),\n        out = [];\n    if (!limit) { return out; }\n    while (ind < limit) {\n        out.push(fn(xs[ind], ind, xs));\n        ind += 1;\n    }\n    return out;\n}\n","import {typeOf} from '../_objectOps/_objectOps';\n\nexport const\n\n    aggregateStr = (agg, item) => agg + item,\n\n    aggregateArr = (agg, item) => {\n        agg.push(item);\n        return agg;\n    },\n\n    aggregateObj = (agg, item, ind) => {\n        agg[ind] = item;\n        return agg;\n    },\n\n    aggregatorByType = x => {\n        switch (typeOf(x)) {\n            case 'String': return aggregateStr;\n            case 'Array': return aggregateArr;\n            case 'Object':\n            default: return aggregateObj;\n        }\n    };\n","/**\n * List operator utils module.\n * @module _listOpUtils\n * @private\n */\nimport {apply}              from '../_jsPlatform/_function';  // un-curried version\nimport {slice}              from '../_jsPlatform/_list';      // un-curried version good for both strings and arrays\nimport {length}             from '../_jsPlatform/_object';\nimport {alwaysFalse}        from '../../booleanOps';\nimport _map                 from './_map';\n\nexport * from './_aggregation';\n\nexport const\n\n    /**\n     * Returns a slice of the given list from `startInd` to the end of the list.\n     * @function module:_listOpsUtils.sliceFrom\n     * @param startInd {Number}\n     * @param arr {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    sliceFrom = (startInd, arr) => slice(startInd, undefined, arr),\n\n    /**\n     * Slices from index `0` to given index.\n     * @function module:_listOpsUtils.sliceTo\n     * @param toInd {Number}\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    sliceTo = (toInd, xs) => slice(0, toInd, xs),\n\n    /**\n     * Slices a copy of list.\n     * @function _listOpUtils.sliceFrom\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    copy = xs => sliceFrom(0, xs),\n\n    /**\n     * Slices a copy of list.\n     * @function _listOpUtils.sliceCopy\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    sliceCopy = copy,\n\n    /**\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\n     * @function module:_listOpsUtils.genericAscOrdering\n     * @param a {*}\n     * @param b {*}\n     * @returns {number}\n     */\n    genericAscOrdering = (a, b) => {\n        if (a > b) { return 1; }\n        else if (a < b) { return -1; }\n        return 0;\n    },\n\n    /**\n     * Returns length of all passed lists in list.\n     * @function module:_listOpsUtils.lengths\n     * @param lists ...{Array|String|*}\n     * @returns {Array|String|*}\n     */\n    lengths = (...lists) => length(lists) ? _map(length, lists) : [],\n\n    /**\n     * @function module:_listOpsUtils.lengthsToSmallest\n     * @param lists {...(Array|String|*)}\n     * @returns {Array|String|*}\n     */\n    lengthsToSmallest = (...lists) => {\n        const listLengths = apply(lengths, lists),\n            smallLen = Math.min.apply(Math, listLengths);\n        return _map((list, ind) => listLengths[ind] > smallLen ?\n            sliceTo(smallLen, list) : copy(list), lists);\n    },\n\n    /**\n     * Reduces until predicate.\n     * @param pred\n     * @param op\n     * @param agg\n     * @param arr\n     * @returns {*}\n     */\n    reduceUntil = (pred, op, agg, arr) => {\n        const limit = length(arr);\n        if (!limit) { return agg; }\n        let ind = 0,\n            result = agg;\n        for (; ind < limit; ind++) {\n            if (pred(arr[ind], ind, arr)) { break; }\n            result = op(result, arr[ind], ind, arr);\n        }\n        return result;\n    },\n\n    /**\n     * Reduces until predicate (from the right).\n     * @param pred\n     * @param op\n     * @param agg\n     * @param arr\n     * @returns {*}\n     */\n    reduceRightUntil = (pred, op, agg, arr) => {\n        const limit = length(arr);\n        if (!limit) { return agg; }\n        let ind = limit - 1,\n            result = agg;\n        for (; ind >= 0; ind--) {\n            if (pred(arr[ind], ind, arr)) { break; }\n            result = op(result, arr[ind], ind, arr);\n        }\n        return result;\n    },\n\n    reduce = (operation, agg, arr) =>\n        reduceUntil(\n            alwaysFalse,            // until-predicate\n            operation,              // operation\n            agg,                    // aggregator\n            arr),                   // list\n\n    reduceRight = (operation, agg, arr) =>\n        reduceRightUntil(\n            alwaysFalse,            // until-predicate\n            operation,              // operation\n            agg,                    // aggregator\n            arr),                   // list\n\n    /**\n     * Gets last index of a list/list-like (Array|String|Function etc.).\n     * @function module:_listOpUtilslastIndex\n     * @param x {Array|String|*} - list like or list.\n     * @returns {Number} - `-1` if no element found.\n     */\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\n\n    /**\n     * Finds index in string or list.\n     * @function module:_listOpUtilsfindIndexWhere\n     * @param pred {Function} - Predicate<element, index, arr>.\n     * @param arr {Array|String}\n     * @returns {Number} - `-1` if predicate not matched else `index` found\n     */\n    findIndexWhere = (pred, arr) => {\n        let ind = -1,\n            predicateFulfilled = false;\n        const limit = length(arr);\n        while (ind < limit && !predicateFulfilled) {\n            predicateFulfilled = pred(arr[++ind], ind, arr);\n        }\n        return ind;\n    },\n\n    /**\n     * Finds index in list from right to left.\n     * @function module:_listOpUtilsfindIndexWhereRight\n     * @param pred {Function} - Predicate<element, index, arr>.\n     * @param arr {Array|String}\n     * @returns {Number} - `-1` if predicate not matched else `index` found\n     */\n    findIndexWhereRight = (pred, arr) => {\n        const limit = length(arr);\n        let ind = limit,\n            predicateFulfilled = false;\n        for (; ind >= 0 && !predicateFulfilled; --ind) {\n            predicateFulfilled = pred(arr[ind], ind, arr);\n        }\n        return ind;\n    },\n\n    /**\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {Array|undefined}\n     */\n    findIndicesWhere = (pred, xs) => {\n        if (!xs || !xs.length) { return undefined; }\n        const limit = length(xs);\n        let ind = 0,\n            out = [];\n        for (; ind < limit; ind++) {\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\n        }\n        return out.length ? out : undefined;\n    },\n\n    /**\n     * @function module:_listOpUtilsfind\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    findWhere = (pred, xs) => {\n        let ind = 0,\n            limit = length(xs);\n        if (!limit) { return; }\n        for (; ind < limit; ind++) {\n            let elm = xs[ind];\n            if (pred(elm, ind, xs)) { return elm; }\n        }\n    }\n\n;\n","/**\n * List operations module (un-curried version).\n * @module _listOps\n * @private\n */\nimport {\n    concat as listAppend,\n    indexOf, slice, includes\n}\n                            from '../_jsPlatform/_list';\n\nimport {apply}              from '../_jsPlatform/_function';\nimport {negateP, negateF}   from '../_functionOps/_negate';\nimport {isTruthy, isFalsy}  from '../../booleanOps';\nimport {prop, length}       from '../_objectOps/_objectOps';\nimport _map                 from './_map';\n\nimport {\n    sliceFrom, sliceTo, lengths,\n    lengthsToSmallest, aggregateArr,\n    reduceUntil, reduce, reduceRight, lastIndex,\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\n    findWhere, copy, genericAscOrdering\n}\n    from './_utils';\n\nexport {_map};\n\nexport const\n\n    /**\n     * Append two lists, i.e.,\n     * ```\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\n     * ```\n     * If the first list is not finite, the result is the first list.\n     * @haskellType `append :: List a => a -> a -> a`\n     * @function module:_listOps._append\n     * @param xs1 {Array} - list or list like.\n     * @param xs2 {Array} - list or list like.\n     * @returns {Array} - Same type as list like passed in.\n     */\n    _append = listAppend,\n\n    /**\n     * Append two or more lists, i.e., same as `_append` but for two ore more lists.\n     * @haskellType `appendMany :: List a => a -> [a] -> a\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\n     * @function module:_listOps._appendMany\n     * @param args ...{Array} - Lists or lists likes.\n     * @returns {Array} - Same type as first list or list like passed in.\n     */\n    _appendMany = (...args) => {\n        if (length(args)) { return apply(listAppend, args); }\n        throw new Error('`_appendMany` requires at least one arg.');\n    },\n\n    /**\n     * Returns head of list (first item of list).\n     * @haskellType `head :: [a] -> a`\n     * @function module:_listOps._head\n     * @param x {Array|String}\n     * @returns {*} - First item from list\n     */\n    _head = x => x[0],\n\n    /**\n     * Returns last item of list.\n     * @haskellType `last :: [a] -> a`\n     * @function module:_listOps._last\n     * @param xs {Array|String}\n     * @returns {*}\n     */\n    _last = xs => xs[lastIndex(xs)],\n\n    /**\n     * Returns tail part of list (everything after the first item as new list).\n     * @haskelType `tail :: [a] -> [a]`\n     * @function module:_listOps._tail\n     * @param xs {Array}\n     * @returns {Array}\n     */\n    _tail = xs => sliceFrom(1, xs),\n\n    /**\n     * Returns everything except last item of list as new list.\n     * @haskellType `init :: [a] -> [a]`\n     * @function module:_listOps._init\n     * @param xs {Array|String}\n     * @returns {Array|String}\n     */\n    _init = xs => sliceTo(lastIndex(xs), xs),\n\n    /**\n     * Returns `head` and `tail` of passed in list/string in a tuple.\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\n     * @function module:_listOps._uncons\n     * @param xs {Array|String}\n     * @returns {Array|undefined}\n     */\n    _uncons = xs =>\n        !xs || length(xs) === 0 ? undefined : [_head(xs), _tail(xs)],\n\n    /**\n     * Returns `tail` and `head` of passed in list/string in a tuple.\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\n     * @function module:_listOps._unconsr\n     * @param xs {Array|String}\n     * @returns {Array|String|*|undefined}\n     */\n    _unconsr = xs => !xs || length(xs) === 0 ? undefined : [_init(xs), _last(xs)],\n    \n    /**\n     * Concatenates all the elements of a container of lists.\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\n     * @function module:_listOps._concat\n     * @param xs {Array}\n     * @returns {Array}\n     */\n    _concat = xs => !length(xs) ? copy(xs) : apply(_appendMany, xs),\n\n    /**\n     * Map a function over all the elements of a container and concatenate the resulting lists.\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\n     * @function module:_listOps._concatMap\n     * @param fn {Function}\n     * @param foldableOfA {Array}\n     * @returns {Array}\n     */\n    _concatMap = (fn, foldableOfA) => _concat(_map(fn, foldableOfA)),\n\n    /**\n     * Returns a copy of the passed in list reverses.\n     * @haskellType `reverse :: [a] -> [a]`\n     * @function module:_listOps._reverse\n     * @param x {Array}\n     * @returns {Array}\n     */\n    _reverse = x => _foldr((agg, item) => (agg.push(item), agg), [], x),\n\n    /**\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\n     * @function module:_listOps._intersperse\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\n     *  it typed) so `between` can be any value.\n     * @param between {*} - Should be of the same type of elements contained in list.\n     * @param arr {Array} - List.\n     * @returns {Array}\n     */\n    _intersperse = (between, arr) => {\n        const limit = length(arr),\n            lastInd = limit - 1,\n            out = [];\n        if (!limit) {\n            return out;\n        }\n        return _foldl((agg, item, ind) => (\n                ind === lastInd ?\n                    agg.push(item) :\n                    agg.push(item, between),\n                agg\n            ), out, arr);\n    },\n\n    /**\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\n     * @function module:_listOps._intercalate\n     * @param xs {Array}\n     * @param xss {Array}\n     * @returns {Array}\n     */\n    _intercalate = (xs, xss) => _concat(_intersperse(xs, xss)),\n\n    /**\n     * Transposes rows and columns into lists by index;  E.g.,\n     * Haskell example:\n     * ```\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\n     *\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\n     * ```\n     * @note from columns to rows.\n     * @note Empty lists are ignored.\n     * @todo upgrade this function to support lists of strings.\n     * @haskellType `transpose :: [[a]] -> [[a]]`\n     * @function module:_listOps._transpose\n     * @param xss {Array}\n     * @returns {Array}\n     */\n    _transpose = xss => {\n        let numLists = length(xss),\n            ind = 0, ind2;\n        if (!numLists) {\n            return [];\n        }\n        const listLengths = apply(lengths, xss),\n            longestListLen = _maximum(listLengths),\n            outLists = [];\n        for (; ind < longestListLen; ind += 1) {\n            const outList = [];\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\n                if (listLengths[ind2] < ind + 1) {\n                    continue;\n                }\n                outList.push(xss[ind2][ind]);\n            }\n            outLists.push(outList);\n        }\n        return _filter(x => length(x), outLists);\n    },\n\n    /**\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\n     * the length of the passed in sequence so: 2^length(xs)).\n     * Note: The return value doubles per index/character passed in so use with caution!\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\n     * @function module:_listOps._subsequences\n     * @jsperftest https://jsperf.com/subsequences\n     * @param xs {Array|String}\n     * @returns {Array.<Array>}\n     */\n    _subsequences = xs => {\n        const listLen = length(xs),\n            len = Math.pow(2, listLen),\n            out = [];\n        for (let i = 0; i < len; i += 1) {\n            let entry = [];\n            for (let j = 0; j < listLen; j += 1) {\n                if (i & (1 << j)) {\n                    entry.push(xs[j]);\n                }\n            }\n            out.push(entry);\n        }\n        return out;\n    },\n\n    /**\n     * Returns an array with the given indices swapped.\n     * @function module:_listOps._swapped\n     * @param ind1 {Number}\n     * @param ind2 {Number}\n     * @param list {Array}\n     * @returns {Array} - Copy of incoming with swapped values at indices.\n     */\n    _swapped = (ind1, ind2, list) => {\n        const out = copy(list),\n            tmp = out[ind1];\n        out[ind1] = out[ind2];\n        out[ind2] = tmp;\n        return out;\n    },\n\n    /**\n     * Returns a list of permutations for passed in list.\n     *  Use caution with lists above a length of 15 (will take long due to nature of\n     *  algorithm).\n     * @function module:_listOps._permutations\n     * @param xs {Array} - List.\n     * @returns {Array<Array|String|*>} - Array of permutations.\n     */\n    _permutations = xs => {\n        const limit = length(xs);\n\n        if (!limit || limit === 1) {\n            return [xs];\n        }\n\n        let list = copy(xs),\n            c = _repeat(limit, 0),\n            i = 0;\n\n        const out = [list];\n\n        for (; i < limit; i++) {\n            if (c[i] < i) {\n                list = _swapped(i % 2 === 0 ? 0 : c[i], i, list);\n                out.push(list);\n                c[i] += 1;\n                i = 0;\n                continue;\n            }\n            c[i] = 0;\n        }\n\n        return out;\n    },\n\n    /**\n     * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\n     * @function module:_listOps._foldl\n     * @param fn {Function}\n     * @param zero {*} - Aggregator.\n     * @param functor {Array}\n     * @returns {*} - Whatever type is lastly returned from `fn`.\n     */\n    _foldl = reduce,\n\n    /**\n     * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\n     * @function module:_listOps._foldr\n     * @param fn {Function}\n     * @param zero {*} - Aggregator.\n     * @param functor {Array}\n     * @returns {*} - Whatever type is lastly returned from `fn`.\n     */\n    _foldr = reduceRight,\n\n    /**\n     * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\n     * out from a copy of the container.\n     * @function module:_listOps._foldl1\n     * @param op {Function}\n     * @param xs {Array}\n     * @returns {*} - Whatever type is lastly returned from `op`.\n     */\n    _foldl1 = (op, xs) => {\n        const parts = _uncons(xs);\n        return !parts ? [] : reduce(op, parts[0], parts[1]);\n    },\n\n    /**\n     * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\n     * out from a copy of the container.\n     * @function module:_listOps._foldr1\n     * @param op {Function}\n     * @param xs {Array}\n     * @returns {*} - Whatever type is lastly returned from `op`.\n     */\n    _foldr1 = (op, xs) => {\n        const parts = _unconsr(xs);\n        return !parts ? [] : reduceRight(op, parts[1], parts[0]);\n    },\n\n    /**\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\n     * @function module:_listOps._mapAccumL\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\n     * @param xs {Array} - list type.\n     * @return {Array} - [aggregated, list]\n     */\n    _mapAccumL = (op, zero, xs) => {\n        const list = copy(xs),\n            limit = length(xs);\n        if (!limit) {\n            return [zero, list];\n        }\n        let ind = 0,\n            agg = zero,\n            mapped = [],\n            tuple;\n        for (; ind < limit; ind++) {\n            tuple = op(agg, list[ind], ind);\n            agg = tuple[0];\n            mapped = tuple[1];\n        }\n        return [agg, mapped];\n    },\n\n    /**\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\n     * @function module:_listOps._mapAccumR\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\n     * @param xs {Array} - list type.\n     * @return {Array} - [aggregated, list]\n     */\n    _mapAccumR = (op, zero, xs) => {\n        const list = copy(xs),\n            limit = length(xs);\n        if (!limit) {\n            return [zero, list];\n        }\n        let ind = limit - 1,\n            agg = zero,\n            mapped = [],\n            tuple;\n        for (; ind >= 0; ind--) {\n            tuple = op(agg, list[ind], ind);\n            agg = tuple[0];\n            mapped = tuple[1];\n        }\n        return [agg, mapped];\n    },\n\n    /**\n     * iterate f x returns an infinite list of repeated applications of f to x.\n     * @function module:_listOps._iterate\n     * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\n     * @param limit {Number}\n     * @param op {Function} - Operation.\n     * @param x {*} - Starting point.\n     * @returns {*}\n     */\n    _iterate = (limit, op, x) => {\n        let ind = 0,\n            out = [],\n            lastX = x;\n        for (; ind < limit; ind += 1) {\n            out.push(lastX);\n            lastX = op(lastX, ind);\n        }\n        return out;\n    },\n\n    /**\n     * Repeats `x` `limit` number of times.\n     * @function module:_listOps._repeat\n     * @param limit {Number}\n     * @param x {*}\n     * @return {Array}\n     */\n    _repeat = (limit, x) => _iterate(limit, a => a, x),\n\n    /**\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\n     * @function module:_listOps._replicate\n     * @param limit {Number}\n     * @param x {*}\n     * @return {Array}\n     */\n    _replicate = _repeat,\n\n    /**\n     * Replicates a list `limit` number of times and appends the results (concat)\n     * @function module:_listOps._cycle\n     * @param limit {Number}\n     * @param xs {Array}\n     * @returns {Array}\n     */\n    _cycle = (limit, xs) => _concat(_replicate(limit, xs)),\n\n    /**\n     * Unfolds a value into a list of somethings.\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\n     * @function module:_listOps._unfoldr\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\n     * @param x {*} - Starting parameter to unfold from.\n     * @returns {Array} - An array of whatever you return from `op` yielded.\n     */\n    _unfoldr = (op, x) => {\n        let ind = 0,\n            out = [],\n            resultTuple = op(x, ind, out);\n        while (resultTuple) {\n            out.push(resultTuple[0]);\n            resultTuple = op(resultTuple[1], ++ind, out);\n        }\n        return out;\n    },\n\n    /**\n     * Finds index in string or list (alias for `findIndex`).\n     * @function module:_listOps._findIndex\n     * @param pred {Function} - Predicate<element, index, arr>.\n     * @param arr {Array|String}\n     * @returns {Number} - `-1` if predicate not matched else `index` found\n     */\n    _findIndex = findIndexWhere,\n\n    /**\n     * @function module:_listOps._findIndices\n     * @param pred {Function}\n     * @param xs {Array} - list or list like.\n     * @returns {Array|undefined}\n     */\n    _findIndices = findIndicesWhere,\n\n    /**\n     * @function module:_listOps._elemIndex\n     * @param x {*} - Element to search for.\n     * @param xs {Array} - list or list like.\n     * @returns {*}\n     */\n    _elemIndex = (x, xs) => {\n        const foundInd = indexOf(x, xs);\n        return foundInd !== -1 ? foundInd : undefined;\n    },\n\n    /**\n     * @function module:_listOps._elemIndices\n     * @param value {*} - Element to search for.\n     * @param xs {Array} - list or list like.\n     * @returns {*}\n     */\n    _elemIndices = (value, xs) => _findIndices(x => x === value, xs),\n\n    /**\n     * Takes `n` items from start of list to `limit` (exclusive).\n     * @function module:_listOps._take\n     * @param list {Array|String}\n     * @param limit {Number}\n     * @returns {String|Array} - Passed in type's type\n     */\n    _take = (limit, list) => sliceTo(limit, list),\n\n    /**\n     * Drops `n` items from start of list to `count` (exclusive).\n     * @function module:_listOps._take\n     * @param list {Array|String}\n     * @param count {Number}\n     * @returns {String|Array} - Passed in type's type\n     */\n    _drop = (count, list) => sliceFrom(count, list),\n\n    /**\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\n     * given index in second part of returned list)).\n     * @function module:_listOps._splitAt\n     * @param ind {Number} - Index to split at.\n     * @param list {Array} - functor (list or string) to split.\n     * @returns {Array} - Array of whatever type `x` was when passed in\n     */\n    _splitAt = (ind, list) => [ sliceTo(ind, list), sliceFrom(ind, list) ],\n\n    /**\n     * Gives an list with passed elements while predicate was true.\n     * @function module:_listOps._takeWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @returns {Array}\n     */\n    _takeWhile = (pred, list) =>\n        reduceUntil(\n            negateP(pred),  // predicate\n            aggregateArr,   // operation\n            [],             // aggregator\n            list\n        ),\n\n    /**\n     * Returns an list without elements that match predicate.\n     * @function module:_listOps._dropWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @refactor\n     * @returns {Array|String}\n     */\n    _dropWhile = (pred, list) => {\n        const limit = length(list),\n            splitPoint =\n                findIndexWhere((item, ind, list2) =>\n                    !pred(list[ind], ind, list2), list);\n\n        return splitPoint === -1 ?\n            sliceTo(limit, list) :\n            slice(splitPoint, limit, list);\n    },\n\n    /**\n     * @function module:_listOps._dropWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @refactor\n     * @returns {Array|String}\n     */\n    _dropWhileEnd = (pred, list) => {\n        const limit = length(list),\n            splitPoint =\n                findIndexWhereRight((item, ind, list2) =>\n                    !pred(list[ind], ind, list2), list);\n\n        return splitPoint === -1 ?\n            sliceTo(limit, list) :\n            sliceTo(splitPoint + 1, list);\n    },\n\n    /**\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\n     * the second list in the tuple is a list of the remaining elements in the given list.\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\n     * @function module:_listOps._span\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\n     * @param list {Array} - Predicate<item, index, originalArrayOrString>\n     * @returns {Array} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\n     */\n    _span = (pred, list) => {\n        const splitPoint = findIndexWhere(negateP(pred), list);\n        return splitPoint === -1 ?\n            _splitAt(0, list) : _splitAt(splitPoint, list);\n    },\n\n    /**\n     * breakOnList, applied to a predicate p and a list xs, returns a tuple\n     * where first element is longest prefix (possibly empty) of xs of elements\n     * that do not satisfy p and second element is the remainder of the list:\n     * @haskellExample\n     * Replace `break` with `breakOnList` for our version.\n     * ```\n     * break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\n     * break (< 9) [1,2,3] == ([],[1,2,3])\n     * break (> 9) [1,2,3] == ([1,2,3],[])\n     * ```\n     * @function module:_listOps._breakOnList\n     * @param pred {Function}\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    _breakOnList = (pred, list) => {\n        const splitPoint = findIndexWhere(pred, list);\n        return splitPoint === -1 ?\n            _splitAt(0, list) : _splitAt(splitPoint, list);\n    },\n\n    /**\n     * Gets item at index.\n     * @function module:_listOps._at\n     * @param ind {Number} - Index.\n     * @param xs {Array} - list or list like.\n     * @returns {*|undefined} - Item or `undefined`.\n     */\n    _at = prop,\n\n    /**\n     * Find an item in structure of elements based on given predicate (`pred`).\n     * @function module:_listOps._find\n     * @param pred {Function}\n     * @param xs {Array} - list or list like.\n     * @returns {*} - Found item.\n     */\n    _find = findWhere,\n\n    /**\n     * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\n     * @function module:_listOps._filter\n     * @param pred {Function}\n     * @param xs {Array} - list or list like.\n     * @returns {Array} - Structure of filtered elements.\n     */\n    _filter = (pred, xs) => {\n        let ind = 0,\n            limit = length(xs),\n            out = [];\n        if (!limit) {\n            return out;\n        }\n        for (; ind < limit; ind++) {\n            if (pred(xs[ind], ind, xs)) {\n                out.push(xs[ind]);\n            }\n        }\n        return out;\n    },\n\n    /**\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\n     * do not match the tuple are in second list in the returned tuple.\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\n     * @function module:_listOps._partition\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\n     * @param list {Array}\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\n     */\n    _partition = (pred, list) =>\n        !length(list) ?\n            [[], []] :\n                [_filter(pred, list), _filter(negateP(pred), list)],\n\n    /**\n     * Returns a boolean indicating whether an element exists in given structure of elements.\n     * @function module:_listOps._elem\n     * @param element {*}\n     * @param xs {Array}\n     * @returns {Boolean}\n     */\n    _elem = includes,\n\n    /**\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\n     * @function module:_listOps._notElem\n     * @param element {*}\n     * @param xs {Array}\n     * @returns {Boolean}\n     */\n    _notElem = negateF(includes),\n\n    /**\n     * Same as _listOps._at - Returns property value at key/indice.\n     * @function module:_objectOps._lookup\n     * @type {module:_objectOps.prop}\n     */\n    _lookup = _at,\n\n    /**\n     * Checks if list `xs1` is a prefix of list `xs2`\n     * @function module:_listOps._isPrefixOf\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {boolean}\n     */\n    _isPrefixOf = (xs1, xs2) => {\n        const limit1 = length(xs1),\n            limit2 = length(xs2);\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\n            return false;\n        }\n        let ind = 0;\n        for (; ind < limit1; ind++) {\n            if (xs1[ind] !== xs2[ind]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /**\n     * Checks if list `xs1` is a suffix of list `xs2`\n     * @function module:_listOps._isSuffixOf\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {boolean}\n     */\n    _isSuffixOf = (xs1, xs2) => {\n        const limit1 = length(xs1),\n            limit2 = length(xs2);\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\n            return false;\n        }\n        let ind1 = limit1 - 1,\n            ind2 = limit2 - 1;\n        for (; ind1 >= 0; ind1--) {\n            if (xs1[ind1] !== xs2[ind2]) {\n                return false;\n            }\n            ind2 -= 1;\n        }\n        return true;\n    },\n\n    /**\n     * Checks if list `xs1` is an infix of list `xs2`\n     * @function module:_listOps._isInfixOf\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {boolean}\n     */\n    _isInfixOf = (xs1, xs2) => {\n        const limit1 = length(xs1),\n            limit2 = length(xs2);\n        if (limit2 < limit1 || !limit1 || !limit2) {\n            return false;\n        }\n        let ind1,\n            foundLen,\n            ind = 0;\n        for (; ind < limit2; ind += 1) {\n            foundLen = 0;\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\n                if (xs2[ind1 + ind] === xs1[ind1]) {\n                    foundLen += 1;\n                }\n                if (foundLen === limit1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Checks if list `xs1` is a sub-sequence of list `xs2`\n     * @function module:_listOps._isPrefixOf\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {boolean}\n     */\n    _isSubsequenceOf = (xs1, xs2) => {\n        const len = Math.pow(2, length(xs2)),\n            lenXs1 = length(xs1);\n        let foundLen,\n            i;\n        for (i = 0; i < len; i += 1) {\n            foundLen = 0;\n            for (let j = 0; j < len; j += 1) {\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\n                    foundLen += 1;\n                }\n                if (foundLen === lenXs1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    /**\n     * The group function takes a list and returns a list of lists such that\n     *  the concatenation of the result is equal to the argument. Moreover, each\n     *  sublist in the result contains only equal elements. For example,\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\n     * It is a special case of groupBy, which allows the programmer to supply\n     *  their own equality test.\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\n     * @function module:_listOps._group\n     * @param xs {Array}\n     * @returns {Array<Array|String|*>|*}\n     */\n    _group = xs => _groupBy((a, b) => a === b, xs),\n\n    /**\n     * Allows you to group items in a list based on your supplied equality check.\n     * @note Sames `group` but allows you to specify equality operation.\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\n     * @function module:_listOps._groupBy\n     * @param equalityOp {Function}\n     * @param xs {Array}\n     * @returns {*}\n     */\n    _groupBy = (equalityOp, xs) => {\n        const limit = length(xs);\n        if (!limit) {\n            return copy(xs);\n        }\n        let ind = 0,\n            prevItem,\n            item,\n            predOp = x => {\n                if (equalityOp(x, prevItem)) {\n                    ind++;\n                }\n                if (equalityOp(x, item)) {\n                    prevItem = x;\n                    return true;\n                }\n                return false;\n            },\n            agg = [];\n        for (; ind < limit; ind += 1) {\n            item = xs[ind];\n            agg.push(_takeWhile(predOp, slice(ind, limit, xs)));\n        }\n        return agg;\n    },\n\n    /**\n     * The inits function returns all initial segments of the argument, shortest first. For example,\n     * ```\n     * shallowEquals(inits('abc'), ['','a','ab','abc'])\n     * ```\n     * @function module:_listOps._inits\n     * @haskellType `inits :: [a] -> [[a]]`\n     * @param xs {Array}\n     * @returns {Array}\n     */\n    _inits = xs => {\n        let limit = length(xs),\n            ind = 0,\n            agg = [];\n        if (!limit) {\n            return [];\n        }\n        for (; ind <= limit; ind += 1) {\n            agg.push(sliceTo(ind, xs));\n        }\n        return agg;\n    }, //_map(list => _init(list), xs),\n\n    /**\n     * The inits function returns all initial segments of the argument, shortest first. For example,\n     * ```\n     * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\n     * ```\n     * @function module:_listOps._tails\n     * @haskellType `tails :: [a] -> [[a]]`\n     * @param xs {Array}\n     * @returns {Array}\n     */\n    _tails = xs => {\n        let limit = length(xs),\n            ind = 0,\n            agg = [];\n        if (!limit) {\n            return [];\n        }\n        for (; ind <= limit; ind += 1) {\n            agg.push(slice(ind, limit, xs));\n        }\n        return agg;\n    }, //_map(list => tail(list), xs),\n\n    /**\n     * Strips prefix list from given list\n     * @function module:_listOps._stripPrefix\n     * @param prefix {Array|String|*}\n     * @param list {Array|string|*}\n     * @returns {Array|*}\n     */\n    _stripPrefix = (prefix, list) =>\n        _isPrefixOf(prefix, list) ?\n            _splitAt(length(prefix), list)[1] :\n            copy(list),\n\n    /**\n     * zip takes two lists and returns a list of corresponding pairs.\n     * If one input list is short, excess elements of the longer list are discarded.\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\n     * @function module:_listOps._zip\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zip = (arr1, arr2) => {\n        if (!length(arr1) || !length(arr2)) {\n            return [];\n        }\n        const [a1, a2] = lengthsToSmallest(arr1, arr2);\n        return reduce((agg, item, ind) =>\n                aggregateArr(agg, [item, a2[ind]]),\n            [], a1);\n    },\n\n    /**\n     * zipN takes one or more lists and returns a list containing lists of all indices\n     * at a given index, index by index.\n     * If one input list is short, excess elements of the longer list are discarded.\n     * @function module:_listOps._zipN\n     * @param lists {Array|String} - One ore more lists of the same type.\n     * @returns {Array}\n     */\n    _zipN = (...lists) => {\n        const trimmedLists = apply(lengthsToSmallest, _filter(length, lists)),\n            lenOfTrimmed = length(trimmedLists);\n        if (!lenOfTrimmed) {\n            return [];\n        }\n        else if (lenOfTrimmed === 1) {\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\n        }\n        return reduce((agg, item, ind) =>\n                aggregateArr(agg, _map(xs => xs[ind], trimmedLists)),\n            [], trimmedLists[0]);\n    },\n\n    /**\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\n     * @function module:_listOps._zip3\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zip3 = (arr1, arr2, arr3) => _zipN(arr1, arr2, arr3),\n\n    /**\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\n     * @function module:_listOps._zip4\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @param arr4 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zip4 = (arr1, arr2, arr3, arr4) => _zipN(arr1, arr2, arr3, arr4),\n\n    /**\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\n     * @function module:_listOps._zip5\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @param arr4 {Array}\n     * @param arr5 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zip5 = (arr1, arr2, arr3, arr4, arr5) => _zipN(arr1, arr2, arr3, arr4, arr5),\n\n    /**\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\n     * zipWith generalises zip by zipping with the function given as the\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\n     * @note `_|_` means bottom or perpetual (@see\n     *  - https://wiki.haskell.org/Bottom\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\n     *  )\n     * @example\n     * ```\n     * zipWith f [] _|_ = []\n     * ```\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\n     * @function module:_listOps._zipWith\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\n     *  E.g., ` op :: a -> b -> (a, b)`\n     * @param xs1 {Array}\n     * @param xs2 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zipWith = (op, xs1, xs2) => {\n        if (!length(xs1) || !length(xs2)) {\n            return [];\n        }\n        const [a1, a2] = lengthsToSmallest(xs1, xs2);\n        return reduce((agg, item, ind) =>\n                aggregateArr(agg, op(item, a2[ind])),\n            [], a1);\n    },\n\n    /**\n     * Zips all given lists with tupling function. Note: Haskell types do not have\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\n     *  is left there for general purpose not for exactness as is told by aforementioned.\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\n     *  of lists to zip.\n     * @function module:_listOps._zipWithN\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\n     * @param lists ...{Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zipWithN = (op, ...lists) => {\n        const trimmedLists = apply(lengthsToSmallest, lists),\n            lenOfTrimmed = length(trimmedLists);\n        if (!lenOfTrimmed) {\n            return [];\n        }\n        else if (lenOfTrimmed === 1) {\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\n        }\n        return reduce((agg, item, ind) =>\n                aggregateArr(agg, apply(op, _map(xs => xs[ind], trimmedLists))),\n            [], trimmedLists[0]);\n    },\n\n    /**\n     * Zips 3 lists with tupling function.\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\n     * @function module:_listOps._zipWith3\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\n     * @param xs1 {Array}\n     * @param xs2 {Array}\n     * @param xs3 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zipWith3 = (op, xs1, xs2, xs3) => _zipWithN(op, xs1, xs2, xs3),\n\n    /**\n     * Zips 4 lists with tupling function.\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\n     * @function module:_listOps._zipWith4\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\n     * @param xs1 {Array}\n     * @param xs2 {Array}\n     * @param xs3 {Array}\n     * @param xs4 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zipWith4 = (op, xs1, xs2, xs3, xs4) => _zipWithN(op, xs1, xs2, xs3, xs4),\n\n    /**\n     * Zips 5 lists.\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\n     * @function module:_listOps._zipWith5\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\n     * @param xs1 {Array}\n     * @param xs2 {Array}\n     * @param xs3 {Array}\n     * @param xs4 {Array}\n     * @param xs5 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    _zipWith5 = (op, xs1, xs2, xs3, xs4, xs5) => _zipWithN(op, xs1, xs2, xs3, xs4, xs5),\n\n    /**\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\n     * @function module:_listOps._unzip\n     * @param arr {Array|*}\n     * @returns {Array|*}\n     */\n    _unzip = arr =>\n        _foldl((agg, item) => {\n            agg[0].push(item[0]);\n            agg[1].push(item[1]);\n            return agg;\n        }, [[], []], arr),\n\n    /**\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\n     * @todo Should support other list types (should not have `push` hard coded instead should use `mappend` (if available)).\n     * @function module:_listOps._unzip\n     * @param list {Array|*} - List of tuples (lists).\n     * @returns {Array|*}\n     */\n    _unzipN = list => {\n        if (!length(list)) {\n            return [];\n        }\n        const lenItem0 = length(list[0]);\n        let zero = lenItem0 ?\n            _unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\n            [];\n        return _foldl((agg, item) => {\n            agg.forEach((outList, ind) => outList.push(item[ind]));\n            return agg;\n        }, zero, list);\n    },\n\n    /**\n     * Returns true if any item in container passes predicate `p`.\n     * @function module:_listOps._any\n     * @param p {Function} - Predicate.\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    _any = (p, xs) => {\n        let ind = 0,\n            limit = length(xs);\n        if (!limit) {\n            return false;\n        }\n        for (; ind < limit; ind += 1) {\n            if (p(xs[ind])) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Returns true if all items in container pass predicate `p`.\n     * @function module:_listOps._all\n     * @param p {Function} - Predicate.\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    _all = (p, xs) => {\n        const limit = length(xs);\n        let ind = 0;\n        if (limit === 0) {\n            return false;\n        }\n        for (; ind < limit; ind++) {\n            if (!p(xs[ind], ind, xs)) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /**\n     * Conjuction of container of bools (or truthy and/or falsy values);  Returns\n     * `true` if all in container are 'truthy' else returns `false`\n     * @function module:_listOps._and\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    _and = xs => _all(isTruthy, xs),\n\n    /**\n     * Returns a boolean indicating whether any item in container is 'truthy' or not.\n     * **Note** The haskell type for this function only takes two items, but here\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\n     * @function module:_listOps._or\n     * @haskellType `or :: Bool -> Bool -> Bool`\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    _or = xs => _any(isTruthy, xs),\n\n    /**\n     * Returns a boolean indicating whether all items in container are 'falsy' or not.\n     * **Note** The haskell type for this function only takes two items, but here\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\n     * @function module:_listOps._not\n     * @haskellType `not :: Bool -> Bool`\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    _not = xs => _all(isFalsy, xs),\n\n    /**\n     * Computes the sum of the numbers of a structure.\n     * @function module:_listOps._sum\n     * @haskellType `sum :: (List t, Num a) => t a -> a`\n     * @param list {Array|String}\n     * @returns {Number}\n     */\n    _sum = list => _foldl((agg, x) => agg + x, 0, list),\n\n    /**\n     * Computes the product of the numbers of a structure.\n     * @function module:_listOps._product\n     * @haskellType `product :: (List t, Num a) => t a -> a`\n     * @param list {Array|String}\n     * @returns {Number}\n     */\n    _product = list => _foldl((agg, x) => agg * x, 1, list),\n\n    /**\n     * Returns the largest element in a non-empty structure of elements.\n     * @function module:_listOps._maximum\n     * @haskellType `maximum :: forall a . Ord a => t a -> a`\n     * @param list {Array|String}\n     * @returns {*} - Whatever type the array is made of (if any).\n     */\n    _maximum = list => _last(_sortBy(genericAscOrdering, list)),\n\n    /**\n     * Returns the smallest element in a non-empty structure of elements.\n     * @function module:_listOps._minimum\n     * @haskellType `minimum :: forall a . Ord a => t a -> a`\n     * @param list {Array|String}\n     * @returns {*} - Whatever type the array is made of (if any).\n     */\n    _minimum = list => _head(_sortBy(genericAscOrdering, list)),\n\n    /**\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\n     * ```\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\n     * ```\n     * Also note that:\n     * ```\n     * last (scanl f z xs) == foldl f z xs.\n     * ```\n     * @function module:_listOps._scanl\n     * @param fn {Function}\n     * @param zero {*}\n     * @param xs {Array}\n     * @returns {Array|*}\n     */\n    _scanl = (fn, zero, xs) => {\n        if (!xs || !length(xs)) {\n            return [];\n        }\n        const limit = length(xs);\n        let ind = 0,\n            result = zero,\n            out = [];\n        while (ind < limit) {\n            result = fn(result, xs[ind], ind, xs);\n            out.push(result);\n            ind++;\n        }\n        return out;\n    },\n\n    /**\n     * `scanl1` is a variant of `scanl` that has no starting value argument:\n     * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\n     * @function module:_listOps._scanl1\n     * @param fn {Function}\n     * @param xs {Array}\n     * @returns {Array|*}\n     */\n    _scanl1 = (fn, xs) => {\n        if (!xs || !xs.length) { return []; }\n        return _scanl(fn, _head(xs), _tail(xs));\n    },\n\n    /**\n     * Same as `scanl` but from the right (similiar to `foldr`'s relationship to `foldl`).\n     * Note also `scanr`'s relationship ot `foldr`:\n     * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\n     * @function module:_listOps._scanr\n     * @param fn {Function}\n     * @param zero {*}\n     * @param xs {Array}\n     * @returns {Array|*}\n     */\n    _scanr = (fn, zero, xs) => {\n        if (!xs || !length(xs)) {\n            return [];\n        }\n        const limit = length(xs);\n        let ind = limit - 1,\n            result = xs[0],\n            out = [];\n        while (ind > -1) {\n            result = fn(result, xs[ind], ind, xs);\n            out.push(result);\n            ind--;\n        }\n        return out;\n    },\n\n    /**\n     * Same as `scanr` but takes no zero/accumulator value.\n     * @function module:_listOps._scanr1\n     * @param fn {Function}\n     * @param xs {Array}\n     * @returns {Array|*}\n     */\n    _scanr1 = (fn, xs) => {\n        if (!xs || !xs.length) { return []; }\n        return _scanr(fn, _last(xs), _init(xs));\n    },\n\n    /**\n     * The nub function removes duplicate elements from a list.\n     * In particular, it keeps only the first occurrence of each element.\n     * (The name nub means `essence'.) It is a special case of nubBy, which\n     * allows the programmer to supply their own equality test.\n     * ```shallowCompare( nub ([1,2,3,4,3,2,1,2,4,3,5]), [1,2,3,4,5] )```\n     * @function module:_listOps._nub\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    _nub = list => _nubBy((a, b) => a === b, list),\n\n    /**\n     * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\n     * For example, `remove('a', 'banana') === 'bnana';`\n     * @function module:_listOps._remove\n     * @param x {*}\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    _remove = (x, list) => _removeBy((a, b) => a === b, x, list),\n\n    /**\n     * The sort function implements a stable sorting algorithm.\n     * It is a special case of sortBy, which allows the programmer\n     * to supply their own comparison function.\n     * ```shallowCompare(sort ([1,6,4,3,2,5]), [1,2,3,4,5,6]) // true```\n     * @function module:_listOps._sort\n     * @param xs {Array|String|*}\n     * @returns {Array}\n     */\n    _sort = xs => _sortBy(genericAscOrdering, xs),\n\n    /**\n     * Sort a list by comparing the results of a key function applied to each\n     * element. sortOn f is equivalent to sortBy (comparing f), but has the\n     * performance advantage of only evaluating f once for each element in the\n     * input list. This is called the decorate-sort-undecorate paradigm, or\n     * Schwartzian transform.\n     *\n     * Elements are arranged from from lowest to highest, keeping duplicates\n     * in the order they appeared in the input.\n     *\n     * Ex:\n     * ```\n     * shallowEquals(\n     *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\n     *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\n     * ) // true\n     * ```\n     * @function module:_listOps._sortOn\n     * @param valueFn {Function}\n     * @param xs {Array|String|*}\n     * @returns {Array}\n     */\n    _sortOn = (valueFn, xs) =>\n\n        // Un-decorate\n        _map(decorated => decorated[1],\n\n            // Decorate and sort\n            _sortBy(\n                // Ordering\n                ([a0], [b0]) => genericAscOrdering(a0, b0),\n\n                // Decorate\n                _map(item => [valueFn(item), item], xs)\n            )\n        ),\n\n    /**\n     * The sortBy function is the non-overloaded (in haskell terms) version of sort.\n     * @haskellExample ```\n     *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\n     *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\n     * ```\n     * @function module:_listOps._sortBy\n     * @param orderingFn {Function}\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    _sortBy = (orderingFn, xs) => copy(xs).sort(orderingFn || genericAscOrdering),\n\n    /**\n     * The insert function takes an element and a list and inserts the element\n     * into the list at the first position where it is less than or equal to the\n     * next element. In particular, if the list is sorted before the call, the\n     * result will also be sorted. It is a special case of insertBy, which allows\n     * the programmer to supply their own comparison function.\n     * @function module:_listOps._insert\n     * @param x {*}\n     * @param xs {Array|*}\n     * @returns {Array}\n     */\n    _insert = (x, xs) => {\n        if (!length(xs)) {\n            return [x];\n        }\n        const foundIndex = _findIndex(item => x <= item, xs);\n        return foundIndex === -1 ? [x] :\n            _concat(_intersperse([x], _splitAt(foundIndex, xs)));\n    },\n\n    /**\n     * A version of `insert` that allows you to specify the ordering of the inserted\n     * item;  Before/at, or after\n     * @function module:_listOps._insertBy\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\n     * @note `Ordering` === // something that is order-able\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\n     *  operated on by this functions logic.\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\n     * @param x {*} - Value to insert.\n     * @param xs {Array} - List to insert into (note new list is returned)\n     * @returns {Array} - New list.\n     */\n    _insertBy = (orderingFn, x, xs) => {\n        const limit = length(xs);\n        if (!limit) {\n            return [x];\n        }\n        let ind = 0;\n        for (; ind < limit; ind += 1) {\n            if (orderingFn(x, xs[ind]) <= 0) {\n                const parts = _splitAt(ind, xs);\n                return _concat([parts[0], [x], parts[1]]);\n            }\n        }\n        return aggregateArr(copy(xs), x);\n    },\n\n    /**\n     * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\n     * @function module:_listOps._nubBy\n     * @param pred {Function}\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    _nubBy = (pred, list) => {\n        if (!length(list)) {\n            return [];\n        }\n        const limit = length(list);\n        let ind = 0,\n            currItem,\n            out = [],\n            anyOp = storedItem => pred(currItem, storedItem);\n        for (; ind < limit; ind += 1) {\n            currItem = list[ind];\n            if (_any(anyOp, out)) {\n                continue;\n            }\n            out.push(currItem);\n        }\n        return out;\n    },\n\n    /**\n     * Behaves the same as `remove`, but takes a user-supplied equality predicate.\n     * @function module:_listOps._removeBy\n     * @param pred {Function}\n     * @param x {*}\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    _removeBy = (pred, x, list) => { // @todo optimize this implementation\n        const foundIndex = _findIndex(item => pred(x, item), list),\n            parts = _splitAt(foundIndex > -1 ? foundIndex : 0, list); // @todo correct this implementation\n        return _append(parts[0], _tail(parts[1]));\n    },\n\n    /**\n     * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\n     * occurrence of each element of the second list removed.\n     * @param pred {Function}\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {Array}\n     */\n    _removeFirstsBy = (pred, xs1, xs2) =>\n        _foldl((agg, x2) => _removeBy(pred, x2, agg), xs1, xs2),\n\n    /**\n     * Returns the union on elements matching boolean check passed in.\n     * @function module:_listOps._unionBy\n     * @param pred {Function} - `pred :: a -> a -> Bool`\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @returns {Array}\n     */\n    _unionBy = (pred, arr1, arr2) =>\n        _foldl((agg, b) => {\n                const alreadyAdded = _any(a => pred(a, b), agg);\n                return !alreadyAdded ? (agg.push(b), agg) : agg;\n            }, copy(arr1), arr2\n        ),\n\n    /**\n     * Creates a union on matching elements from array1.\n     * @function module:_listOps._union\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @returns {Array}\n     */\n    _union = (arr1, arr2) =>\n        _append(arr1,\n            _filter(elm => !includes(elm, arr1), arr2)),\n\n    /**\n     * Performs an intersection on list 1 with  elements from list 2.\n     * @function module:_listOps._intersect\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @returns {Array}\n     */\n    _intersect = (arr1, arr2) =>\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\n            _filter(elm => includes(elm, arr2), arr1),\n\n    /**\n     * Returns an intersection by predicate.\n     * @function module:_listOps._intersectBy\n     * @param pred {Function} - `pred :: a -> b -> Bool`\n     * @param list1 {Array}\n     * @param list2 {Array}\n     * @return {Array}\n     */\n    _intersectBy = (pred, list1, list2) =>\n        _foldl((agg, a) =>\n                _any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg\n            , [], list1),\n\n    /**\n     * Returns the difference of list 1 from list 2.\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\n     * @function module:_listOps._difference\n     * @param array1 {Array}\n     * @param array2 {Array}\n     * @returns {Array}\n     */\n    _difference = (array1, array2) => { // augment this with max length and min length ordering on op\n        if (array1 && !array2) {\n            return copy(array1);\n        }\n        else if (!array1 && array2 || (!array1 && !array2)) {\n            return [];\n        }\n        return reduce((agg, elm) =>\n                !includes(elm, array2) ? (agg.push(elm), agg) : agg\n            , [], array1);\n    },\n\n    /**\n     * Returns the complement of list 0 and the reset of the passed in arrays.\n     * @function module:_listOps._complement\n     * @param arr0 {Array}\n     * @param arrays {...Array}\n     * @returns {Array}\n     */\n    _complement = (arr0, ...arrays) =>\n        reduce((agg, arr) => _append(agg, _difference(arr, arr0)), [], arrays);\n","import {assignDeep} from './_assignDeep';\nimport {hasOwnProperty, keys} from '../_jsPlatform/_object';\nimport {_foldl as foldl} from '../_listOps/_listOps';\n\nexport const\n\n    objUnion = (obj1, obj2) => assignDeep(obj1, obj2),\n\n    objIntersect = (obj1, obj2) => foldl((agg, key) => {\n        if (hasOwnProperty(key, obj2)) {\n            agg[key] = obj2[key];\n        }\n        return agg;\n    }, {}, keys(obj1)),\n\n    objDifference = (obj1, obj2) => foldl((agg, key) => {\n        if (!hasOwnProperty(key, obj2)) {\n            agg[key] = obj1[key];\n        }\n        return agg;\n    }, {}, keys(obj1)),\n\n    objComplement = (obj0, ...objs) => foldl((agg, obj) =>\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs);\n","/**\n * @module objectOps\n */\nimport {curry, curry2} from './uncurried/_functionOps/_curry';\nimport {\n    instanceOf as _instanceOf,\n    hasOwnProperty as _hasOwnProperty,\n    assign as _assign} from './uncurried/_jsPlatform/_object';\nimport {prop as _prop} from './uncurried/_objectOps/_prop';\nimport {assignDeep as _assignDeep}      from './uncurried/_objectOps/_assignDeep';\nimport {\n    objUnion as _objUnion,\n    objComplement as _objComplement,\n    objIntersect as _objIntersect,\n    objDifference as _objDifference}    from './uncurried/_objectOps/_setTheory';\nimport {isType as _isType}\n    from './uncurried/_objectOps/_is';\n\nexport {jsonClone, fromArrayMap, toArrayMap, toArray} from './uncurried/_objectOps/_objectOps';\nexport {length, keys} from './uncurried/_jsPlatform/_object';\nexport * from './uncurried/_objectOps/_typeOf';\nexport * from './uncurried/_objectOps/_of';\nexport * from './uncurried/_objectOps/_console';\nexport {\n    isFunction, isClass, isCallable, isArray, isObject, isBoolean,\n    isNumber, isString, isMap, isSet, isWeakMap, isWeakSet, isUndefined,\n    isNull, isSymbol, isUsableImmutablePrimitive,\n    isEmptyList, isEmptyObject, isEmptyCollection, isEmpty, isset\n} from './uncurried/_objectOps/_is';\n\nexport {_instanceOf, _isType, _hasOwnProperty, _assign, _prop, _assignDeep, _objUnion,\n_objComplement, _objIntersect, _objDifference};\n\nexport const\n\n    /**\n     * Gives `undefined` or prop value if it is available.\n     * @function module:objectOps.prop\n     * @param propName {String}\n     * @param obj {*} - Object to search.\n     * @returns {*|undefined}\n     * @curried\n     */\n    prop = curry(_prop),\n\n    /**\n     * `instanceof` in function form.\n     * @function module:objectOps.instanceOf\n     * @param instance {*}\n     * @param Type {Function}\n     * @returns {Boolean}\n     * @curried\n     */\n    instanceOf = curry(_instanceOf),\n\n    /**\n     * `hasOwnProperty` as a method (takes object last).\n     * @function module:objectOps.hasOwnProperty\n     * @param propName {String}\n     * @param obj {*} - Object to search.\n     * @returns {Boolean}\n     * @curried\n     */\n    hasOwnProperty = curry(_hasOwnProperty),\n\n    /**\n     * `Object.assign` if it is available else a shim.\n     * @function module:objectOps.assign\n     * @param [...obj]{Object} - One or more objects to merge onto first object.\n     * @returns {Object}\n     * @curried - Called after having two or more args\n     */\n    assign = curry2(_assign),\n\n    /**\n     * Same as `Object.assign` except does a deep merge.\n     * @function module:objectOps.assignDeep\n     * @param [...obj]{Object} - One or more objects to deep merge onto first object.\n     * @returns {Object}\n     * @curried - Called after having two or more args\n     */\n    assignDeep = curry2(_assignDeep),\n\n    /**\n     * Cartesian union for objects (operates on two objects).\n     * @function module:objectOps.objUnion\n     * @param obj1 {Object}\n     * @param obj2 {Object}\n     * @returns {Object} - Unified obj.\n     * @curried\n     */\n    objUnion = curry(_objUnion),\n\n    /**\n     * Returns the cartesian intersection of two objects.\n     * @function module:objectOps.objIntersect\n     * @param obj1 {Object}\n     * @param obj2 {Object}\n     * @returns {Object} - Intersection of given objects.\n     * @curried\n     */\n    objIntersect = curry(_objIntersect),\n\n    /**\n     * Returns the cartesian difference of two objects.\n     * @function module:objectOps.objDifference\n     * @param obj1 {Object}\n     * @param obj2 {Object}\n     * @returns {Object} - Difference of given objects.\n     * @curried\n     */\n    objDifference = curry(_objDifference),\n\n    /**\n     * Returns the cartesian complement of one or more objects on given object.\n     * @function module:objectOps.objDifference\n     * @param obj {Object}\n     * @param [...obj]{Object} - One or more objects to calculate complement from.\n     * @returns {Object} - Complement of given objects.\n     * @curried\n     */\n    objComplement = curry2(_objComplement),\n\n    /**\n     * Returns a boolean indicating whether a value is of given type or not.\n     * @function module:objectOps.isType\n     * @param Type {Function|String} - Constructor or constructor name\n     * @param value {*}\n     * @return {Boolean}\n     */\n    isType = curry(_isType);\n","export const\n\n    /**\n     * Run `operation` until predicate returns `true`.\n     * @function module:_functionOps._until\n     * @param predicate {Function} :: a -> Boolean\n     * @param operation {Function} :: a -> a\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\n     * @returns {*} - What ever type `typeInstance` is\n     */\n    until = (predicate, operation, typeInstance) => {\n        let result = typeInstance;\n        while (!predicate(result)) {\n            result = operation(result);\n        }\n        return result;\n    };\n","import {reverse} from '../_jsPlatform/_array';\nimport {apply, call} from '../_jsPlatform/_function';\n\nexport const\n\n    /**\n     * Flips a functions arguments order and returns a new functionOps requiring such (arguments in reverse order).\n     * @function module:_functionOps.flipN\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    flipN = fn => (...args) => apply(fn, reverse(args)),\n\n    /**\n     * Returns a function that receives 3 args in reverse (3, 2, 1 etc.).\n     * @function module:_functionOps.flip3\n     * @param fn {Function} - Function<a, b, c>\n     * @returns {Function} - Function<c, b, a>\n     */\n    flip3 = fn => (a, b, c) => call(fn, c, b, a),\n\n    /**\n     * Returns a function that receives 4 args in reverse (4, 3, 2, 1 etc.).\n     * @function module:_functionOps.flip4\n     * @param fn {Function} - Function<a, b, c, d>\n     * @returns {Function} - Function<d, c, b, a>\n     */\n    flip4 = fn => (a, b, c, d) => call(fn, d, c, b, a),\n\n    /**\n     * Returns a function that receives 5 args in reverse (5, 4, 3, 2, 1 etc.).\n     * @function module:_functionOps.flip5\n     * @param fn {Function} - Function<a, b, c, d, e>\n     * @returns {Function} - Function<e, d, c, b, a>\n     */\n    flip5 = fn => (a, b, c, d, e) => call(fn, e, d, c, b, a),\n\n    /**\n     * Flips a _functionOps's first and second arguments and and returns a new _functionOps requiring said arguments in reverse.\n     * @function module:_functionOps.flip\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    flip = fn => (b, a) => call(fn, a, b);\n","/**\n * @memberOf _functionOps\n * @author elydelacruz\n * @created 12/6/2016.\n * @description Curry implementation with place holder concept (`__`).\n * @todo Make code here more minimal (reuse small parts here).\n */\n\nimport {apply, concat, map, filter, length} from '../_jsPlatform/_jsPlatform';\nimport {fnOrError} from '../_objectOps/_utils';\n\n/**\n * PlaceHolder (__) constructor.\n * @constructor PlaceHolder\n * @private\n */\nconst PlaceHolder = function PlaceHolder() {},\n\n    notFnErrPrefix = '`fn` in `curry_(fn, ...args)`',\n\n    /**\n     * Placeholder instance.\n     * @type {PlaceHolder}\n     * @private\n     */\n    placeHolderInstance = new PlaceHolder();\n\n/**\n * Checks to see if value is a `PlaceHolder`.\n * @param instance {*}\n * @returns {boolean}\n * @private\n */\nfunction isPlaceHolder (instance) {\n    return instance instanceof PlaceHolder;\n}\n\n/**\n * Replaces `placeholder` values in `_listOps`.\n * @function replacePlaceHolder\n * @private\n * @param array {Array} - Array to replace placeholders in.\n * @param args {Array} - Args from to choose from to replace placeholders.\n * @returns {Array|*} - Returns passed in `_listOps` with placeholders replaced by values in `args`.\n */\nfunction replacePlaceHolders (array, args) {\n    let out = map(element => {\n            if (!isPlaceHolder(element)) { return element; }\n            else if (length(args)) { return args.shift(); }\n            return element;\n        }, array);\n    return length(args) ? concat(out, args) : out;\n}\n\n/**\n * Curries passed in functionOps up to given arguments length (can enforce arity via placeholder values (`__`)).\n * @function module:_functionOps.curry_\n * @param fn {Function}\n * @param argsToCurry {...*}\n * @returns {Function}\n */\nexport function curry_ (fn, ...argsToCurry) {\n    return curryN_(fnOrError(notFnErrPrefix, fn).length, fn, ...argsToCurry);\n}\n\n/**\n * Curries a _functionOps up to given arity also enforces arity via placeholder values (`__`).\n * @function module:_functionOps.curryN_\n * @param executeArity {Number}\n * @param fn {Function}\n * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\n * @returns {Function} - Passed in _functionOps wrapped in a _functionOps for currying.\n */\nexport function curryN_ (executeArity, fn, ...curriedArgs) {\n    return (...args) => {\n        let concatedArgs = replacePlaceHolders(curriedArgs, args),\n            placeHolders = filter(isPlaceHolder, concatedArgs),\n            canBeCalled = (length(concatedArgs) - length(placeHolders) >= executeArity) || !executeArity;\n        return !canBeCalled ?\n            apply(curryN_, concat([executeArity, fnOrError(notFnErrPrefix, fn)], concatedArgs)) :\n            apply(fnOrError(notFnErrPrefix, fn), concatedArgs);\n    };\n}\n\n/**\n * Place holder object (frozen) used by curry.\n * @memberOf _functionOps\n * @type {PlaceHolder}\n */\nexport let __ = Object.freeze ? Object.freeze(placeHolderInstance) : placeHolderInstance,\n\n    /**\n     * Curries a _functionOps up to an arity of 2 (takes into account placeholders `__` (arity enforcers)) (won't call _functionOps until 2 or more args).\n     * @function module:_functionOps.curry2_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry2_ = fn => curryN_(2, fn),\n\n    /**\n     * Curries a _functionOps up to an arity of 3 (takes into account placeholders `__` (arity enforcers)) (won't call _functionOps until 3 or more args).\n     * @function module:_functionOps.curry3_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry3_ = fn => curryN_(3, fn),\n\n    /**\n     * Curries a _functionOps up to an arity of 4 (takes into account placeholders `__` (arity enforcers))  (won't call _functionOps until 4 or more args).\n     * @function module:_functionOps.curry4_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry4_ = fn => curryN_(4, fn),\n\n    /**\n     * Curries a _functionOps up to an arity of 5  (takes into account placeholders `__` (arity enforcers))  (won't call _functionOps until 5 or more args).\n     * @function module:_functionOps.curry5_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n    curry5_ = fn => curryN_(5, fn)\n\n;\n","/**\n * @memberOf _functionOps\n */\n\n/**\n * Returns passed in parameter.\n * @haskellType `id :: a -> a`\n * @function module:functionOps.id\n * @param x {*}\n * @returns {*}\n */\nexport const id = x => x;\n","import {reduceRight} from '../_jsPlatform/_array';\n\n/**\n * Composes all functions passed in from right to left passing each functions return value to\n * the functionOps on the left of itself.\n * @function module:_functionOps.compose\n * @type {Function}\n * @param args {...{Function}}\n * @returns {Function}\n */\nexport const compose = (...args) =>\n        arg0 => reduceRight((value, fn) => fn(value), arg0, args);\n","/**\n * Function operations: `\n * @module functionOps\n */\n\nimport {curry, curry2, curry3} from './uncurried/_functionOps/_curry';\n\nimport {\n    apply as _apply,\n    call as _call, reverse\n} from './uncurried/_jsPlatform/_jsPlatform';\n\nimport {\n    until as _until\n} from './uncurried/_functionOps/_until';\n\nimport {\n    flip as _flip,\n    flipN as _flipN,\n    flip3 as _flip3,\n    flip4 as _flip4,\n    flip5 as _flip5\n} from './uncurried/_functionOps/_flip';\n\nexport * from './uncurried/_functionOps/_curry';\nexport * from './uncurried/_functionOps/__curry';\nexport * from './uncurried/_functionOps/_negate';\nexport * from './uncurried/_functionOps/_id';\nexport * from './uncurried/_functionOps/_compose';\n\nexport {_apply, _call, _until, _flip, _flip3, _flip4, _flip5,  _flipN};\n\nexport const\n\n    /**\n     * Functional `apply` function (takes no context).\n     * @function module:functionOps.apply\n     * @param fn {Function}\n     * @param [args] {Array<*>}\n     * @returns {*}\n     * @curried - Triggered at 2 or more args.\n     */\n    apply = curry(_apply),\n\n    /**\n     * Functional `call` function (takes no context).\n     * @function module:functionOps.call\n     * @param fn {Function}\n     * @param [args] {...*}\n     * @returns {*}\n     * @curried\n     */\n    call = curry2(_call),\n\n    /**\n     * Run `operation` `until` predicate returns `true`.\n     * @function module:functionOps.until\n     * @param predicate {Function} :: a -> Boolean\n     * @param operation {Function} :: a -> a\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\n     * @returns {*} - What ever type `typeInstance` is\n     * @curried\n     */\n    until = curry(_until),\n\n    /**\n     * Flips a functions arguments order and returns a new function requiring such (arguments in reverse order).\n     * @function module:fnOperators.flipN\n     * @param fn {Function}\n     * @returns {Function}\n     * @curried - Triggered at 3 or more (args).\n     */\n    flipN = fn => curry3((...args) => apply(fn, reverse(args))),\n\n    /**\n     * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\n     * @function module:fnOperators.flip\n     * @param fn {Function}\n     * @returns {Function}\n     * @curried\n     */\n    flip = fn => curry(_flip(fn)),\n\n    /**\n     * Returns a function that receives 3 args in reverse (3, 2, 1 etc.).\n     * @function module:functionOps.flip3\n     * @param fn {Function} - Function<a, b, c>\n     * @returns {Function} - Function<c, b, a>\n     * @curried\n     */\n    flip3 = fn => curry(_flip3(fn)),\n\n    /**\n     * Returns a function that receives 4 args in reverse (4, 3, 2, 1 etc.).\n     * @function module:functionOps.flip4\n     * @param fn {Function} - Function<a, b, c, d>\n     * @returns {Function} - Function<d, c, b, a>\n     * @curried\n     */\n    flip4 = fn => curry(_flip4(fn)),\n\n    /**\n     * Returns a function that receives 5 args in reverse (5, 4, 3, 2, 1 etc.).\n     * @function module:functionOps.flip5\n     * @param fn {Function} - Function<a, b, c, d, e>\n     * @returns {Function} - Function<e, d, c, b, a>\n     * @curried\n     */\n    flip5 = fn => curry(_flip5(fn));\n\n    /**\n     * Curries a function based on it's defined arity (argument's arrayOps expected length).\n     * @function module:functionOps.curry\n     * @param fn {Function}\n     * @param argsToCurry {...*}\n     * @returns {Function}\n     * @curried\n     */\n\n    /**\n     * Curries a function up to a given arity.\n     * @function module:functionOps.curryN\n     * @param executeArity {Number}\n     * @param fn {Function}\n     * @param curriedArgs {...*}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries a function up to an arity of 2 (won't call function until 2 or more args).\n     * @function module:functionOps.curry2\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries a function up to an arity of 3 (won't call function until 3 or more args).\n     * @function module:functionOps.curry3\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries a function up to an arity of 4 (won't call function until 4 or more args).\n     * @function module:functionOps.curry4\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries a function up to an arity of 5 (won't call function until 5 or more args).\n     * @function module:functionOps.curry5\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries passed in function up to given arguments length (can enforce arity via placeholder values (`__`)).\n     * @function module:functionOps.curry_\n     * @param fn {Function}\n     * @param argsToCurry {...*}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries a function up to given arity also enforces arity via placeholder values (`__`).\n     * @function module:functionOps.curryN_\n     * @param executeArity {Number}\n     * @param fn {Function}\n     * @param curriedArgs {...*} - Allows `Placeholder` (`__`) values.\n     * @returns {Function} - Passed in function wrapped in a function for currying.\n     */\n\n    /**\n     * Place holder object (frozen) used by curry.\n     * @memberOf functionOps\n     * @type {PlaceHolder}\n     */\n\n    /**\n     * Curries a function up to an arity of 2 (takes into account placeholders `__` (arity enforcers))\n     * (won't call function until 2 or more args (not counting placeholder (`__`) value).\n     * @function module:functionOps.curry2_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries a function up to an arity of 3 (takes into account placeholders `__` (arity enforcers))\n     * (won't call function until 3 or more args (not counting placeholder (`__`) value).\n     * @function module:functionOps.curry3_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries a function up to an arity of 4 (takes into account placeholders `__` (arity enforcers))\n     * (won't call function until 4 or more args (not counting placeholder (`__`) value).\n     * @function module:functionOps.curry4_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Curries a function up to an arity of 5  (takes into account placeholders `__` (arity enforcers))\n     * (won't call function until 5 or more args (not counting placeholder (`__`) value).\n     * @function module:functionOps.curry5_\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Takes a function that takes two parameters and returns a negated version of given\n     * function.\n     * @function module:functionOps.negateF\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Takes a function that takes three parameters and returns a\n     * negated version of given function.\n     * @function module:functionOps.negateF3\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Takes a function that takes four parameters and returns a\n     * negated version of given function.\n     * @function module:functionOps.negateF4\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Takes a function that takes four parameters and returns a\n     * negated version of given function.\n     * @function module:functionOps.negateF5\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Negates a javascript-'generic' predicate; `Function<element, index, list>`.\n     * @function module:functionOps.negateP\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Returns a new function which is the dual of `fn` (or the negated version of `fn`).\n     * @function module:functionOps.negateFMany\n     * @param fn {Function}\n     * @returns {Function}\n     */\n\n    /**\n     * Returns passed in parameter.\n     * @haskellType `id :: a -> a`\n     * @function module:functionOps.id\n     * @param x {*}\n     * @returns {*}\n     */\n\n    /**\n     * Composes all functions passed in from right to left passing each functions return value to\n     * the function on the left of itself.\n     * @function module:functionOps.compose\n     * @param args {...Function}\n     * @returns {Function}\n     */\n","/**\n * @module _functionOps\n * @private\n */\nexport * from '../_jsPlatform/_function';\nexport * from './_compose';\nexport * from './_curry';\nexport * from './__curry';\nexport * from './_flip';\nexport * from './_id';\nexport * from './_negate';\nexport * from './_until';\n","/**\n * Created by elydelacruz on 7/22/2017.\n * @module utils\n * @private\n */\n\nimport {curry, curry2} from './uncurried/_functionOps/_curry';\nexport * from './uncurried/_objectOps/_utils';\nexport const\n\n    fPureTakesOne_ = name => curry((arg, f) => f[name](arg)),\n\n    fPureTakes2_ = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\n\n    fPureTakesOneOrMore_ = name => curry2((f, ...args) => f[name](...args))\n;\n","/**\n * Created by elyde on 7/20/2017.\n * Curried functional versions of common array methods (`filter`, `map`, etc.).\n * @module jsPlatform_array\n * @private\n */\n\nimport {fPureTakesOne_, fPureTakes2_, fPureTakesOneOrMore_} from '../utils';\n\n/**\n * Reverses a list (shimmed if not exists).\n * @function module:jsPlatform_array.reverse\n * @return {Array}\n */\nexport {reverse} from '../uncurried/_jsPlatform/_array';\n\nexport const\n\n    /**\n     * Maps a function to functor (lists etc.).\n     * @function module:jsPlatform_array.map\n     * @param fn {Function}\n     * @param functor {Array|{map: {Function}}}\n     * @returns {Array|{map: {Function}}}\n     */\n    map = fPureTakesOne_('map'),\n\n    /**\n     * Filters a functor (lists etc.) with passed in function.\n     * @function module:jsPlatform_array.filter\n     * @param fn {Function}\n     * @param functor {Array|{filter: {Function}}}\n     * @returns {Array|{filter: {Function}}}\n     */\n    filter = fPureTakesOne_('filter'),\n\n    /**\n     * Reduces a foldable (lists etc.) with passed in function.\n     * @function module:jsPlatform_array.reduce\n     * @param fn {Function}\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {Array|{reduce: {Function}}}\n     */\n    reduce = fPureTakes2_('reduce'),\n\n    /**\n     * Reduces a foldable (lists etc.) from the right with passed in function.\n     * @function module:jsPlatform_array.reduceRight\n     * @param fn {Function}\n     * @param functor {Array|{reduceRight: {Function}}}\n     * @returns {Array|{reduceRight: {Function}}}\n     */\n    reduceRight = fPureTakes2_('reduceRight'),\n\n    /**\n     * For each on functor (Array|Object|etc.).\n     * @function module:jsPlatform_array.forEach\n     * @param fn {Function}\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\n     */\n    forEach = fPureTakesOne_('forEach'),\n\n    /**\n     * Returns `true` if `fn` (predicate) returns true for at least one item\n     * in functor else returns `false`.\n     * @function module:jsPlatform_array.some\n     * @param fn {Function} - Predicate.\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have a `some` method.\n     */\n    some = fPureTakesOne_('some'),\n\n    /**\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\n     * @function module:jsPlatform_array.every\n     * @param fn {Function} - Predicate.\n     * @param functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have an `every` method.\n     */\n    every = fPureTakesOne_('every'),\n\n    /**\n     * Array.prototype.join\n     * @function module:jsPlatform_array.join\n     * @param separator {String|RegExp}\n     * @param arr {Array}\n     * @returns {String}\n     */\n    join = fPureTakesOne_('join'),\n\n    /**\n     * Same as Array.prototype.push\n     * @function module:jsPlatform_array.push\n     * @param item {*}\n     * @param arr {Array}\n     * @returns {Number}\n     */\n    push = fPureTakesOneOrMore_('push');\n","/**\n * List operations that overlap (apart from globally overlapping props and functions like `length`)\n * on both strings and arrays.\n * @module jsPlatform_list\n * @private\n */\n\nimport {curry} from '../uncurried/_functionOps/_curry';\n\nimport {\n    concat as concat_,\n    slice as slice_,\n    includes as includes_,\n    indexOf as indexOf_,\n    lastIndexOf as lastIndexOf_ } from '../uncurried/_jsPlatform/_list';\n\nexport const\n\n    /**\n     * Concats/appends all functors onto the end of first functor.\n     * Note:  functors passed in after the first one must be of the same type.\n     * @function module:jsPlatform_array.concat\n     * @param functor {Array|Object|*}\n     * @param ...functor {Array|Object|*}\n     * @return {*|Array|Object} - The type passed.\n     * @throws {Error} - When passed in object doesn't have an `every` method.\n     */\n    concat = curry(concat_),\n\n    /**\n     * Same as Array.prototype.slice\n     * @function module:jsPlatform_array.slice\n     * @param separator {String|RegExp}\n     * @param arr{Array}\n     * @returns {Array}\n     */\n    slice = curry(slice_),\n\n    includes = curry(includes_),\n\n    indexOf = curry(indexOf_),\n\n    lastIndexOf = curry(lastIndexOf_)\n\n;\n","/**\n * Created by elydelacruz on 9/6/2017.\n * @module jsPlatform_string\n * @private\n */\n\nimport {curry} from '../uncurried/_functionOps/_curry';\n\nimport {split as _split} from '../uncurried/_jsPlatform/_string';\n\n/**\n * Functional version of `String.prototype.split`.\n * @curried\n * @function module:jsPlatform_string.split\n * @param separator {String|RegExp}\n * @param str {String}\n * @returns {Array}\n */\nexport const split = curry(_split);\n","/**\n * @module jsPlatform\n * @private\n */\n\nexport * from './jsPlatform/array';\nexport * from './jsPlatform/list';\nexport * from './jsPlatform/string';\n","/**\n * List operators.\n * @module listOps\n */\nimport {curry, curry2} from './uncurried/_functionOps/_functionOps';\n\nimport {\n    _append, _appendMany, _head, _last, _tail, _init, _uncons, _unconsr,\n    _map, _concat, _concatMap, _reverse, _intersperse, _intercalate, _transpose,\n    _subsequences, _swapped, _permutations, _foldl, _foldl1,\n    _foldr, _foldr1, _unfoldr, _mapAccumL, _mapAccumR, _iterate, _repeat,\n    _replicate, _cycle, _findIndex, _findIndices, _elemIndex, _elemIndices,\n    _take, _drop, _splitAt, _takeWhile, _dropWhile, _dropWhileEnd, _span,\n    _breakOnList, _at, _find, _filter, _partition, _elem, _notElem, _lookup,\n    _isPrefixOf, _isSuffixOf, _isInfixOf, _isSubsequenceOf, _group, _groupBy,\n    _inits, _tails, _stripPrefix, _zip, _zipN, _zip3, _zip4, _zip5, _zipWith,\n    _zipWithN, _zipWith3, _zipWith4, _zipWith5, _unzip, _unzipN, _any, _all,\n    _and, _or, _not, _sum, _product, _maximum, _minimum, _scanl, _scanl1, _scanr, _scanr1,\n    _nub, _remove, _sort, _sortOn, _sortBy, _insert, _insertBy, _nubBy, _removeBy,\n    _removeFirstsBy, _unionBy, _union, _intersect, _intersectBy, _difference,\n    _complement\n} from './uncurried/_listOps/_listOps';\n\n// Export single arity methods\nexport {\n    _and as and, _or as or, _not as not, _zipN as zipN, _unzip as unzip, _unzipN as unzipN,\n    _concat as concat, _reverse as reverse, _transpose as transpose,\n    _subsequences as subsequences, _permutations as permutations,\n    _group as group, _tails as tails, _sum as sum, _product as product,\n    _maximum as maximum, _minimum as minimum, _sort as sort, _nub as nub,\n    _head as head, _last as last, _tail as tail, _init as init, _inits as inits,\n    _uncons as uncons, _unconsr as unconsr,\n    _swapped as swapped\n};\n\nexport {slice, includes, indexOf, lastIndexOf, split, push} from './jsPlatform';\n\nexport * from './uncurried/_listOps/_listOps';\n\nexport const\n\n    /**\n     * Append two lists, i.e.,\n     * ```\n     * append([x1, ..., xm], [y1, ..., yn]) // outputs: [x1, ..., xm, y1, ..., yn]\n     * append([x1, ..., xm], [y1, ...]) // outputs: [x1, ..., xm, y1, ...]\n     * ```\n     * If the first list is not finite, the result is the first list.\n     * @haskellType `append :: List a => a -> a -> a`\n     * @function module:listOps.append\n     * @param xs1 {Array|String|*} - list or list like.\n     * @param xs2 {Array|String|*} - list or list like.\n     * @returns {Array|String|*} - Same type as list like passed in.\n     */\n    append = curry(_append),\n\n    /**\n     * Append two or more lists, i.e., same as `append` but for two ore more lists.\n     * @haskellType `appendMany :: List a => a -> [a] -> a\n     * @note In `@haskellType` we wrote `[a]` only to keep the haskell type valid though note in javascript\n     *  this is actually different since the function converts the zero ore more parameters into an array containing such for us.\n     * @function module:listOps.appendMany\n     * @param x {Array|String|*}\n     * @param args ...{Array|String|*} - Lists or lists likes.\n     * @returns {Array|String|*} - Same type as first list or list like passed in.\n     */\n    appendMany = curry2(_appendMany),\n\n    /**\n     * Map a function over all the elements of a container and concatenate the resulting lists.\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\n     * @function module:listOps.concatMap\n     * @param fn {Function}\n     * @param foldableOfA {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    concatMap = curry2(_concatMap),\n\n    /**\n     * @function module:listOps.map\n     * @param fn {Function} - Function to map on functor item(s).\n     * @param xs {Array|String|*} - Functor.\n     * @returns {Array|String|*} - Functor type that is passed in.\n     */\n    map = curry(_map),\n\n    /**\n     * Takes an element and a list and `intersperses' that element between the elements of the list. For example\n     * @function module:listOps.intersperse\n     * @note In our version of the function javascript is loosely typed so, so is our function (to much overhead to make\n     *  it typed) so `between` can be any value.\n     * @param between {*} - Should be of the same type of elements contained in list.\n     * @param arr {Array|String|*} - List.\n     * @returns {Array|String|*}\n     */\n    intersperse = curry(_intersperse),\n\n    /**\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\n     * @function module:listOps.intercalate\n     * @param xs {Array|String|*}\n     * @param xss {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    intercalate = curry(_intercalate),\n\n    /**\n     * Reduces a foldable (list etc.) with passed in function.\n     * @function module:listOps.foldl\n     * @param fn {Function}\n     * @param zero {*} - Aggregator.\n     * @param functor {Array|String|*}\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\n     */\n    foldl = curry(_foldl),\n\n    /**\n     * Reduces a foldable (list etc.) from right to left with passed in function.\n     * @function module:listOps.foldr\n     * @param fn {Function}\n     * @param zero {*} - Aggregator.\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {*} - Usually same type as aggregate (`zero`) (depends on `fn`).\n     */\n    foldr = curry(_foldr),\n\n    /**\n     * Reduces a foldable (list etc.) with passed in function.\n     * @function module:listOps.foldl1\n     * @param fn {Function}\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {*}\n     */\n    foldl1 = curry(_foldl1),\n\n    /**\n     * Reduces a foldable (list etc.) from right to left with passed in function.\n     * @function module:listOps.foldr1\n     * @param fn {Function}\n     * @param functor {Array|{reduce: {Function}}}\n     * @returns {*}\n     */\n    foldr1 = curry(_foldr1),\n\n    /**\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\n     * @function module:listOps.mapAccumL\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\n     * @param xs {Array|String|*} - list type.\n     * @return {Array} - [aggregated, list]\n     */\n    mapAccumL = curry(_mapAccumL),\n\n    /**\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\n     * @function module:listOps.mapAccumR\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\n     * @param zero {*} - An instance of the passed in list type used to aggregate on.\n     * @param xs {Array|String|*} - list type.\n     * @return {Array} - [aggregated, list]\n     */\n    mapAccumR = curry(_mapAccumR),\n\n    /**\n     * Iterate on value (`x`) with `op` up to `limit`.\n     * @function module:listOps.iterate\n     * @param limit {Number}\n     * @param op {Function} - Operation\n     * @param x {*} - Starting point.\n     * @returns {*}\n     */\n    iterate = curry(_iterate),\n\n    /**\n     * Repeats `x` `limit` number of times.\n     * @function module:listOps.repeat\n     * @param limit {Number}\n     * @param x {*}\n     * @return {Array}\n     */\n    repeat = curry(_repeat),\n\n    /**\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\n     * @function module:listOps.replicate\n     * @param limit {Number}\n     * @param x {*}\n     * @return {Array}\n     */\n    replicate = curry(_replicate),\n\n    /**\n     * Replicates a list `limit` number of times and appends the results (concat)\n     * @function module:listOps.cycle\n     * @param limit {Number}\n     * @param xs {Array}\n     * @returns {Array}\n     */\n    cycle = curry(_cycle),\n\n    /**\n     * Unfolds a value into a list of somethings.\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\n     * @function module:listOps.unfoldr\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregate and item to unfold in next iteration).\n     * @param x {*} - Starting parameter to unfold from.\n     * @returns {Array} - An array of whatever you return from `op` yielded.\n     */\n    unfoldr = curry(_unfoldr),\n\n    /**\n     * Finds index in string or list (alias for `findIndex`).\n     * @function module:listOps.findIndex\n     * @param pred {Function} - Predicate<element, index, arr>.\n     * @param arr {Array|String}\n     * @returns {Number} - `-1` if predicate not matched else `index` found\n     */\n    findIndex = curry(_findIndex),\n\n    /**\n     * @function module:listOps.findIndices\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {Array|undefined}\n     */\n    findIndices = curry(_findIndices),\n\n    /**\n     * @function module:listOps.elemIndex\n     * @param x {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    elemIndex = curry(_elemIndex),\n\n    /**\n     * @function module:listOps.elemIndices\n     * @param value {*} - Element to search for.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    elemIndices = curry(_elemIndices),\n\n    /**\n     * Takes `n` items from start of list to `limit` (exclusive).\n     * @function module:listOps.take\n     * @param list {Array|String}\n     * @param limit {Number}\n     * @returns {String|Array} - Passed in type's type\n     */\n    take = curry(_take),\n\n    /**\n     * Drops `n` items from start of list to `count` (exclusive).\n     * @function module:listOps.take\n     * @param list {Array|String}\n     * @param count {Number}\n     * @returns {String|Array} - Passed in type's type\n     */\n    drop = curry(_drop),\n\n    /**\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\n     * given index in second part of returned list)).\n     * @function module:listOps.splitAt\n     * @param ind {Number} - Index to split at.\n     * @param list {Array|String|*} - functor (list or string) to split.\n     * @returns {Array} - Array of whatever type `x` was when passed in\n     */\n    splitAt = curry(_splitAt),\n\n    /**\n     * Gives an list with passed elements while predicate was true.\n     * @function module:listOps.takeWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @returns {Array}\n     */\n    takeWhile = curry(_takeWhile),\n\n    /**\n     * Returns an list without elements that match predicate.\n     * @function module:listOps.dropWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @refactor\n     * @returns {Array|String}\n     */\n    dropWhile = curry(_dropWhile),\n\n    /**\n     * @function module:listOps.dropWhile\n     * @param pred {Function} - Predicate<*, index, list|string>\n     * @param list {Array|String}\n     * @refactor\n     * @returns {Array|String}\n     */\n    dropWhileEnd = curry(_dropWhileEnd),\n\n    /**\n     * Gives a span such that the first list (in returned tuple) is the span of items matching upto `not predicate` and\n     * the second list in the tuple is a list of the remaining elements in the given list.\n     * **@Note: Not the same as `partition`.  Read descriptions closely!!!\n     * @function module:listOps.partition\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\n     * @param list {Array|String|*} - Predicate<item, index, originalArrayOrString>\n     * @returns {Array|String|*} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\n     */\n    span = curry(_span),\n\n    /**\n     * breakOnList, applied to a predicate p and a list xs, returns a tuple\n     * where first element is longest prefix (possibly empty) of xs of elements\n     * that do not satisfy p and second element is the remainder of the list:\n     * @haskellExample\n     * Replace `break` with `breakOnList` for our version.\n     * ```\n     * break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\n     * break (< 9) [1,2,3] == ([],[1,2,3])\n     * break (> 9) [1,2,3] == ([1,2,3],[])\n     * ```\n     * @function module:listOps.breakOnList\n     * @param pred {Function}\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    breakOnList = curry(_breakOnList),\n\n    /**\n     * @function module:listOps.at\n     * @param ind {Number} - Index.\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    at = curry(_at),\n\n    /**\n     * @function module:listOps.find\n     * @param pred {Function}\n     * @param xs {Array|String|*} - list or list like.\n     * @returns {*}\n     */\n    find = curry(_find),\n\n    filter = curry(_filter),\n\n    /**\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\n     * do not match the tuple are in second list in the returned tuple.\n     *  Essentially `[filter(p, xs), filter(negateP(p), xs)]`.\n     * @function module:listOps.partition\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\n     * @param list {Array|String|*}\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\n     */\n    partition = curry(_partition),\n\n    /**\n     * Returns a boolean indicating whether an element exists in given structure of elements.\n     * @function module:listOps.elem\n     * @param element {*}\n     * @param xs {Array}\n     * @returns {Boolean}\n     */\n    elem = curry(_elem),\n\n    /**\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\n     * @function module:listOps.notElem\n     * @param element {*}\n     * @param xs {Array}\n     * @returns {Boolean}\n     */\n    notElem = curry2(_notElem),\n\n    /**\n     * Same as _listOps._at - Returns property value at key/indice.\n     * @function module:_objectOps._lookup\n     * @type {module:_objectOps.prop}\n     */\n    lookup = curry(_lookup),\n\n    /**\n     * Checks if list `xs1` is a prefix of list `xs2`\n     * @function module:listOps.isPrefixOf\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {boolean}\n     */\n    isPrefixOf = curry(_isPrefixOf),\n\n    /**\n     * Checks if list `xs1` is a suffix of list `xs2`\n     * @function module:listOps.isSuffixOf\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {boolean}\n     */\n    isSuffixOf = curry(_isSuffixOf),\n\n    /**\n     * Checks if list `xs1` is an infix of list `xs2`\n     * @function module:listOps.isInfixOf\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {boolean}\n     */\n    isInfixOf = curry(_isInfixOf),\n\n    /**\n     * Checks if list `xs1` is a sub-sequence of list `xs2`\n     * @function module:listOps.isPrefixOf\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {boolean}\n     */\n    isSubsequenceOf = curry(_isSubsequenceOf),\n\n    /**\n     * Allows you to group items in a list based on your supplied equality check.\n     * @note Sames `group` but allows you to specify equality operation.\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\n     * @function module:listOps.groupBy\n     * @param equalityOp {Function}\n     * @param xs {Array|String|*}\n     * @returns {*}\n     */\n    groupBy = curry(_groupBy),\n\n    /**\n     * Strips prefix list from given list\n     * @function module:listOps.stripPrefix\n     * @param prefix {Array|String|*}\n     * @param list {Array|string|*}\n     * @returns {Array|*}\n     */\n    stripPrefix = curry(_stripPrefix),\n\n    /**\n     * zip takes two lists and returns a list of corresponding pairs.\n     * If one input list is short, excess elements of the longer list are discarded.\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\n     * @function module:listOps.zip\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip = curry(_zip),\n\n    /**\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\n     * @function module:listOps.zip3\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip3 = curry(_zip3),\n\n    /**\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\n     * @function module:listOps.zip4\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @param arr4 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip4 = curry(_zip4),\n\n    /**\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\n     * @function module:listOps.zip5\n     * @param arr1 {Array}\n     * @param arr2 {Array}\n     * @param arr3 {Array}\n     * @param arr4 {Array}\n     * @param arr5 {Array}\n     * @returns {Array<Array<*,*>>}\n     */\n    zip5 = curry(_zip5),\n\n    /**\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\n     * zipWith generalises zip by zipping with the function given as the\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\n     * @note `_|_` means bottom or perpetual (@see\n     *  - https://wiki.haskell.org/Bottom\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\n     *  )\n     * @example\n     * ```\n     * zipWith f [] _|_ = []\n     * ```\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\n     * @function module:listOps.zipWith\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\n     *  E.g., ` op :: a -> b -> (a, b)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith = curry(_zipWith),\n\n    /**\n     * Zips all given lists with tupling function. Note: Haskell types do not have\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\n     *  is left there for general purpose not for exactness as is told by aforementioned.\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\n     *  of lists to zip.\n     * @function module:listOps.zipWithN\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\n     * @param lists ...{Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWithN = curry(_zipWithN),\n\n    /**\n     * Zips 3 lists with tupling function.\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\n     * @function module:listOps.zipWith3\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith3 = curry(_zipWith3),\n\n    /**\n     * Zips 4 lists with tupling function.\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\n     * @function module:listOps.zipWith4\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @param xs4 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith4 = curry(_zipWith4),\n\n    /**\n     * Zips 5 lists.\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\n     * @function module:listOps.zipWith5\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\n     *  of said parts:\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @param xs3 {Array|String|*}\n     * @param xs4 {Array|String|*}\n     * @param xs5 {Array|String|*}\n     * @returns {Array<Array<*,*>>}\n     */\n    zipWith5 = curry(_zipWith5),\n\n    /**\n     * Returns true if any item in container passes predicate `p`.\n     * @function module:listOps.any\n     * @param p {Function} - Predicate.\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    any = curry(_any),\n\n    /**\n     * Returns true if all items in container pass predicate `p`.\n     * @function module:listOps.all\n     * @param p {Function} - Predicate.\n     * @param xs {Array|String}\n     * @returns {Boolean}\n     */\n    all = curry(_all),\n\n    /**\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\n     * ```\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\n     * ```\n     * Also note that:\n     * ```\n     * last (scanl f z xs) == foldl f z xs.\n     * ```\n     * @function module:listOps.scanl\n     * @param fn {Function}\n     * @param zero {*}\n     * @param xs {Array}\n     * @returns {Array|*}\n     */\n    scanl = curry(_scanl),\n\n    /**\n     * `scanl1` is a variant of `scanl` that has no starting value argument:\n     * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\n     * @function module:listOps.scanl1\n     * @param fn {Function}\n     * @param xs {Array}\n     * @returns {Array|*}\n     */\n    scanl1 = curry(_scanl1),\n\n    /**\n     * Same as `scanl` but from the right (similiar to `foldr`'s relationship to `foldl`).\n     * Note also `scanr`'s relationship ot `foldr`:\n     * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\n     * @function module:listOps.scanr\n     * @param fn {Function}\n     * @param zero {*}\n     * @param xs {Array}\n     * @returns {Array|*}\n     */\n    scanr = curry(_scanr),\n\n    /**\n     * Same as `scanr` but takes no zero/accumulator value.\n     * @function module:listOps.scanr1\n     * @param fn {Function}\n     * @param xs {Array}\n     * @returns {Array|*}\n     */\n    scanr1 = curry(_scanr1),\n\n    /**\n     * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\n     * For example, `remove('a', 'banana') === 'bnana';`\n     * @function module:listOps.remove\n     * @param x {*}\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    remove = curry(_remove),\n\n    /**\n     * Sort a list by comparing the results of a key function applied to each\n     * element. sortOn f is equivalent to sortBy (comparing f), but has the\n     * performance advantage of only evaluating f once for each element in the\n     * input list. This is called the decorate-sort-undecorate paradigm, or\n     * Schwartzian transform.\n     *\n     * Elements are arranged from from lowest to highest, keeping duplicates\n     * in the order they appeared in the input.\n     *\n     * Ex:\n     * ```\n     * shallowEquals(\n     *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\n     *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\n     * ) // true\n     * ```\n     * @function module:listOps.sortOn\n     * @param valueFn {Function}\n     * @param xs {Array|String|*}\n     * @returns {Array}\n     */\n    sortOn = curry(_sortOn),\n\n    /**\n     * The sortBy function is the non-overloaded (in haskell terms) version of sort.\n     * @haskellExample ```\n     *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\n     *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\n     * ```\n     * @function module:listOps.sortBy\n     * @param orderingFn {Function}\n     * @param xs {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    sortBy = curry(_sortBy),\n\n    /**\n     * The insert function takes an element and a list and inserts the element\n     * into the list at the first position where it is less than or equal to the\n     * next element. In particular, if the list is sorted before the call, the\n     * result will also be sorted. It is a special case of insertBy, which allows\n     * the programmer to supply their own comparison function.\n     * @function module:listOps.insert\n     * @param x {*}\n     * @param xs {Array|*}\n     * @returns {Array}\n     */\n    insert = curry(_insert),\n\n    /**\n     * A version of `insert` that allows you to specify the ordering of the inserted\n     * item;  Before/at, or after\n     * @function module:listOps.insertBy\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\n     * @note `Ordering` === // something that is order-able\n     * @todo Optimize and work the logic of this function;  Think about the types that will be\n     *  operated on by this functions logic.\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\n     * @param x {*} - Value to insert.\n     * @param xs {Array|String|*} - List to insert into (note new list is returned)\n     * @returns {Array|String|*} - New list.\n     */\n    insertBy = curry(_insertBy),\n\n    /**\n     * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\n     * @function module:listOps.nubBy\n     * @param pred {Function}\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    nubBy = curry(_nubBy),\n\n    /**\n     * Behaves the same as `remove`, but takes a user-supplied equality predicate.\n     * @function module:listOps.removeBy\n     * @param pred {Function}\n     * @param x {*}\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    removeBy = curry(_removeBy),\n\n    /**\n     * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\n     * occurrence of each element of the second list removed.\n     * @function module:listOps.removeFirstBy\n     * @param pred {Function}\n     * @param xs1 {Array|String|*}\n     * @param xs2 {Array|String|*}\n     * @returns {Array}\n     */\n    removeFirstsBy = curry(_removeFirstsBy),\n\n    /**\n     * Returns the union on elements matching boolean check passed in.\n     * @function module:listOps.unionBy\n     * @param pred {Function} - `pred :: a -> a -> Bool`\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    unionBy = curry(_unionBy),\n\n    /**\n     * Creates a union on matching elements from array1.\n     * @function module:listOps.union\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    union = curry(_union),\n\n    /**\n     * Performs an intersection on list 1 with  elements from list 2.\n     * @function module:listOps.intersect\n     * @param arr1 {Array|String|*}\n     * @param arr2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    intersect = curry(_intersect),\n\n    /**\n     * Returns an intersection by predicate.\n     * @function module:listOps.intersectBy\n     * @param pred {Function} - `pred :: a -> b -> Bool`\n     * @param list1 {Array|String|*}\n     * @param list2 {Array|String|*}\n     * @return {Array|String|*}\n     */\n    intersectBy = curry(_intersectBy),\n\n    /**\n     * Returns the difference of list 1 from list 2.\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\n     * @function module:listOps.difference\n     * @param array1 {Array|String|*}\n     * @param array2 {Array|String|*}\n     * @returns {Array|String|*}\n     */\n    difference = curry(_difference),\n\n    /**\n     * Returns the complement of list 0 and the reset of the passed in arrays.\n     * @function module:listOps.complement\n     * @param arr0 {Array}\n     * @param arrays {...Array}\n     * @returns {Array}\n     */\n    complement = curry2(_complement)\n\n;\n","/**\n * Contains functions for operating strings.\n * @author elyde\n * @created 7/9/2017.\n * @module stringOps\n */\nimport {intercalate, map, filter} from './listOps';\nimport {split} from './jsPlatform/string';\nimport {compose} from './uncurried/_functionOps/_compose';\nimport {join} from './jsPlatform/array';\nimport {_errorIfNotType} from './uncurried/_objectOps/_errorThrowing';\n\nexport const\n\n    /**\n     * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\n     * @function module:stringOps.lines\n     * @param str {String}\n     * @returns {Array}\n     */\n    lines = split(/[\\n\\r]/gm),\n\n    /**\n     * Splits a string on all '\\s' and/or all '\\t' characters.\n     * @function module:stringOps.words\n     * @param str{String}\n     * @returns {Array}\n     */\n    words = split(/[\\s\\t]/gm),\n\n    /**\n     * Intersperse an array of strings with '\\s' and then concats them.\n     * @function module:stringOps.unwords\n     * @param arr {String}\n     * @returns {Array}\n     */\n    unwords = intercalate(' '),\n\n    /**\n     * Intersperses a '\\n' character into a list of strings and then concats it.\n     * @function module:stringOps.unlines\n     * @param list {Array|String|*}\n     * @returns {Array}\n     */\n    unlines = intercalate('\\n'),\n\n    /**\n     * Lower cases first character of a non-empty string.\n     * @function module:stringOps.lcaseFirst\n     * @param xs {String}\n     * @returns {string}\n     * @throws {Error} - Throws error if receiving anything that is not a string.\n     */\n    lcaseFirst = xs => {\n        _errorIfNotType(String, 'lcaseFirst', 'xs', xs);\n        return xs[0].toLowerCase() + xs.substring(1);\n    },\n\n    /**\n     * Upper cases first character of a non-empty string.\n     * @function module:stringOps.ucaseFirst\n     * @param xs {String}\n     * @returns {string}\n     * @throws {Error} - Throws error if receiving anything that is not a string.\n     */\n    ucaseFirst = xs => {\n        _errorIfNotType(String, 'ucaseFirst', 'xs', xs);\n        return xs[0].toUpperCase() + xs.substring(1);\n    },\n\n    /**\n     * Camel cases (class case) a string.\n     * @function module:stringOps.camelCase\n     * @param xs {String}\n     * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Pattern to split on.  Optional.\n     * @throws {Error} - Throws error if param `xs` is not a string.\n     * @returns {string}\n     * @curried\n     */\n    camelCase = (xs, pattern = /[^a-z\\d]/i) => compose(\n            join(''),\n            map(str => ucaseFirst(str.toLowerCase())),\n            filter(x => !!x),\n            split(pattern)\n        )(_errorIfNotType(String, 'camelCase', 'xs', xs)),\n\n    /**\n     * Class cases a string.  Uses pattern /[^a-z\\d/i]/ to split on.\n     * If you require a different pattern use `stringOps.camelCase(str, pattern)`\n     * and then upper case first character (`ucaseFirst`).\n     * @function module:stringOps.classCase\n     * @param xs {String}\n     * @returns {string}\n     * @throws {Error} - Throws error if `xs` is not a string (via `camelCase` call).\n     */\n    classCase = compose(ucaseFirst, camelCase)\n\n;\n","/**\n * Created by elyde on 12/6/2016.\n * @file fjl.js\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\n *  a subset of functions which can make the javascript developer more efficient and make his/her\n *  code more concise (and functional).\n * @description Includes operations from haskell's Prelude.\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\n * @module fjl\n */\nexport * from './objectOps';\nexport * from './booleanOps';\nexport * from './functionOps';\nexport * from './listOps';\nexport * from './stringOps';\nexport * from './utils';\nexport * from './uncurried/_listOps/_utils';\n"],"names":["_Number","Number","name","_NaN","_Null","_Undefined","typeOf","value","retVal","undefined","constructorName","constructor","isNaN","fPureTakesOne","arg","f","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","args","fnOrError","symbolName","Error","instanceOf","instanceConstructor","instance","hasOwnProperty","length","x","keys","Object","obj","assign","obj0","objs","reduce","topAgg","agg","key","defineReverse","Array","prototype","reverse","reduceRight","item","push","map","filter","forEach","some","every","join","concat","slice","includes","xs","indexOf","lastIndexOf","split","apply","fn","call","notFnErrPrefix","curry","argsToCurry","curryN","executeArity","curriedArgs","concatedArgs","canBeCalled","curry2","curry3","curry4","curry5","prop","_String","String","_Object","_Boolean","Boolean","_Function","Function","_Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","isFunction","isType","type","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isUsableImmutablePrimitive","typeOfX","isset","Type","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","typeOfValue","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","negateF","a","b","negateF3","c","negateF4","d","negateF5","e","negateP","negateFMany","isTruthy","isFalsy","alwaysTrue","alwaysFalse","Symbol","of","log","console","bind","error","peek","pop","isCheckableType","_errorIfNotCheckableType","contextName","getTypeName","_defaultTypeChecker","multiTypesToString","types","defaultErrorMessageCall","tmplContext","valueName","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","typesCopy","typesToMatchCopy","_getErrorIfNotTypeThrower","errorMessageCall","typeChecker","ValueType","_getErrorIfNotTypesThrower","valueTypes","expectedTypeNames","matchFound","_errorIfNotType","_errorIfNotTypes","defaultTypeChecker","errorIfNotType","errorIfNotTypes","jsonClone","JSON","parse","stringify","toArrayMap","babelHelpers.typeof","fromArrayMap","toArray","from","_map","ind","limit","out","aggregateStr","aggregateArr","aggregateObj","aggregatorByType","sliceFrom","startInd","arr","sliceTo","toInd","copy","sliceCopy","genericAscOrdering","lengths","lists","lengthsToSmallest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceRightUntil","operation","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","_append","listAppend","_appendMany","_head","_last","_tail","_init","_uncons","_unconsr","_concat","_concatMap","foldableOfA","_reverse","_foldr","_intersperse","between","lastInd","_foldl","_intercalate","xss","_transpose","numLists","ind2","longestListLen","_maximum","outLists","outList","_filter","_subsequences","listLen","pow","i","entry","j","_swapped","ind1","tmp","_permutations","_repeat","_foldl1","parts","_foldr1","_mapAccumL","zero","mapped","tuple","_mapAccumR","_iterate","lastX","_replicate","_cycle","_unfoldr","resultTuple","_findIndex","_findIndices","_elemIndex","foundInd","_elemIndices","_take","_drop","count","_splitAt","_takeWhile","_dropWhile","splitPoint","list2","_dropWhileEnd","_span","_breakOnList","_at","_find","_partition","_elem","_notElem","_lookup","_isPrefixOf","xs1","xs2","limit1","limit2","_isSuffixOf","_isInfixOf","foundLen","_isSubsequenceOf","lenXs1","_group","_groupBy","equalityOp","prevItem","predOp","_inits","_tails","_stripPrefix","prefix","_zip","arr1","arr2","a1","a2","_zipN","trimmedLists","lenOfTrimmed","_zip3","arr3","_zip4","arr4","_zip5","arr5","_zipWith","_zipWithN","_zipWith3","xs3","_zipWith4","xs4","_zipWith5","xs5","_unzip","_unzipN","lenItem0","_any","p","_all","_and","_or","_not","_sum","_product","_sortBy","_minimum","_scanl","_scanl1","_scanr","_scanr1","_nub","_nubBy","_remove","_removeBy","_sort","_sortOn","valueFn","decorated","a0","b0","orderingFn","sort","_insert","foundIndex","_insertBy","currItem","anyOp","storedItem","_removeFirstsBy","x2","_unionBy","alreadyAdded","_union","_intersect","_intersectBy","list1","_difference","array1","array2","_complement","arr0","arrays","objUnion","obj1","obj2","objIntersect","foldl","objDifference","objComplement","_prop","_instanceOf","_hasOwnProperty","_assign","_assignDeep","_objUnion","_objIntersect","_objDifference","_objComplement","_isType","until","predicate","typeInstance","flipN","flip3","flip4","flip5","flip","PlaceHolder","placeHolderInstance","isPlaceHolder","replacePlaceHolders","array","element","shift","curry_","curryN_","placeHolders","__","freeze","curry2_","curry3_","curry4_","curry5_","id","compose","arg0","_apply","_call","_until","_flip","_flip3","_flip4","_flip5","fPureTakesOne_","fPureTakes2_","fPureTakesOneOrMore_","concat_","slice_","includes_","indexOf_","lastIndexOf_","_split","append","appendMany","concatMap","intersperse","intercalate","foldr","foldl1","foldr1","mapAccumL","mapAccumR","iterate","repeat","replicate","cycle","unfoldr","findIndex","findIndices","elemIndex","elemIndices","take","drop","splitAt","takeWhile","dropWhile","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","lookup","isPrefixOf","isSuffixOf","isInfixOf","isSubsequenceOf","groupBy","stripPrefix","zip","zip3","zip4","zip5","zipWith","zipWithN","zipWith3","zipWith4","zipWith5","any","all","scanl","scanl1","scanr","scanr1","remove","sortOn","sortBy","insert","insertBy","nubBy","removeBy","removeFirstsBy","unionBy","union","intersect","intersectBy","difference","complement","lines","words","unwords","unlines","lcaseFirst","toLowerCase","substring","ucaseFirst","toUpperCase","camelCase","pattern","str","classCase"],"mappings":"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"}