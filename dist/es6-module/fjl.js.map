{"version":3,"file":"fjl.js","sources":["../../src/function/curry.js","../../src/utils.js","../../src/jsPlatform/array.js","../../src/jsPlatform/function.js","../../src/function/flip.js","../../src/jsPlatform/object.js","../../src/object/typeOf.js","../../src/object/is.js","../../src/object/lookup.js","../../src/object/of.js","../../src/object/copy.js","../../src/object/searchObj.js","../../src/object/assignDeep.js","../../src/jsPlatform/list.js","../../src/boolean.js","../../src/list/map.js","../../src/list/aggregation.js","../../src/list/utils.js","../../src/object/setTheory.js","../../src/object/console.js","../../src/object/jsonClone.js","../../src/object/assocList.js","../../src/object/toArray.js","../../src/object.js","../../src/function/compose.js","../../src/function/id.js","../../src/function/negate.js","../../src/function/until.js","../../src/function/fnOrError.js","../../src/function/noop.js","../../src/function.js","../../src/list/range.js","../../src/jsPlatform/string.js","../../src/jsPlatform.js","../../src/list.js","../../src/errorThrowing.js","../../src/string.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf function\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\r\n\r\n/**\r\n * @private\r\n * @type {string}\r\n */\r\nconst\r\n\r\n    /**\r\n     * Returns curried function.\r\n     * @private\r\n     * @param executeArity {Number}\r\n     * @param unmetArityNum {Number}\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function} - Curried function.\r\n     */\r\n    returnCurried = (executeArity, unmetArityNum, fn, argsToCurry) => {\r\n        switch (unmetArityNum) {\r\n            case 1:\r\n                /* eslint-disable */\r\n                return function func(x) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 2:\r\n                /* eslint-disable */\r\n                return function func(a, b) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 3:\r\n                /* eslint-disable */\r\n                return function func(a, b, c) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 4:\r\n                /* eslint-disable */\r\n                return function func(a, b, c, d) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 5:\r\n                /* eslint-disable */\r\n                return function func(a, b, c, d, e) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            default:\r\n                return (...args) => executeAsCurriedFunc(fn, executeArity, unmetArityNum, args, argsToCurry);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns curried function if unmetArity is not met else returns result of executing\r\n     * final function.\r\n     * @private\r\n     * @param fn {Function}\r\n     * @param executeArity {Number}\r\n     * @param unmetArity {Number}\r\n     * @param args {Array<*>}\r\n     * @param argsToCurry {Array<*>}\r\n     * @returns {Function|*} - Curried function or result of 'finally' executed function.\r\n     */\r\n    executeAsCurriedFunc = (fn, executeArity, unmetArity, args, argsToCurry) => {\r\n        let concatedArgs = argsToCurry.concat(args),\r\n            canBeCalled = (concatedArgs.length >= executeArity) || !executeArity,\r\n            newExpectedArity = executeArity - concatedArgs.length;\r\n        return !canBeCalled ?\r\n            returnCurried(executeArity, newExpectedArity, fn, concatedArgs) :\r\n            fn(...concatedArgs);\r\n    }\r\n;\r\n\r\nexport const\r\n\r\n    /**\r\n     * Curries a function up to a given arity.\r\n     * @function module:function.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     * @throws {Error} - When `fn` is not a function.\r\n     */\r\n    curryN = (executeArity, fn, ...argsToCurry) => {\r\n        if (!fn || !(fn instanceof Function)) {\r\n            throw new Error(`\\`curry*\\` functions expect first parameter to be of type \\`Function\\` though received ${fn}?`);\r\n        }\r\n        return returnCurried(executeArity, executeArity - argsToCurry.length, fn, argsToCurry);\r\n    },\r\n\r\n    /**\r\n     * Curries a function based on it's defined arity (note: rest args param (`...rest`) are not counted in arity).\r\n     * @function module:function.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => curryN((fn || {}).length, fn, ...argsToCurry),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (won't call function until 2 or more args).\r\n     * @function module:function.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (won't call function until 3 or more args).\r\n     * @function module:function.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (won't call function until 4 or more args).\r\n     * @function module:function.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5 (won't call function until 5 or more args).\r\n     * @function module:function.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","/**\r\n * @module utils\r\n */\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a function that takes an argument and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakesOne\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakesOne = name => curry((arg, f) => f[name](arg)),\r\n\r\n    /**\r\n     * Returns a function that takes 2 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes2\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes2 = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    /**\r\n     * Returns a function that takes 3 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes3\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes3 = name => curry((arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3)),\r\n\r\n    /**\r\n     * Returns a function that takes 4 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes4\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes4 = name => curry((arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4)),\r\n\r\n    /**\r\n     * Returns a function that takes 5 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes5\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes5 = name => curry((arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5)),\r\n\r\n    /**\r\n     * Returns a function that takes an object and one or more arguments on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakesOneOrMore\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakesOneOrMore = name => curry2((f, ...args) => f[name](...args))\r\n\r\n;\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n * @module _jsPlatform_arrayOps\r\n * @private\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Array.prototype.reverse generator (generates a function that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, []),\r\n\r\n    /**\r\n     * Maps a function to functor (list etc.).\r\n     * @function module:_jsPlatform_array.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:_jsPlatform_array.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from the right with passed in function.\r\n     * @function module:_jsPlatform_array.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:listPrelude.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an list (shimmed if not exists).\r\n     * @function module:listPrelude.reverse\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","import {curry, curry2} from '../function/curry';\r\n\r\n/**\r\n * Created by elydelacruz on 9/7/2017.\r\n * @memberOf function\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:function.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry((fn, args) => fn.apply(null, args)),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:function.call\r\n     * @param fn {Function}\r\n     * @param args {...*}\r\n     * @returns {*}\r\n     */\r\n    call = curry2((fn, ...args) => fn.call(null, ...args));\r\n","import {reverse} from '../jsPlatform/array';\r\nimport {apply, call} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a curried function requiring given functions arguments in reverse\r\n     * (returned function expects 2 or more variables (curried at 2 or more args)).\r\n     * @function module:function.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     * @curried\r\n     */\r\n    flipN = fn => curry2((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\r\n     * @function module:function.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b)),\r\n\r\n    /**\r\n     * Same as `flip` except returns a flipped function of arity 3.\r\n     * @function module:function.flip3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip3 = fn => curry((c, b, a) => call(fn, a, b, c)),\r\n\r\n    /**\r\n     * Same as `flip` except returns a flipped function of arity 4.\r\n     * @function module:function.flip4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip4 = fn => curry((d, c, b, a) => call(fn, a, b, c, d)),\r\n\r\n    /**\r\n     * Same as `flip` except returns a flipped function of arity 5.\r\n     * @function module:function.flip5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip5 = fn => curry((e, d, c, b, a) => call(fn, a, b, c, d, e));\r\n","/**\r\n * @memberOf object\r\n * @description Defines some of the platform methods for objects (the ones used within `fjl`).\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakes3, fPureTakes4} from '../utils';\r\nimport {curry, curry2} from '../function/curry';\r\nimport {flip} from '../function/flip';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived object.\r\n     * @function module:object.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = curry((instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor),\r\n\r\n    /**\r\n     * @function module:object.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     * @deprecated - Use property directly instead.\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:object.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * Contains all the static functions from `Object` but curried and flipped;\r\n     * @example\r\n     * // E.g., `Object.defineProperties(obj, descriptor)` can now be used like\r\n     * import {defineProperties} from 'fjl'\r\n     * defineProperties(descriptor, someObj),\r\n     * // Et. al.\r\n     * @memberOf module:object\r\n     * @type {{...Object}}\r\n     */\r\n    native = Object.getOwnPropertyNames(Object).reduce((agg, key) => {\r\n        if (typeof Object[key] !== 'function') {\r\n            return agg;\r\n        }\r\n        switch (Object[key].length) {\r\n            case 2:\r\n                agg[key] = flip(fPureTakesOne(key));\r\n                break;\r\n            case 3:\r\n                agg[key] = flip(fPureTakes2(key));\r\n                break;\r\n            case 4:\r\n                agg[key] = flip(fPureTakes3(key));\r\n                break;\r\n            case 5:\r\n                agg[key] = flip(fPureTakes4(key));\r\n                break;\r\n            default:\r\n                agg[key] = Object[key];\r\n                break;\r\n        }\r\n        return agg;\r\n    }, {}),\r\n\r\n    /**\r\n     * Gets passed in object's own enumerable keys (same as `Object.keys`).\r\n     * @function module:object.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    {keys} = native,\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:object.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() => Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            curry2((obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return Object.keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0))\r\n        )();\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\n/**\r\n * Returns the constructor/class/type name of a value.\r\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n * @note Returns 'Undefined' if value is `undefined`\r\n * @note Returns 'Null' if value is `null`\r\n * For values that have no concrete constructors and/or casters\r\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n * @function module:object.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (value === undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\n\r\nimport {typeOf} from './typeOf';\r\nimport {instanceOf, length, keys} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Function = Function.name,\r\n    _Array = Array.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined',\r\n    _NaN = 'NaN';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @function module:object.toTypeRef\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @todo write tests for this function.\r\n     */\r\n    toTypeRef = type => {\r\n        if (!type) {\r\n            return typeOf(type);\r\n        }\r\n        else if (type.constructor === String || (type instanceof Function)) {\r\n            return type;\r\n        }\r\n        return typeOf(type);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of type refs from possible type refs (converts null, undefined, NaN, and other values into\r\n     * type refs (either constructor name or constructor name based on whether value(s) is a string, a constructor, or not).\r\n     * @function module:object.toTypeRefs\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {Array<TypeRef>}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefs = (...types) => types.map(toTypeRef),\r\n\r\n    /**\r\n     * Returns possible Type's TypeRef name.\r\n     * @function module:object.toTypeRefName\r\n     * @param Type {(TypeRef|*)}\r\n     * @returns {String}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefName = Type => {\r\n        const ref = toTypeRef(Type);\r\n        return ref instanceof Function ? ref.name : ref;\r\n    },\r\n\r\n    /**\r\n     * Returns possible Types' TypeRef names.\r\n     * @function module:object.toTypeRefNames\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {String[]}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefNames = (...types) => types.map(toTypeRefName),\r\n\r\n    /**\r\n     * Returns whether a value is a function or not.\r\n     * @function module:object.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = instanceOf(Function),\r\n\r\n    /**\r\n     * Strict type checker.  Checks if given value is a direct instance of given type;  E.g.,\r\n     * @example\r\n     *   isType(String, 'abcdefg')  === true // true\r\n     *   isType(String.name, 'abcdefg') === true\r\n     *   isType(Number, NaN) === false\r\n     *   isType(Number, 99) === true\r\n     *   isType('Null', 99) === false // though, for `null` and `undefined` checks\r\n     *                                // @see `isset`, in this module, instead\r\n     *   isType('Undefined', undefined) === true // true\r\n     *\r\n     * @note Useful where absolute types, or some semblance thereof, are required.\r\n     * @function module:object.isType\r\n     * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry((type, obj) => typeOf(obj) === toTypeRefName(type)),\r\n\r\n    /**\r\n     * Loose type checker;  E.g., If `type` is not a constructor, but a constructor name, does a type check on\r\n     * constructor names, else if first check fails and `type` is a constructor, performs an `instanceof` check\r\n     * on value with constructor.\r\n     * @note Use care when checking for `Array` and/or `Object` since the both are considered objects by `instanceof` checker.\r\n     * @note For `null` and `undefined` their class cased names can be used for type checks\r\n     * `isOfType('Null', null) === true (passes strict type check)` (or better yet `isset` can be used).\r\n     * @throwsafe - Doesn't throw on `null` or `undefined` `obj` values.\r\n     * @example\r\n     * isOfType(Number, 99) === true        // true  (passes strict type check (numbers are not instances of `Number`\r\n     *                                      //        constructor)\r\n     * isOfType('Number', 99) === true      // true  (passes strict type check)\r\n     * isOfType(Number, NaN) === true       // true. (passes instance of check)\r\n     *                                      //        If you want \"true\" strict type checking use `isType`\r\n     * isOfType(Object, []) === true        // true  (passes instance of check)\r\n     * isOfType(Array, []) === true         // true  (passes instance of check)\r\n     * isOfType(Object, {}) === true        // true  (passes instance of check)\r\n     * isOfType(Object.name, {}) === true   // true  (Passes strict type check)\r\n     * class Abc extends String {}\r\n     * isOfType(String, new Abc('abcd')) // true (passes instanceof check)\r\n     *\r\n     * @function module:object.isOfType\r\n     * @param type {Function|String} - Type reference (constructor or `constructor.name`).\r\n     * @param x {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isOfType = curry((type, x) => isType(type, x) || instanceOf(type, x)),\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:object.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a boolean depicting whether a value is callable or not.\r\n     * @function module:object.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an array (same as `Array.isArray`).\r\n     * @function module:object.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    {isArray} = Array,\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:object.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = isType(_Object),\r\n\r\n    /**\r\n     * Checks if value is a boolean.\r\n     * @function module:object.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = isType(_Boolean),\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:object.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = isType(_Number),\r\n\r\n    /**\r\n     * Checks whether value is a string or not.\r\n     * @function module:object.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = isType(_String),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:object.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = isType(_Map),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:object.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = isType(_Set),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:object.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap =isType(_WeakMap),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:object.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = isType(_WeakSet),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:object.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = isType(_Undefined),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:object.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = isType(_Null),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:object.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = isType(_Symbol),\r\n\r\n    /**\r\n     * Checks if given `x` is set and of one of\r\n     *  [String, Boolean, Number, Symbol] (null and undefined are immutable\r\n     *  but are not \"usable\" (usually not what we want to operate on).\r\n     * @function module:object.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return isset(x) &&\r\n            [_String, _Number, _Boolean, _Symbol]\r\n                .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:object.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => !length(x),\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:object.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:object.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in value is empty;  I.e.,\r\n     *  check for one of '', 0, `null`, `undefined`, `false`, empty array, empty object, empty function (zero arity),\r\n     *  or empty collection (es6 Map, Set, WeakMap, or WeakSet etc. (`!value.size`);\r\n     * @function module:object.isEmpty\r\n     * @param value {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = value => {\r\n        if (!value) { // if '', 0, `null`, `undefined`, or `false` then is empty\r\n            return true;\r\n        }\r\n        switch (typeOf(value)) {\r\n            case _Array:\r\n            case _Function:\r\n                return !value.length;\r\n            case _Number: // zero and NaN checks happened above so `if number` then it's 'not-an-empty-number' (lol)\r\n                return false;\r\n            case _Object:\r\n                return !keys(value).length;\r\n            case _Map:\r\n            case _Set:\r\n            case _WeakSet:\r\n            case _WeakMap:\r\n                return !value.size;\r\n            case _NaN:\r\n                return true;\r\n            default:\r\n                return !value;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null or not.\r\n     * @function module:object.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => x !== null && x !== undefined,\r\n\r\n    /**\r\n     * Checks to see if `x` is of one of the given type refs.\r\n     * @function object.isOneOf\r\n     * @param x {*}\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {boolean}\r\n     * @todo write tests for this function.\r\n     */\r\n    isOneOf = (x, ...types) => {\r\n        const typeName = typeOf(x);\r\n        return toTypeRefNames(types).some(name => typeName === name);\r\n    },\r\n\r\n    isFunctor = x => x && x.map && instanceOf(Function, x.map)\r\n\r\n;\r\n","/**\r\n * @memberOf object\r\n */\r\n\r\nimport {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Looks up property and returns it's value; Else `undefined`.\r\n * Method is null safe (will not throw on `null` or `undefined`).\r\n * @function module:object.lookup\r\n * @param key {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\r\nexport const lookup = curry((key, obj) => isset(obj) ? obj[key] : undefined);\r\n","import {isFunction, isset, isUsableImmutablePrimitive} from './is';\r\nimport {apply} from '../jsPlatform/function';\r\n\r\n/**\r\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n * @example\r\n * // - If exists `(value).constructor.of` uses this.\r\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\r\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n * // - Else if constructor is a function, thus far, then calls constructor using\r\n * //      the `new` keyword (with any passed in args).\r\n\r\n * @function module:object.of\r\n * @param x {*} - Value to derive returned value's type from.\r\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n */\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (constructor.hasOwnProperty('of')) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","import {typeOf} from './typeOf';\r\nimport {of} from './of';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Make a copy of a value or optionally copy incoming value onto an outgoing value (second parameter).\r\n     * @note If incoming thing is an immmutable primitive (string, number, symbol, null, undefined, boolean)\r\n     *  it is returned as is.\r\n     * @function module:object.copy\r\n     * @param x {*} - Thing to copy.\r\n     * @param [out = undefined] {*} - Optional value to copy on to.  Not required.\r\n     * @returns {*} - Copied thing or optionally outgoing value copied onto.\r\n     */\r\n    copy = (x, out) => {\r\n        // if `null`, `undefined`, `''`, `0`, `false` return\r\n        if (!x) { return x; }\r\n        switch (typeOf(x)) {\r\n            case Array.name:\r\n                return !out ? x.slice(0) : Object.assign(out, x);\r\n\r\n            // If immutable primitive, return it\r\n            case Symbol.name:\r\n            case Boolean.name:\r\n            case String.name:\r\n            case Number.name:\r\n            case Promise.name:\r\n            case Function.name:\r\n            case 'NaN':\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return x;\r\n\r\n            case 'Map':\r\n            case 'Set':\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n                return new x.constructor(Array.from(x));\r\n\r\n            // Else make copy\r\n            default:\r\n                return Object.assign(!out ? of(x) : out, x);\r\n        }\r\n    }\r\n;\r\n\r\nexport default copy;\r\n","import {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Gives you value at key/namespace-key within `obj`;  E.g.,\r\n     * searchObj('all.your.base', {all: {your: {base: 99}}}) === 99 // `true`\r\n     * @note If key is unreachable (undefined) returns `undefined`.\r\n     *  Useful in cases where we do not want to check each key along the way before getting/checking value;  E.g.,\r\n     * @example\r\n     * ```\r\n     * if (obj && obj.all && obj.all.your && obj.all.your.base) {\r\n     *   // Thing we want to do\r\n     * }\r\n     *\r\n     * // So with our function becomes\r\n     * if (searchObj('all.your.base', obj)) {\r\n     *   // Thing we want to do\r\n     * }\r\n     * ```\r\n     * @function module:object.searchObj\r\n     * @param nsString {String}\r\n     * @param obj {*}\r\n     * @returns {*}\r\n     */\r\n    searchObj = curry((nsString, obj) => {\r\n        if (!obj) { return obj; }\r\n        if (nsString.indexOf('.') === -1) {\r\n            return obj[nsString];\r\n        }\r\n        const parts = nsString.split('.'),\r\n            limit = parts.length;\r\n        let ind = 0,\r\n            parent = obj;\r\n        for (; ind < limit; ind += 1) {\r\n            const node = parent[parts[ind]];\r\n            if (!isset(node)) {\r\n                return node;\r\n            }\r\n            parent = node;\r\n        }\r\n        return parent;\r\n    })\r\n;\r\n","\r\nimport {isObject} from './is';\r\nimport {keys} from '../jsPlatform/object';\r\nimport {curry2} from '../function/curry';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one (takes two or more args).\r\n     * @function module:object.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param [objs] {...{Object}} - One or more objects to merge onto `obj0`.\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = curry2((obj0, ...objs) =>\r\n        !obj0 ? obj0 : objs.reduce((topAgg, obj) =>\r\n            !obj ? topAgg : keys(obj).reduce((agg, key) => {\r\n                let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                // If property is not writable move to next item in collection\r\n                if (agg.hasOwnProperty(key) && propDescription &&\r\n                    !(propDescription.get && propDescription.set) &&\r\n                    !propDescription.writable) {\r\n                    return agg;\r\n                }\r\n                if (isObject(agg[key]) && isObject(obj[key])) {\r\n                    assignDeep(agg[key], obj[key]);\r\n                }\r\n                else { agg[key] = obj[key]; }\r\n                return agg;\r\n            }, topAgg)\r\n        , obj0));\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n *      on both strings and arrays.\r\n *      @memberOf list\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:list.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:list.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:list.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:list.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:list.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * @module boolean\r\n * @description Contains functional version of 'always-true', 'always-false', 'is-truthy', and 'is-falsy'.\r\n */\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:boolean.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:boolean.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value,\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:boolean.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:boolean.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false,\r\n\r\n    /**\r\n     * Equality operator.\r\n     * @function module:boolean.equal\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {boolean}\r\n     */\r\n    equal = curry((a, b) => a === b),\r\n\r\n    /**\r\n     * Equality operator for all.\r\n     * @function module:boolean.equalAll\r\n     * @param a {*} - Item `0`.\r\n     * @param args {...*} - Others\r\n     * @returns {boolean}\r\n     */\r\n    equalAll = curry2((a, ...args) => args.every(b => equal(a, b)))\r\n\r\n;\r\n","import {length} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\nimport {typeOf} from '../object/typeOf';\r\nimport {of} from '../object/of';\r\nimport {isFunctor, isset} from '../object/is';\r\n\r\n/**\r\n * Maps a function onto a List (string or array) or a functor (value containing a map method).\r\n * @function module:list.map\r\n * @param fn {Function} - Function to map on given value.\r\n * @param xs {Array|String|*}\r\n * @returns {Array|String|*}\r\n */\r\nconst map = curry((fn, xs) =>  {\r\n    if (!isset(xs)) { return xs; }\r\n    let out = of(xs),\r\n        limit,\r\n        i = 0;\r\n    switch (typeOf(xs)) {\r\n        case 'Array':\r\n            limit = length(xs);\r\n            if (!limit) { return out; }\r\n            for (; i < limit; i += 1) {\r\n                out.push(fn(xs[i], i, xs));\r\n            }\r\n            return out;\r\n        case 'String':\r\n            limit = length(xs);\r\n            if (!xs) { return out; }\r\n            for (; i < limit; i += 1) {\r\n                out += fn(xs[i], i, xs);\r\n            }\r\n            return out;\r\n        default:\r\n            if (isFunctor(xs)) { return xs.map(fn); }\r\n\r\n            // Other objects\r\n            return Object.keys(xs).reduce((agg, key) => {\r\n                out[key] = fn(xs[key], key, xs);\r\n                return out;\r\n            }, out);\r\n    }\r\n});\r\n\r\nexport default map;\r\n","\r\nexport const\r\n\r\n    /**\r\n     * Pushes incoming `item` onto given array and returns said array.\r\n     * @private\r\n     * @param agg {Array}\r\n     * @param item {*}\r\n     * @returns {Array}\r\n     */\r\n    aggregateArray = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    }\r\n\r\n;\r\n","/**\r\n * List operator utils module.\r\n * @module listUtils\r\n */\r\nimport {apply}          from '../jsPlatform/function';  // un-curried version\r\nimport {slice}          from '../jsPlatform/list';      // un-curried version good for both strings and arrays\r\nimport {length}         from '../jsPlatform/object';\r\nimport {alwaysFalse}    from '../boolean';\r\nimport map              from './map';\r\nimport {curry, curry2}  from '../function/curry';\r\n\r\nexport * from './aggregation';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @function module:listUtils.sliceFrom\r\n     * @param startInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = curry((startInd, xs) => slice(startInd, undefined, xs)),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @function module:listUtils.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = curry((toInd, xs) => slice(0, toInd, xs)),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function listUtils.sliceCopy\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceCopy = sliceFrom(0),\r\n\r\n    /**\r\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n     * @function module:listUtils.genericAscOrdering\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {number}\r\n     */\r\n    genericAscOrdering = curry((a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    }),\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @function module:listUtils.lengths\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = curry2((...lists) => map(length, lists)),\r\n\r\n    /**\r\n     * Returns a list of lists trimmed to the shortest length in given list of lists.   @background This method is used by the `zip*` functions to achieve their\r\n     *  'slice to smallest' functionality.\r\n     * @function module:listUtils.toShortest\r\n     * @param lists {...(Array|String|*)}\r\n     * @returns {Array|String|*}\r\n     */\r\n    toShortest = curry2((...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : sliceCopy(list), lists);\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate.\r\n     * @function module:listUtils.reduceUntil\r\n     * @param pred {Function} - `(item, index, list) => Boolean(...)`\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceUntil = curry((pred, op, agg, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { break; }\r\n            result = op(result, xs[ind], ind, xs);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate (from right to left).\r\n     * @function module:listUtils.reduceUntilRight\r\n     * @param pred {Function} - `(item, index, list) => Boolean(...)`\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceUntilRight = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces a list with given operation (`op`) function.\r\n     * @function module:listUtils.reduce\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduce = reduceUntil(alwaysFalse),\r\n\r\n    /**\r\n     * Reduces a list with given operation (`op`) function (from right-to-left).\r\n     * @function module:listUtils.reduceRight\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceRight = reduceUntilRight(alwaysFalse),\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:listUtils.lastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:listUtils.findIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = curry((pred, arr) => {\r\n        let ind = 0;\r\n        const limit = length(arr);\r\n        for (; ind < limit; ind += 1) {\r\n            const predicateFulfilled = !!pred(arr[ind], ind, arr);\r\n            if (predicateFulfilled) {\r\n                return ind;\r\n            }\r\n        }\r\n        return -1;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:listUtils.findIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = curry((pred, arr) => {\r\n        let ind = length(arr) - 1;\r\n        for (; ind >= 0; ind -= 1) {\r\n            const predicateFulfilled = !!pred(arr[ind], ind, arr);\r\n            if (predicateFulfilled) {\r\n                return ind;\r\n            }\r\n        }\r\n        return -1;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listUtils.findIndicesWhere\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = curry((pred, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out.length ? out : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listUtils.findWhere\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n    })\r\n\r\n;\r\n","import {assignDeep} from './assignDeep';\r\nimport {keys} from '../jsPlatform/object';\r\nimport {reduce} from '../list/utils';\r\nimport {curry, curry2} from '../function/curry';\r\n\r\nexport const\r\n\r\n    objUnion = curry((obj1, obj2) => assignDeep(obj1, obj2)),\r\n\r\n    objIntersect = curry((obj1, obj2) => reduce((agg, key) => {\r\n        if (obj2.hasOwnProperty(key)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objDifference = curry((obj1, obj2) => reduce((agg, key) => {\r\n        if (!obj2.hasOwnProperty(key)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objComplement = curry2((obj0, ...objs) => reduce((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs));\r\n","/**\r\n * @module console\r\n * @description Console exports.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * `Console.log` method.\r\n     * @function module:console.log\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    log = console.log.bind(console),\r\n\r\n    /**\r\n     * `Console.error` method.\r\n     * @function module:console.error\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    error = console.error.bind(console),\r\n\r\n    /**\r\n     * Peeks (console.log) at incoming value(s) and returns the last value.\r\n     * @function module:console.peek\r\n     * @param args {...*}\r\n     * @returns {*} Last given value (if one or more values) else first value.\r\n     */\r\n    peek = (...args) => (log(...args), args.pop())\r\n\r\n;\r\n","export const\r\n\r\n    /**\r\n     * Clones and object or array using `JSON.parse(JSON.stringify(...))` pattern.\r\n     * @function module:object.jsonClone\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    jsonClone = x => JSON.parse(JSON.stringify(x))\r\n\r\n;\r\n","import {isArray, isType} from './is';\r\nimport {keys} from '../jsPlatform/object';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns an associated list from given object.\r\n     * @note Useful for working with plain javascript objects.\r\n     * @function module:object.toAssocList\r\n     * @param obj {(Object|Array|*)}\r\n     * @returns {Array.<*, *>}\r\n     */\r\n    toAssocList = obj => keys(obj).map(key => [key, obj[key]]),\r\n\r\n    /**\r\n     * Returns an associated list from given object (deeply (on incoming object's type)).\r\n     * @note Does deep conversion on all values of passed in type's type.\r\n     * @function module:object.toAssocListDeep\r\n     * @param obj {*}\r\n     * @param [TypeConstraint = Object] {(Constructor|Function)} - Type constraint to convert on.\r\n     * @returns {*}\r\n     */\r\n    toAssocListDeep = (obj, TypeConstraint = Object) => keys(obj).map(key =>\r\n        TypeConstraint && isType(TypeConstraint, obj[key]) ?\r\n            [key, toAssocListDeep(obj[key], TypeConstraint)] :\r\n            [key, obj[key]]\r\n    ),\r\n\r\n    /**\r\n     * From associated list to object.\r\n     * @function module:object.fromAssocList\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocList = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType()),\r\n\r\n    /**\r\n     * From associated list to object (deep conversion on associative lists (array of 2 value arrays)).\r\n     * @note Considers array of arrays associated lists.\r\n     * @function module:object.fromAssocListDeep\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocListDeep = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        if (isArray(value) && isArray(value[0]) && value[0].length === 2) {\r\n            agg[key] = fromAssocListDeep(value, OutType);\r\n            return agg;\r\n        }\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType())\r\n;\r\n","import {typeOf} from './typeOf';\r\nimport {toAssocList} from './assocList';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Converts incoming value to an array.\r\n     * @note For `WeakMap`, `WeakSet`, `Map` and `Set` result is the same as calling `Array.from` on such.\r\n     * @note For `null`, `undefined`, `NaN`, `Number{}`, `Symbol{}`, `Boolean{}` returns an empty array.\r\n     * @note Method does a shallow conversion;\r\n     * @function module:object.toArray\r\n     * @param x {*} - Thing to convert from.\r\n     * @returns {Array}\r\n     */\r\n    toArray = x => {\r\n        switch (typeOf(x)) {\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return [];\r\n            case String.name:\r\n            case Array.name:\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n            case 'Map':\r\n            case 'Set':\r\n                return Array.from(x);\r\n            case Object.name:\r\n            default:\r\n                return toAssocList(x);\r\n        }\r\n    }\r\n\r\n;\r\n","/**\r\n * @module object\r\n * @description Object operations/combinators.\r\n */\r\n\r\nexport * from './jsPlatform/object';\r\nexport * from './object/lookup';\r\nexport * from './object/typeOf';\r\nexport * from './object/copy';\r\nexport * from './object/is';\r\nexport * from './object/of';\r\nexport * from './object/searchObj';\r\nexport * from './object/assignDeep';\r\nexport * from './object/setTheory';\r\nexport * from './object/console';\r\nexport * from './object/jsonClone';\r\nexport * from './object/toArray';\r\nexport * from './object/assocList';\r\n","import {reduceRight} from '../jsPlatform/array';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the function on the left of itself.\r\n * @function module:function.compose\r\n * @type {Function}\r\n * @param args {...{Function}}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) =>\r\n        arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:function.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\nimport {apply} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Negates a function that takes one/no argument.\r\n     * @function module:function.negateF\r\n     * @param fn {Function}\r\n     * @returns {function(*=): boolean}\r\n     */\r\n    negateF = fn => x => !fn(x),\r\n\r\n    /**\r\n     * Takes a function that takes two parameters and returns a negated version of given\r\n     * function.\r\n     * @function module:_negate.negateF2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF2 = fn => curry((a, b) => !fn(a, b)),\r\n\r\n    /**\r\n     * Takes a function that takes three parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF3 = fn => curry((a, b, c) => !fn(a, b, c)),\r\n\r\n    /**\r\n     * Returns a negated version of given function.\r\n     * Returned function is variadiac (takes one or more arguments).\r\n     * @note function returned is uncurried.\r\n     * @uncurried\r\n     * @function module:function.negateFN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFN = fn => curry2((...args) => !apply(fn, args));\r\n","import {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true` (like a functional\r\n     *  version of a while loop).\r\n     * @function module:function.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = curry((predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    });\r\n","import {typeOf} from '../object/typeOf';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a function or throws an error if given `f` is not a function.\r\n     * @function module:function.fnOrError\r\n     * @param symbolName {String} - Error message prefix.\r\n     * @param f {Function|*} - Expected function.\r\n     * @returns {Function}\r\n     * @throws {Error} - Error if `f` is not of `function`\r\n     */\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || !(f instanceof Function)) {\r\n            throw new Error(`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    }\r\n\r\n;\r\n","/**\r\n * No-op ('op' as in 'operation') - Performs no operation 'always' (good for places where\r\n * a value should always be a function etc.).\r\n * @function module:function.noop\r\n * @returns {undefined}\r\n */\r\nexport const noop = () => undefined;\r\n","/**\r\n * @module function\r\n */\r\nexport * from './jsPlatform/function';\r\nexport * from './function/compose';\r\nexport * from './function/curry';\r\nexport * from './function/flip';\r\nexport * from './function/id';\r\nexport * from './function/negate';\r\nexport * from './function/until';\r\nexport * from './function/fnOrError';\r\nexport * from './function/noop';\r\n","/**\r\n * @module object\r\n */\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Normalizes step for `from` and `to` combination.\r\n * @function module:list.normalizeStep\r\n * @param from {Number}\r\n * @param to {Number}\r\n * @param [step = 1] {Number}\r\n * @returns {Number}\r\n * @private\r\n */\r\nconst normalizeStep = (from, to, step) => {\r\n    if (from > to) {\r\n        return step > 0 ? -step : step; // make step negative\r\n    }\r\n    return step < 0 ? -1 * step : step; // make step positive\r\n};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Range function - gives you an array contain numbers in given range.\r\n     * @note normalizes `step` to be valid if range numbers given are invalid\r\n     *  (forces `step` to be negative if range required is in the negative direction\r\n     *  and forces `step` to be positive if range required is in the other direction).\r\n     * @function module:list.range\r\n     * @param from {Number}\r\n     * @param to {Number}\r\n     * @param [step = 1] {Number}\r\n     * @returns {Array.<Number>}\r\n     */\r\n    range = curry((from, to, step = 1) => {\r\n        let i = from;\r\n        const out = [];\r\n        step = normalizeStep(from, to, step);\r\n        if (step === 0 || from === to) { return [from]; }\r\n        for (; (to - i) * step >= 0; i += step) { out.push(i); }\r\n        return out;\r\n    })\r\n;\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:_string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * @module jsPlatform_\r\n * @private\r\n */\r\nexport * from './jsPlatform/object';\r\nexport * from './jsPlatform/array';\r\nexport * from './jsPlatform/list';\r\nexport * from './jsPlatform/string';\r\nexport * from './jsPlatform/function';\r\n","/**\r\n * List operations module.\r\n * @module list\r\n */\r\nimport {concat as listAppend, indexOf, slice, includes} from './jsPlatform/list';\r\nimport {apply} from './jsPlatform/function';\r\nimport {length} from './jsPlatform/object';\r\nimport {negateF3, negateF2} from './function/negate';\r\nimport {curry, curry2, curry3} from './function/curry';\r\nimport {isTruthy, isFalsy} from './boolean';\r\nimport {lookup} from './object/lookup';\r\nimport {of} from './object/of';\r\nimport {isset, isString} from './object/is';\r\nimport {typeOf} from './object/typeOf';\r\nimport map from './list/map';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    toShortest, aggregateArray,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, sliceCopy, genericAscOrdering\r\n}\r\n    from './list/utils';\r\n\r\nexport * from './list/range';\r\n\r\nexport * from './list/utils';\r\n\r\nexport {map};\r\n\r\nexport {slice, includes, indexOf, lastIndexOf, push} from './jsPlatform';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Append two, or more, lists, i.e.,\r\n     * @example\r\n     * expectEqual(append(take(13, alphabetString), drop(13, alphabetString)), alphabetString); // true\r\n     *\r\n     * // Another example\r\n     * const result = append(\r\n     *   alphabetStr.split(''),\r\n     *   alphabetStr.split('')\r\n     * ),\r\n     * expected = repeat(2, alphabetStr).split('');\r\n     *\r\n     * shallowEquals(result, expected) === true // `true`\r\n     *\r\n     * @function module:list.append\r\n     * @param [args] {...(Array|String|*)} - One or more lists or list likes (strings etc.).\r\n     * @returns {(Array|String|*)} - Same type as list like passed in.\r\n     */\r\n    append = curry2((...args) => apply(listAppend, args)),\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:list.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:list.last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:list.tail\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:list.init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:list.uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|undefined}\r\n     */\r\n    uncons = xs => !xs || length(xs) === 0 ? undefined : [head(xs), tail(xs)],\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:list.unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    unconsr = xs => !xs || length(xs) === 0 ? undefined : [init(xs), last(xs)],\r\n\r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:list.concat\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    concat = xs => {\r\n        switch (length(xs)) {\r\n            case undefined:\r\n            case 0:\r\n                return [];\r\n            case 1:\r\n                const item0 = xs[0];\r\n                return item0 && item0.slice ? sliceCopy(item0) : item0;\r\n            case 2:\r\n            default:\r\n                return apply(append, xs);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:list.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array}\r\n     * @returns {Array}\r\n     */\r\n    concatMap = curry((fn, foldableOfA) => concat(map(fn, foldableOfA))),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:list.reverse\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    reverse = xs => {\r\n        if (!isset(xs) || !xs.length) {\r\n            return xs;\r\n        }\r\n        let out = of(xs),\r\n            i = xs.length - 1;\r\n        switch (typeOf(xs)) {\r\n            case 'String':\r\n                for (; i >= 0; i -= 1) {\r\n                    out += xs[i];\r\n                }\r\n                return out;\r\n            default:\r\n                for (; i >= 0; i -= 1) {\r\n                    out.push(xs[i]);\r\n                }\r\n                return out;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the\r\n     *  elements of the list.\r\n     * @function module:list.intersperse\r\n     * @note In our version of the function javascript is loosely typed so,\r\n     *  so is our function (to much overhead to make it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array|String} - List.\r\n     * @returns {Array|String}\r\n     */\r\n    intersperse = curry((between, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return xs;\r\n        }\r\n        const limit = xs.length,\r\n            lastInd = limit - 1;\r\n        let out = of(xs),\r\n            i = 0;\r\n        if (isString(xs)) {\r\n            for (; i < limit; i += 1) {\r\n                out += i === lastInd ?\r\n                    xs[i] : xs[i] + between;\r\n            }\r\n            return out;\r\n        }\r\n        for (; i < limit; i += 1) {\r\n            if (i === lastInd) {\r\n                out.push(xs[i]);\r\n            } else {\r\n                out.push(xs[i], between);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:list.intercalate\r\n     * @param xs {Array|String}\r\n     * @param xss {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    intercalate = curry((xs, xss) => {\r\n        if (isString(xss)) {\r\n            return intersperse(xs, xss);\r\n        }\r\n        return concat(intersperse(xs, xss));\r\n    }),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:list.transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return [];\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return filter(x => length(x) > 0, outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:list.subsequences\r\n     * @jsperftest https://jsperf.com/subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array.<Array>}\r\n     */\r\n    subsequences = xs => {\r\n        const listLen = length(xs),\r\n            len = Math.pow(2, listLen),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            let entry = [];\r\n            for (let j = 0; j < listLen; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with the given indices swapped.\r\n     * @function module:list.swapped\r\n     * @param ind1 {Number}\r\n     * @param ind2 {Number}\r\n     * @param list {Array}\r\n     * @returns {Array} - Copy of incoming with swapped values at indices.\r\n     */\r\n    swapped = curry((ind1, ind2, list) => {\r\n        const out = sliceCopy(list),\r\n            tmp = out[ind1];\r\n        out[ind1] = out[ind2];\r\n        out[ind2] = tmp;\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Returns a list of permutations for passed in list.\r\n     *  Use caution with lists above a length of 15 (will take long due to nature of\r\n     *  algorithm).\r\n     * @function module:list.permutations\r\n     * @param xs {Array} - List.\r\n     * @returns {Array<Array|String|*>} - Array of permutations.\r\n     */\r\n    permutations = xs => {\r\n        const limit = length(xs);\r\n\r\n        if (!limit || limit === 1) {\r\n            return [xs];\r\n        }\r\n\r\n        let list = sliceCopy(xs),\r\n            c = repeat(limit, 0),\r\n            i = 0;\r\n\r\n        const out = [list];\r\n\r\n        for (; i < limit; i++) {\r\n            if (c[i] < i) {\r\n                list = swapped(i % 2 === 0 ? 0 : c[i], i, list);\r\n                out.push(list);\r\n                c[i] += 1;\r\n                i = 0;\r\n                continue;\r\n            }\r\n            c[i] = 0;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\r\n     * @function module:list.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldl = reduce,\r\n\r\n    /**\r\n     * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\r\n     * @function module:list.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldr = reduceRight,\r\n\r\n    /**\r\n     * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldl1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldl1 = curry((op, xs) => {\r\n        const parts = uncons(xs);\r\n        return !parts ? [] : reduce(op, parts[0], parts[1]);\r\n    }),\r\n\r\n    /**\r\n     * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldr1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldr1 = curry((op, xs) => {\r\n        const parts = unconsr(xs);\r\n        return !parts ? [] : reduceRight(op, parts[1], parts[0]);\r\n    }),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregateArray on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregateArray on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * iterate f x returns an infinite list of repeated applications of f to x.\r\n     * @function module:list.iterate\r\n     * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation.\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry((limit, op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            lastX = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out.push(lastX);\r\n            lastX = op(lastX, ind);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times.\r\n     * @function module:list.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    repeat = curry((limit, x) => iterate(limit, a => a, x)),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:list.replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    replicate = repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:list.cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    cycle = curry((limit, xs) => concat(replicate(limit, xs))),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:list.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregateArray and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry((op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:list.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:list.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:list.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry((x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry((value, xs) => findIndices(x => x === value, xs)),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:list.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = sliceTo,\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:list.drop\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = sliceFrom,\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:list.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String} - functor (list or string) to split.\r\n     * @returns {Array|String} - List like type passed\r\n     */\r\n    splitAt = (ind, list) => [sliceTo(ind, list), sliceFrom(ind, list)],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:list.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry((pred, list) =>\r\n        reduceUntil(\r\n            negateF3(pred),     // predicate\r\n            isString(list) ?\r\n                (agg, x) => agg + x :\r\n                aggregateArray, // operation\r\n            of(list),           // aggregate\r\n            list\r\n        )),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:list.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry((pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere(\r\n                    (x, i, xs) => !pred(x, i, xs),\r\n                    list\r\n                );\r\n\r\n        return splitPoint === -1 ?\r\n            sliceFrom(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.dropWhileEnd\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry((pred, list) => {\r\n        const splitPoint =\r\n            findIndexWhereRight(\r\n                (x, i, xs) => !pred(x, i, xs),\r\n                list\r\n            );\r\n        if (splitPoint === -1) {\r\n            return of(list);\r\n        }\r\n        return sliceTo(splitPoint + 1, list);\r\n    }),\r\n\r\n    /**\r\n     * Gives you the `span` of items matching predicate\r\n     * and items not matching predicate;  E.g., Gives an\r\n     * array of arrays;  E.g., [[matching-items], [non-matching-items]]\r\n     * @function list.span\r\n     * @param pred {Function} - List predicate (`(x, i, list) => bool`)\r\n     * @param list {Array|String}\r\n     * @returns {(Array<Array<*>>|Array<String>)}\r\n     * @type {Function}\r\n     */\r\n    span = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(negateF3(pred), list);\r\n        return splitPoint === -1 ?\r\n            [sliceFrom(0, list), of(list)] :\r\n            splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * breakOnList, applied to a predicate p and a list xs, returns a tuple\r\n     * where first element is longest prefix (possibly empty) of xs of elements\r\n     * that do not satisfy p and second element is the remainder of the list:\r\n     * @haskellExample\r\n     * Replace `break` with `breakOnList` for our version.\r\n     * ```\r\n     * breakOnList (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\r\n     * breakOnList (< 9) [1,2,3] == ([],[1,2,3])\r\n     * breakOnList (> 9) [1,2,3] == ([1,2,3],[])\r\n     * ```\r\n     * @function module:list.breakOnList\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    breakOnList = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(negateF3(pred), list);\r\n        return splitPoint === -1 ?\r\n            [of(list), sliceFrom(0, list)] : reverse(splitAt(splitPoint, list));\r\n    }),\r\n\r\n    /**\r\n     * Gets item at index.\r\n     * @function module:list.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*|undefined} - Item or `undefined`.\r\n     */\r\n    at = lookup,\r\n\r\n    /**\r\n     * Find an item in structure of elements based on given predicate (`pred`).\r\n     * @function module:list.find\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*} - Found item.\r\n     */\r\n    find = findWhere,\r\n\r\n    /**\r\n     * For each function (same as `[].forEach` except in functional format).\r\n     * @function module:list.forEach\r\n     * @param fn {Function} - Operation (`(element, index, list) => {...}`, etc.)\r\n     * @param xs {(Array|String)}\r\n     * @returns {void}\r\n     */\r\n    forEach = curry((fn, list) => {\r\n        const limit = length(list);\r\n        if (!limit) {\r\n            return;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            fn(list[ind], ind, list);\r\n        }\r\n    }),\r\n\r\n    /**\r\n     * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\r\n     * @function module:list.filter\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array} - Structure of filtered elements.\r\n     */\r\n    filter = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out.push(xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateF3(p), xs)]`.\r\n     * @function module:list.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry((pred, list) =>\r\n        !length(list) ?\r\n            [[], []] :\r\n            [filter(pred, list), filter(negateF3(pred), list)]),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether an element exists in given structure of elements.\r\n     * @function module:list.elem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    elem = includes,\r\n\r\n    /**\r\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\r\n     * @function module:list.notElem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    notElem = negateF2(includes),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a prefix of list `xs2`\r\n     * @function module:list.isPrefixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isPrefixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a suffix of list `xs2`\r\n     * @function module:list.isSuffixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSuffixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is an infix of list `xs2`\r\n     * @function module:list.isInfixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isInfixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a sub-sequence of list `xs2`\r\n     * @function module:list.isSubsequenceOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSubsequenceOf = curry((xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:list.group\r\n     * @param xs {Array|String}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    group = xs => groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:list.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry((equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return sliceCopy(xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    }),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(inits('abc'), ['','a','ab','abc'])\r\n     * ```\r\n     * @function module:list.inits\r\n     * @haskellType `inits :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => init(list), xs),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\r\n     * ```\r\n     * @function module:list.tails\r\n     * @haskellType `tails :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => tail(list), xs),\r\n\r\n    /**\r\n     * Strips prefix list from given list\r\n     * @function module:list.stripPrefix\r\n     * @param prefix {Array|String|*}\r\n     * @param list {Array|string|*}\r\n     * @returns {Array|*}\r\n     */\r\n    stripPrefix = curry((prefix, list) =>\r\n        isPrefixOf(prefix, list) ?\r\n            splitAt(length(prefix), list)[1] :\r\n            sliceCopy(list)),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:list.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry((arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = toShortest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:list.zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    zipN = curry2((...lists) => {\r\n        const trimmedLists = apply(toShortest, lists);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:list.zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip3 = curry((arr1, arr2, arr3) => zipN(arr1, arr2, arr3)),\r\n\r\n    /**\r\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:list.zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip4 = curry((arr1, arr2, arr3, arr4) => zipN(arr1, arr2, arr3, arr4)),\r\n\r\n    /**\r\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:list.zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @param arr5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip5 = curry((arr1, arr2, arr3, arr4, arr5) => zipN(arr1, arr2, arr3, arr4, arr5)),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:list.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry((op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = toShortest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:list.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = curry3((op, ...lists) => {\r\n        const trimmedLists = apply(toShortest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, apply(op, map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:list.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = curry((op, xs1, xs2, xs3) => zipWithN(op, xs1, xs2, xs3)),\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:list.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = curry((op, xs1, xs2, xs3, xs4) => zipWithN(op, xs1, xs2, xs3, xs4)),\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:list.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @param xs5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = curry((op, xs1, xs2, xs3, xs4, xs5) => zipWithN(op, xs1, xs2, xs3, xs4, xs5)),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @function module:list.unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    unzip = foldl((agg, item) => {\r\n        agg[0].push(item[0]);\r\n        agg[1].push(item[1]);\r\n        return agg;\r\n    }, [[], []]),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @function module:list.unzipN\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    /**\r\n     * Returns true if any item in container passes predicate `p`.\r\n     * @function module:list.any\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    any = curry((p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Returns true if all items in container pass predicate `p`.\r\n     * @function module:list.all\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    all = curry((p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Conjuction of container of bools (or truthy and/or falsy values);  Returns\r\n     * `true` if all in container are 'truthy' else returns `false`\r\n     * @function module:list.and\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    and = xs => all(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether any item in container is 'truthy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.or\r\n     * @haskellType `or :: Bool -> Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    or = xs => any(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether all items in container are 'falsy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.not\r\n     * @haskellType `not :: Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    not = xs => all(isFalsy, xs),\r\n\r\n    /**\r\n     * Computes the sum of the numbers of a structure.\r\n     * @function module:list.sum\r\n     * @haskellType `sum :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    sum = list => foldl((agg, x) => agg + x, 0, list),\r\n\r\n    /**\r\n     * Computes the product of the numbers of a structure.\r\n     * @function module:list.product\r\n     * @haskellType `product :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    product = list => foldl((agg, x) => agg * x, 1, list),\r\n\r\n    /**\r\n     * Returns the largest element in a non-empty structure of elements.\r\n     * @function module:list.maximum\r\n     * @haskellType `maximum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    maximum = list => last(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * Returns the smallest element in a non-empty structure of elements.\r\n     * @function module:list.minimum\r\n     * @haskellType `minimum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    minimum = list => head(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\r\n     * ```\r\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\r\n     * ```\r\n     * Also note that:\r\n     * ```\r\n     * last (scanl f z xs) == foldl f z xs.\r\n     * ```\r\n     * @function module:list.scanl\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            result = zero,\r\n            out = [];\r\n        while (ind < limit) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind++;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `scanl1` is a variant of `scanl` that has no starting value argument:\r\n     * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\r\n     * @function module:list.scanl1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return [];\r\n        }\r\n        return scanl(fn, head(xs), tail(xs));\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanl` but from the right (similiar to `foldr`'s relationship to 'foldl').\r\n     * Note also `scanr`'s relationship ot `foldr`:\r\n     * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\r\n     * @function module:list.scanr\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = limit - 1,\r\n            result = xs[0],\r\n            out = [];\r\n        while (ind > -1) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind--;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanr` but takes no zero/accumulator value.\r\n     * @function module:list.scanr1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return [];\r\n        }\r\n        return scanr(fn, last(xs), init(xs));\r\n    }),\r\n\r\n    /**\r\n     * The nub function removes duplicate elements from a list.\r\n     * In particular, it keeps only the first occurrence of each element.\r\n     * (The name nub means `essence'.) It is a special case of nubBy, which\r\n     * allows the programmer to supply their own equality test.\r\n     * ```shallowCompare( nub ([1,2,3,4,3,2,1,2,4,3,5]), [1,2,3,4,5] )```\r\n     * @function module:list.nub\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nub = list => nubBy((a, b) => a === b, list),\r\n\r\n    /**\r\n     * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\r\n     * For example, `remove('a', 'banana') === 'bnana';`\r\n     * @function module:list.remove\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    remove = curry((x, list) => removeBy((a, b) => a === b, x, list)),\r\n\r\n    /**\r\n     * The sort function implements a stable sorting algorithm.\r\n     * It is a special case of sortBy, which allows the programmer\r\n     * to supply their own comparison function.\r\n     * ```shallowCompare(sort ([1,6,4,3,2,5]), [1,2,3,4,5,6]) // true```\r\n     * @function module:list.sort\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sort = xs => sortBy(genericAscOrdering, xs),\r\n\r\n    /**\r\n     * Sort a list by comparing the results of a key function applied to each\r\n     * element. sortOn f is equivalent to sortBy (comparing f), but has the\r\n     * performance advantage of only evaluating f once for each element in the\r\n     * input list. This is called the decorate-sort-undecorate paradigm, or\r\n     * Schwartzian transform.\r\n     *\r\n     * Elements are arranged from from lowest to highest, keeping duplicates\r\n     * in the order they appeared in the input.\r\n     *\r\n     * Ex:\r\n     * ```\r\n     * shallowEquals(\r\n     *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\r\n     *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\r\n     * ) // true\r\n     * ```\r\n     * @function module:list.sortOn\r\n     * @param valueFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sortOn = curry((valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            sortBy(\r\n                // Ordering\r\n                ([a0], [b0]) => genericAscOrdering(a0, b0),\r\n\r\n                // Decorate\r\n                map(item => [valueFn(item), item], xs)\r\n            )\r\n        )\r\n    ),\r\n\r\n    /**\r\n     * The sortBy function is the non-overloaded (in haskell terms) version of sort.\r\n     * @haskellExample ```\r\n     *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\r\n     *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\r\n     * ```\r\n     * @function module:list.sortBy\r\n     * @param orderingFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sortBy = curry((orderingFn, xs) => sliceCopy(xs).sort(orderingFn || genericAscOrdering)),\r\n\r\n    /**\r\n     * The insert function takes an element and a list and inserts the element\r\n     * into the list at the first position where it is less than or equal to the\r\n     * next element. In particular, if the list is sorted before the call, the\r\n     * result will also be sorted. It is a special case of insertBy, which allows\r\n     * the programmer to supply their own comparison function.\r\n     * @function module:list.insert\r\n     * @param x {*}\r\n     * @param xs {Array|*}\r\n     * @returns {Array}\r\n     */\r\n    insert = curry((x, xs) => {\r\n        if (!xs.length) {\r\n            return of(xs, x);\r\n        }\r\n        const foundIndex = findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? concat([xs, of(xs, x)]) :\r\n            concat(intersperse(of(xs, x), splitAt(foundIndex, xs)));\r\n    }),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:list.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` means 'something that is order-able'\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array} - List to insert into (note new list is returned)\r\n     * @returns {Array} - New list.\r\n     */\r\n    insertBy = curry((orderingFn, x, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return [x];\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = splitAt(ind, xs);\r\n                return concat([parts[0], [x], parts[1]]);\r\n            }\r\n        }\r\n        return aggregateArray(sliceCopy(xs), x);\r\n    }),\r\n\r\n    /**\r\n     * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\r\n     * @function module:list.nubBy\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nubBy = curry((pred, list) => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = [],\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out.push(currItem);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Behaves the same as `remove`, but takes a user-supplied equality predicate.\r\n     * @function module:list.removeBy\r\n     * @param pred {Function} - Equality predicate `(a, b) => bool`\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeBy = curry((pred, x, list) => {\r\n        const foundIndex = findIndex(item => pred(x, item), list);\r\n        if (foundIndex > -1) {\r\n            const parts = splitAt(foundIndex, list);\r\n            return append(parts[0], tail(parts[1]));\r\n        }\r\n        return sliceCopy(list);\r\n    }),\r\n\r\n    /**\r\n     * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\r\n     * occurrence of each element of the second list removed.\r\n     * @function module:list.removeFirstBy\r\n     * @param pred {Function}\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeFirstsBy = curry((pred, xs1, xs2) =>\r\n        foldl((agg, x) => removeBy(pred, x, agg), xs1, xs2)),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:list.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    unionBy = curry((pred, arr1, arr2) =>\r\n        foldl((agg, b) => {\r\n                const alreadyAdded = any(a => pred(a, b), agg);\r\n                return !alreadyAdded ? (agg.push(b), agg) : agg;\r\n            }, sliceCopy(arr1), arr2\r\n        )),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:list.union\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    union = curry((arr1, arr2) =>\r\n        append(arr1,\r\n            filter(elm => !includes(elm, arr1), arr2))),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:list.intersect\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    intersect = curry((arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            filter(elm => includes(elm, arr2), arr1)),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:list.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array}\r\n     * @param list2 {Array}\r\n     * @return {Array}\r\n     */\r\n    intersectBy = curry((pred, list1, list2) =>\r\n        foldl((agg, a) =>\r\n                any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg\r\n            , [], list1)),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:list.difference\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    difference = curry((array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return sliceCopy(array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? (agg.push(elm), agg) : agg\r\n            , [], array1);\r\n    }),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:list.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = curry2((arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays));\r\n","/**\r\n * @module errorThrowing\r\n * @description Contains error throwing facilities for when a value doesn't match a type.\r\n */\r\nimport {typeOf} from './object/typeOf';\r\nimport {isArray, toTypeRef, toTypeRefName, isOfType} from './object/is';\r\nimport {curry} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @function module:errorThrowing.typeRefsToStringOrError\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    typeRefsToStringOrError = types => types.length ?\r\n        types.map(type => `\\`${toTypeRefName(type)}\\``).join(', ') : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:errorThrowing.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n                contextName, valueName, value, expectedTypeName,\r\n                foundTypeName, messageSuffix\r\n            } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? typeRefsToStringOrError(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotType}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypeThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (ValueType, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeName = toTypeRef(ValueType),\r\n                foundTypeName = typeOf(value);\r\n            if (typeChecker(ValueType, value)) { return value; } // Value matches type\r\n            throw new Error(errorMessageCall(\r\n                {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n            ));\r\n        },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotTypes}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypesThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (valueTypes, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeNames = valueTypes.map(toTypeRef),\r\n                matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\r\n                foundTypeName = typeOf(value);\r\n            if (matchFound) { return value; }\r\n            throw new Error(\r\n                errorMessageCall({\r\n                    contextName, valueName, value,\r\n                    expectedTypeName: expectedTypeNames, foundTypeName,\r\n                    messageSuffix\r\n                })\r\n            );\r\n        },\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotType`.\r\n     * @function module:errorThrowing.errorIfNotType$\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotType = _getErrorIfNotTypeThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotTypes`.\r\n     * @type {Function|module:errorThrowing.errorIfNotTypes}\r\n     * @function module:errorThrowing.errorIfNotTypes$\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotTypes = _getErrorIfNotTypesThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n     */\r\n    getErrorIfNotTypeThrower = errorMessageCall => curry(_getErrorIfNotTypeThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n     */\r\n    getErrorIfNotTypesThrower = errorMessageCall => curry(_getErrorIfNotTypesThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotType\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotType = curry(_errorIfNotType),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotTypes\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotTypes = curry(_errorIfNotTypes)\r\n;\r\n\r\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\r\n\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\r\n */\r\n\r\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {*}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\r\n\r\n/**\r\n * @typedef {Array<(String|Function)>} TypesArray\r\n */\r\n\r\n/**\r\n * @typedef {Function} TypeChecker\r\n * @description Checks whether a value is of given type.\r\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorMessageCall\r\n * @description Error message template function.\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotType\r\n * @description Used to ensure value matches passed in type.\r\n * @param type {TypeRef} - Constructor name or constructor.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - What ever value is.\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotTypes\r\n * @description Used to ensure a value matches one of one or more types passed in.\r\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - Whatever value is.\r\n */\r\n","/**\r\n * @module string\r\n * @description Contains functions for strings.\r\n */\r\nimport {intercalate, map, filter} from './list';\r\nimport {split} from './jsPlatform/string';\r\nimport {compose} from './function/compose';\r\nimport {join} from './jsPlatform/array';\r\nimport {_errorIfNotType} from './errorThrowing';\r\n\r\nexport {split};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:string.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a string on all '\\s' and/or all '\\t' characters.\r\n     * @function module:string.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:string.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:string.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n'),\r\n\r\n    /**\r\n     * Lower cases first character of a non-empty string.\r\n     * @function module:string.lcaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    lcaseFirst = xs => {\r\n        _errorIfNotType(String, 'lcaseFirst', 'xs', xs);\r\n        return xs[0].toLowerCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Upper cases first character of a non-empty string.\r\n     * @function module:string.ucaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    ucaseFirst = xs => {\r\n        _errorIfNotType(String, 'ucaseFirst', 'xs', xs);\r\n        return xs[0].toUpperCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Camel cases (class case) a string.\r\n     * @function module:string.camelCase\r\n     * @param xs {String}\r\n     * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Pattern to split on.  Optional.\r\n     * @throws {Error} - Throws error if param `xs` is not a string.\r\n     * @returns {string}\r\n     * @curried\r\n     */\r\n    camelCase = (xs, pattern = /[^a-z\\d]/i) => compose(\r\n            join(''),\r\n            map(str => ucaseFirst(str.toLowerCase())),\r\n            filter(x => !!x),\r\n            split(pattern)\r\n        )(_errorIfNotType(String, 'camelCase', 'xs', xs)),\r\n\r\n    /**\r\n     * Class cases a string.  Uses pattern /[^a-z\\d/i]/ to split on.\r\n     * If you require a different pattern use `string.camelCase(str, pattern)`\r\n     * and then upper case first character (`ucaseFirst`).\r\n     * @function module:string.classCase\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if `xs` is not a string (via `camelCase` call).\r\n     */\r\n    classCase = compose(ucaseFirst, camelCase)\r\n\r\n;\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\n","/**\r\n * @module fjl\r\n * @description Exports all module methods (object, list, string modules etc.).\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n */\r\nexport * from './object';\r\nexport * from './boolean';\r\nexport * from './function';\r\nexport * from './list';\r\nexport * from './string';\r\nexport * from './utils';\r\nexport * from './errorThrowing';\r\n"],"names":["returnCurried","executeArity","unmetArityNum","fn","argsToCurry","func","x","executeAsCurriedFunc","Array","from","arguments","a","b","c","d","e","args","unmetArity","concatedArgs","concat","canBeCalled","length","newExpectedArity","curryN","Function","Error","curry","curry2","curry3","curry4","curry5","fPureTakesOne","name","arg","f","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","defineReverse","prototype","reverse","reduceRight","agg","item","push","map","filter","reduce","forEach","some","every","join","apply","call","flipN","flip","flip3","flip4","flip5","instanceOf","instanceConstructor","instance","hasOwnProperty","native","Object","getOwnPropertyNames","key","keys","assign","obj0","objs","topAgg","obj","_Number","Number","_NaN","_Null","_Undefined","typeOf","value","retVal","undefined","constructorName","constructor","isNaN","_String","String","_Object","_Boolean","Boolean","_Function","_Array","_Symbol","_Map","_Set","_WeakMap","_WeakSet","toTypeRef","type","toTypeRefs","types","toTypeRefName","Type","ref","toTypeRefNames","isFunction","isType","isOfType","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isUsableImmutablePrimitive","typeOfX","isset","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","isOneOf","typeName","isFunctor","lookup","of","copy","out","slice","Symbol","Promise","searchObj","nsString","indexOf","parts","split","limit","ind","parent","node","assignDeep","propDescription","getOwnPropertyDescriptor","get","set","writable","includes","xs","lastIndexOf","isTruthy","isFalsy","alwaysTrue","alwaysFalse","equal","equalAll","i","aggregateArray","sliceFrom","startInd","sliceTo","toInd","sliceCopy","genericAscOrdering","lengths","lists","toShortest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceUntilRight","arr","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","log","console","bind","error","peek","pop","jsonClone","JSON","parse","stringify","toAssocList","toAssocListDeep","TypeConstraint","fromAssocList","OutType","fromAssocListDeep","toArray","compose","arg0","id","negateF","negateF2","negateF3","negateFN","until","predicate","operation","typeInstance","fnOrError","symbolName","noop","normalizeStep","to","step","range","append","listAppend","head","last","tail","init","uncons","unconsr","item0","concatMap","foldableOfA","intersperse","between","lastInd","intercalate","xss","transpose","numLists","ind2","longestListLen","maximum","outLists","outList","subsequences","listLen","pow","entry","j","swapped","ind1","tmp","permutations","repeat","foldl","foldr","foldl1","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","lastX","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","splitAt","takeWhile","dropWhile","splitPoint","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","zip3","arr3","zip4","arr4","zip5","arr5","zipWith","zipWithN","lenOfTrimmed","zipWith3","xs3","zipWith4","xs4","zipWith5","xs5","unzip","unzipN","lenItem0","any","p","all","and","or","not","sum","product","sortBy","minimum","scanl","scanl1","scanr","scanr1","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","a0","b0","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","unionBy","alreadyAdded","union","intersect","intersectBy","list1","list2","difference","array1","array2","complement","arr0","arrays","typeRefsToStringOrError","defaultErrorMessageCall","tmplContext","contextName","valueName","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","typesCopy","typesToMatchCopy","_getErrorIfNotTypeThrower","errorMessageCall","typeChecker","ValueType","_getErrorIfNotTypesThrower","valueTypes","expectedTypeNames","matchFound","_errorIfNotType","_errorIfNotTypes","getErrorIfNotTypeThrower","getErrorIfNotTypesThrower","errorIfNotType","errorIfNotTypes","lines","words","unwords","unlines","lcaseFirst","toLowerCase","substring","ucaseFirst","toUpperCase","camelCase","pattern","str","classCase"],"mappings":"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"}