{"version":3,"file":"fjl.js","sources":["../../src/function/curry.js","../../src/utils.js","../../src/jsPlatform/array.js","../../src/jsPlatform/function.js","../../src/function/flip.js","../../src/jsPlatform/object.js","../../src/object/typeOf.js","../../src/object/is.js","../../src/object/lookup.js","../../src/object/of.js","../../src/object/copy.js","../../src/object/searchObj.js","../../src/errorThrowing.js","../../src/object/defineProp.js","../../src/object/assignDeep.js","../../src/jsPlatform/list.js","../../src/boolean.js","../../src/list/map.js","../../src/list/aggregation.js","../../src/list/utils.js","../../src/object/setTheory.js","../../src/object/console.js","../../src/object/jsonClone.js","../../src/object/assocList.js","../../src/object/toArray.js","../../src/object.js","../../src/function/compose.js","../../src/function/id.js","../../src/function/negate.js","../../src/function/until.js","../../src/function/fnOrError.js","../../src/function/noop.js","../../src/function/trampoline.js","../../src/function/toFunction.js","../../src/function.js","../../src/list/range.js","../../src/jsPlatform/string.js","../../src/jsPlatform.js","../../src/list.js","../../src/string.js","../../src/fjl.js"],"sourcesContent":["/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf function\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\r\n\r\n/**\r\n * @private\r\n * @type {string}\r\n */\r\nconst\r\n\r\n    /**\r\n     * Returns curried function.\r\n     * @private\r\n     * @param executeArity {Number}\r\n     * @param unmetArityNum {Number}\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function} - Curried function.\r\n     */\r\n    returnCurried = (executeArity, unmetArityNum, fn, argsToCurry) => {\r\n        switch (unmetArityNum) {\r\n            case 1:\r\n                /* eslint-disable */\r\n                return function func(x) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 2:\r\n                /* eslint-disable */\r\n                return function func(a, b) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 3:\r\n                /* eslint-disable */\r\n                return function func(a, b, c) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 4:\r\n                /* eslint-disable */\r\n                return function func(a, b, c, d) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            case 5:\r\n                /* eslint-disable */\r\n                return function func(a, b, c, d, e) {\r\n                /* eslint-enable */\r\n                    return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\r\n                };\r\n            default:\r\n                return (...args) => executeAsCurriedFunc(fn, executeArity, unmetArityNum, args, argsToCurry);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns curried function if unmetArity is not met else returns result of executing\r\n     * final function.\r\n     * @private\r\n     * @param fn {Function}\r\n     * @param executeArity {Number}\r\n     * @param unmetArity {Number}\r\n     * @param args {Array<*>}\r\n     * @param argsToCurry {Array<*>}\r\n     * @returns {Function|*} - Curried function or result of 'finally' executed function.\r\n     */\r\n    executeAsCurriedFunc = (fn, executeArity, unmetArity, args, argsToCurry) => {\r\n        let concatedArgs = argsToCurry.concat(args),\r\n            canBeCalled = (concatedArgs.length >= executeArity) || !executeArity,\r\n            newExpectedArity = executeArity - concatedArgs.length;\r\n        return !canBeCalled ?\r\n            returnCurried(executeArity, newExpectedArity, fn, concatedArgs) :\r\n            fn(...concatedArgs);\r\n    }\r\n;\r\n\r\nexport const\r\n\r\n    /**\r\n     * Curries a function up to a given arity.\r\n     * @function module:function.curryN\r\n     * @param executeArity {Number}\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     * @throws {Error} - When `fn` is not a function.\r\n     */\r\n    curryN = (executeArity, fn, ...argsToCurry) => {\r\n        if (!fn || !(fn instanceof Function)) {\r\n            throw new Error(`\\`curry*\\` functions expect first parameter to be of type \\`Function\\` though received ${fn}?`);\r\n        }\r\n        return returnCurried(executeArity, executeArity - argsToCurry.length, fn, argsToCurry);\r\n    },\r\n\r\n    /**\r\n     * Curries a function based on it's defined arity (note: rest args param (`...rest`) are not counted in arity).\r\n     * @function module:function.curry\r\n     * @param fn {Function}\r\n     * @param argsToCurry {...*}\r\n     * @returns {Function}\r\n     */\r\n    curry = (fn, ...argsToCurry) => curryN((fn || {}).length, fn, ...argsToCurry),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 2 (won't call function until 2 or more args).\r\n     * @function module:function.curry2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry2 = fn => curryN(2, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 3 (won't call function until 3 or more args).\r\n     * @function module:function.curry3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry3 = fn => curryN(3, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 4 (won't call function until 4 or more args).\r\n     * @function module:function.curry4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry4 = fn => curryN(4, fn),\r\n\r\n    /**\r\n     * Curries a function up to an arity of 5 (won't call function until 5 or more args).\r\n     * @function module:function.curry5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    curry5 = fn => curryN(5, fn);\r\n","/**\r\n * @module utils\r\n */\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a function that takes an argument and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakesOne\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakesOne = name => curry((arg, f) => f[name](arg)),\r\n\r\n    /**\r\n     * Returns a function that takes 2 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes2\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes2 = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\r\n\r\n    /**\r\n     * Returns a function that takes 3 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes3\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes3 = name => curry((arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3)),\r\n\r\n    /**\r\n     * Returns a function that takes 4 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes4\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes4 = name => curry((arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4)),\r\n\r\n    /**\r\n     * Returns a function that takes 5 arguments and an object on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakes5\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakes5 = name => curry((arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5)),\r\n\r\n    /**\r\n     * Returns a function that takes an object and one or more arguments on which to execute 'method name'\r\n     * with said parameters.\r\n     * @function module:utils.fPureTakesOneOrMore\r\n     * @param name {String}\r\n     * @returns {Function}\r\n     */\r\n    fPureTakesOneOrMore = name => curry2((f, ...args) => f[name](...args))\r\n\r\n;\r\n","/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nconst\r\n    /**\r\n     * Array.prototype.reverse generator (generates a function that calls the prototype version or a\r\n     * shimmed version if it doesn't exist).\r\n     * @returns {Function}\r\n     */\r\n    defineReverse = () =>\r\n        Array.prototype.reverse ? x => x.reverse() :\r\n            x => x.reduceRight((agg, item) => {\r\n                agg.push(item);\r\n                return agg;\r\n            }, [])\r\n;\r\n\r\nexport const\r\n\r\n    /**\r\n     * Maps a function to functor (list etc.).\r\n     * @function module:jsPlatform.map\r\n     * @param fn {Function}\r\n     * @param functor {Array|{map: {Function}}}\r\n     * @returns {Array|{map: {Function}}}\r\n     */\r\n    map = fPureTakesOne('map'),\r\n\r\n    /**\r\n     * Filters a functor (list etc.) with passed in function.\r\n     * @function module:jsPlatform.filter\r\n     * @param fn {Function}\r\n     * @param functor {Array|{filter: {Function}}}\r\n     * @returns {Array|{filter: {Function}}}\r\n     */\r\n    filter = fPureTakesOne('filter'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) with passed in function.\r\n     * @function module:jsPlatform.reduce\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduce: {Function}}}\r\n     * @returns {Array|{reduce: {Function}}}\r\n     */\r\n    reduce = fPureTakes2('reduce'),\r\n\r\n    /**\r\n     * Reduces a foldable (list etc.) from the right with passed in function.\r\n     * @function module:jsPlatform.reduceRight\r\n     * @param fn {Function}\r\n     * @param functor {Array|{reduceRight: {Function}}}\r\n     * @returns {Array|{reduceRight: {Function}}}\r\n     */\r\n    reduceRight = fPureTakes2('reduceRight'),\r\n\r\n    /**\r\n     * For each on functor (Array|Object|etc.).\r\n     * @function module:jsPlatform.forEach\r\n     * @param fn {Function}\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n     * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n     */\r\n    forEach = fPureTakesOne('forEach'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for at least one item\r\n     * in functor else returns `false`.\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have a `some` method.\r\n     */\r\n    some = fPureTakesOne('some'),\r\n\r\n    /**\r\n     * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n     * @function module:jsPlatform.every\r\n     * @param fn {Function} - Predicate.\r\n     * @param functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    every = fPureTakesOne('every'),\r\n\r\n    /**\r\n     * Array.prototype.join\r\n     * @function module:jsPlatform.join\r\n     * @param separator {String|RegExp}\r\n     * @param arr {Array}\r\n     * @returns {String}\r\n     */\r\n    join = fPureTakesOne('join'),\r\n\r\n    /**\r\n     * Same as Array.prototype.push\r\n     * @function module:jsPlatform.push\r\n     * @param item {*}\r\n     * @param arr {Array}\r\n     * @returns {Number}\r\n     */\r\n    push = fPureTakesOneOrMore('push'),\r\n\r\n    /**\r\n     * Reverses an list (shimmed if not exists).\r\n     * @function module:jsPlatform.reverse\r\n     * @param x {Array<any>}\r\n     * @return {Array}\r\n     */\r\n    reverse = defineReverse();\r\n","import {curry, curry2} from '../function/curry';\r\n\r\n/**\r\n * Created by elydelacruz on 9/7/2017.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * Functional `apply` function (takes no context).\r\n     * @function module:function.apply\r\n     * @param fn {Function}\r\n     * @param args {Array|*}\r\n     * @returns {*}\r\n     */\r\n    apply = curry((fn, args) => fn.apply(null, args)),\r\n\r\n    /**\r\n     * Functional `call` function (takes no context).\r\n     * @function module:function.call\r\n     * @param fn {Function}\r\n     * @param args {...*}\r\n     * @returns {*}\r\n     */\r\n    call = curry2((fn, ...args) => fn.call(null, ...args));\r\n","import {reverse} from '../jsPlatform/array';\r\nimport {apply, call} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a curried function requiring given functions arguments in reverse\r\n     * (returned function expects 2 or more variables (curried at 2 or more args)).\r\n     * @function module:function.flipN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     * @curried\r\n     */\r\n    flipN = fn => curry2((...args) => apply(fn, reverse(args))),\r\n\r\n    /**\r\n     * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\r\n     * @function module:function.flip\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip = fn => curry((b, a) => call(fn, a, b)),\r\n\r\n    /**\r\n     * Same as `flip` except returns a flipped function of arity 3.\r\n     * @function module:function.flip3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip3 = fn => curry((c, b, a) => call(fn, a, b, c)),\r\n\r\n    /**\r\n     * Same as `flip` except returns a flipped function of arity 4.\r\n     * @function module:function.flip4\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip4 = fn => curry((d, c, b, a) => call(fn, a, b, c, d)),\r\n\r\n    /**\r\n     * Same as `flip` except returns a flipped function of arity 5.\r\n     * @function module:function.flip5\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    flip5 = fn => curry((e, d, c, b, a) => call(fn, a, b, c, d, e));\r\n","/**\r\n * @description Defines some of the platform methods for objects (the ones used within `fjl`).\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\nimport {curry, curry2} from '../function/curry';\r\nimport {flip, flip3, flip4, flip5} from '../function/flip';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether constructor has derived object.\r\n     * @function module:object.instanceOf\r\n     * @param instanceConstructor {Function} - Constructor.\r\n     * @param instance {*}\r\n     * @instance {*}\r\n     * @returns {Boolean}\r\n     */\r\n    instanceOf = curry((instanceConstructor, instance) =>\r\n        instance instanceof instanceConstructor),\r\n\r\n    /**\r\n     * @function module:object.hasOwnProperty\r\n     * @param propName {*}\r\n     * @param typeInstance {*}\r\n     * @returns {Boolean}\r\n     * @deprecated - Use property directly instead.\r\n     */\r\n    hasOwnProperty = fPureTakesOne('hasOwnProperty'),\r\n\r\n    /**\r\n     * @function module:object.length\r\n     * @param x {*}\r\n     * @returns {Number}\r\n     * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n     *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n     */\r\n    length = x => x.length,\r\n\r\n    /**\r\n     * Contains all the static functions from `Object` but curried and flipped;\r\n     * @example\r\n     * // E.g., `Object.defineProperties(obj, descriptor)` can now be used like\r\n     * import {defineProperties} from 'fjl'\r\n     * defineProperties(descriptor, someObj),\r\n     * // Et. al.\r\n     * @memberOf module:object\r\n     * @type {{...Object}}\r\n     */\r\n    native = Object.getOwnPropertyNames(Object).reduce((agg, key) => {\r\n        if (typeof Object[key] !== 'function') {\r\n            return agg;\r\n        }\r\n        const operation = Object[key];\r\n        switch (operation.length) {\r\n            case 2:\r\n                agg[key] = flip(operation);\r\n                break;\r\n            case 3:\r\n                agg[key] = flip3(operation);\r\n                break;\r\n            case 4:\r\n                agg[key] = flip4(operation);\r\n                break;\r\n            case 5:\r\n                agg[key] = flip5(operation);\r\n                break;\r\n            default:\r\n                agg[key] = Object[key];\r\n                break;\r\n        }\r\n        return agg;\r\n    }, {}),\r\n\r\n    /**\r\n     * Gets passed in object's own enumerable keys (same as `Object.keys`).\r\n     * @function module:object.keys\r\n     * @param obj {*}\r\n     * @returns {Array<String>}\r\n     */\r\n    {keys} = native,\r\n\r\n    /**\r\n     * Defined as `Object.assign` else is the same thing but shimmed.\r\n     * @function module:object.assign\r\n     * @param obj0 {Object}\r\n     * @param objs {...{Object}}\r\n     * @returns {Object}\r\n     */\r\n    assign = (() => Object.assign ?\r\n            (obj0, ...objs) => Object.assign(obj0, ...objs) :\r\n            curry2((obj0, ...objs) => objs.reduce((topAgg, obj) => {\r\n                return Object.keys(obj).reduce((agg, key) => {\r\n                    agg[key] = obj[key];\r\n                    return agg;\r\n                }, topAgg);\r\n            }, obj0))\r\n        )();\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\nconst _Number = Number.name,\r\n    _NaN = 'NaN',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\n/**\r\n * Returns the constructor/class/type name of a value.\r\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n * @note Returns 'Undefined' if value is `undefined`\r\n * @note Returns 'Null' if value is `null`\r\n * For values that have no concrete constructors and/or casters\r\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n * @function module:object.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n */\r\nexport function typeOf (value) {\r\n    let retVal;\r\n    if (value === undefined) {\r\n        retVal = _Undefined;\r\n    }\r\n    else if (value === null) {\r\n        retVal = _Null;\r\n    }\r\n    else {\r\n        let constructorName = (value).constructor.name;\r\n        retVal = constructorName === _Number && isNaN(value) ?\r\n            _NaN : constructorName;\r\n    }\r\n    return retVal;\r\n}\r\n","/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\r\n\r\nimport {typeOf} from './typeOf';\r\nimport {instanceOf, length, keys} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\n\r\nlet _String = String.name,\r\n    _Number = Number.name,\r\n    _Object = Object.name,\r\n    _Boolean = Boolean.name,\r\n    _Symbol = 'Symbol',\r\n    _Map = 'Map',\r\n    _Set = 'Set',\r\n    _WeakMap = 'WeakMap',\r\n    _WeakSet = 'WeakSet',\r\n    _Null = 'Null',\r\n    _Undefined = 'Undefined';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @function module:object.toTypeRef\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @todo write tests for this function.\r\n     */\r\n    toTypeRef = type => {\r\n        if (!type) {\r\n            return typeOf(type);\r\n        }\r\n        else if (type.constructor === String || (type instanceof Function)) {\r\n            return type;\r\n        }\r\n        return typeOf(type);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of type refs from possible type refs (converts null, undefined, NaN, and other values into\r\n     * type refs (either constructor name or constructor name based on whether value(s) is a string, a constructor, or not).\r\n     * @function module:object.toTypeRefs\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {Array<TypeRef>}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefs = (...types) => types.map(toTypeRef),\r\n\r\n    /**\r\n     * Returns possible Type's TypeRef name.\r\n     * @function module:object.toTypeRefName\r\n     * @param Type {(TypeRef|*)}\r\n     * @returns {String}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefName = Type => {\r\n        const ref = toTypeRef(Type);\r\n        return ref instanceof Function ? ref.name : ref;\r\n    },\r\n\r\n    /**\r\n     * Returns possible Types' TypeRef names.\r\n     * @function module:object.toTypeRefNames\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {String[]}\r\n     * @todo Ensure tests are written for this function.\r\n     */\r\n    toTypeRefNames = (...types) => types.map(toTypeRefName),\r\n\r\n    /**\r\n     * Returns whether a value is a function or not.\r\n     * @function module:object.isFunction\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction = instanceOf(Function),\r\n\r\n    /**\r\n     * Strict type checker.  Checks if given value is a direct instance of given type;  E.g.,\r\n     * @example\r\n     *   isType(String, 'abcdefg')  === true // true\r\n     *   isType(String.name, 'abcdefg') === true\r\n     *   isType(Number, NaN) === false\r\n     *   isType(Number, 99) === true\r\n     *   isType('Null', 99) === false // though, for `null` and `undefined` checks\r\n     *                                // @see `isset`, in this module, instead\r\n     *   isType('Undefined', undefined) === true // true\r\n     *\r\n     * @note Useful where absolute types, or some semblance thereof, are required.\r\n     * @function module:object.isType\r\n     * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isType = curry((type, obj) => typeOf(obj) === toTypeRefName(type)),\r\n\r\n    /**\r\n     * Synonym for `isType` (or just a more accurate name for `isType`).\r\n     * @function module:object.isStrictly\r\n     * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n     * @param obj {*}\r\n     * @return {Boolean}\r\n     */\r\n    isStrictly = isType,\r\n\r\n    /**\r\n     * Loose type checker;  E.g., If `type` is not a constructor, but a constructor name, does a type check on\r\n     * constructor names, else if first check fails and `type` is a constructor, performs an `instanceof` check\r\n     * on value with constructor.\r\n     * @note Use care when checking for `Array` since it is an `instanceof` Object.\r\n     * @note For `null` and `undefined` their class cased names can be used for type checks\r\n     * `isOfType('Null', null) === true (passes strict type check)` (or better yet @link `module:object.isset` can be used).\r\n     * @throwsafe - Doesn't throw on `null` or `undefined` `obj` values.\r\n     * @example\r\n     * isOfType(Number, 99) === true        // true  (passes strict type check (numbers are not instances of `Number`\r\n     *                                      //        constructor)\r\n     * isOfType('Number', 99) === true      // true  (passes strict type check)\r\n     * isOfType(Number, NaN) === true       // true. (passes instance of check)\r\n     *                                      //        If you want \"true\" strict type checking use `isType`\r\n     * isOfType(Object, []) === true        // true  (passes instance of check)\r\n     * isOfType(Array, []) === true         // true  (passes instance of check)\r\n     * isOfType(Object, {}) === true        // true  (passes instance of check)\r\n     * isOfType(Object.name, {}) === true   // true  (Passes strict type check)\r\n     * class Abc extends String {}\r\n     * isOfType(String, new Abc('abcd')) // true (passes instanceof check)\r\n     *\r\n     * @function module:object.isOfType\r\n     * @param type {Function|String} - Type reference (constructor or `constructor.name`).\r\n     * @param x {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isOfType = curry((type, x) => isType(type, x) || instanceOf(type, x)),\r\n\r\n    /**\r\n     * Synonym for `isOfType` (or just a more accurate name).\r\n     * @function module:object.isLoosely\r\n     * @param type {Function|String} - Type reference (constructor or `constructor.name`).\r\n     * @param x {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isLoosely = isOfType,\r\n\r\n    /**\r\n     * Checks if `value` is an es2015 `class`.\r\n     * @function module:object.isClass\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\r\n\r\n    /**\r\n     * Returns a boolean depicting whether a value is callable or not.\r\n     * @function module:object.isCallable\r\n     * @tentative\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isCallable = x => isFunction(x) && !isClass(x),\r\n\r\n    /**\r\n     * Checks if value is an array (same as `Array.isArray`).\r\n     * @function module:object.isArray\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    {isArray} = Array,\r\n\r\n    /**\r\n     * Checks whether value is an object or not.\r\n     * @function module:object.isObject\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isObject = isType(_Object),\r\n\r\n    /**\r\n     * Checks if value is a boolean.\r\n     * @function module:object.isBoolean\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isBoolean = isType(_Boolean),\r\n\r\n    /**\r\n     * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n     * @function module:object.isNumber\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = isType(_Number),\r\n\r\n    /**\r\n     * Checks whether value is a string or not.\r\n     * @function module:object.isString\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isString = isType(_String),\r\n\r\n    /**\r\n     * Checks whether value is of `Map` or not.\r\n     * @function module:object.isMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isMap = isType(_Map),\r\n\r\n    /**\r\n     * Checks whether value is of `Set` or not.\r\n     * @function module:object.isSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSet = isType(_Set),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakMap` or not.\r\n     * @function module:object.isWeakMap\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakMap =isType(_WeakMap),\r\n\r\n    /**\r\n     * Checks whether value is of `WeakSet` or not.\r\n     * @function module:object.isWeakSet\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isWeakSet = isType(_WeakSet),\r\n\r\n    /**\r\n     * Checks if value is undefined.\r\n     * @function module:object.isUndefined\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUndefined = isType(_Undefined),\r\n\r\n    /**\r\n     * Checks if value is null.\r\n     * @function module:object.isNull\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isNull = isType(_Null),\r\n\r\n    /**\r\n     * Checks if value is a `Symbol`.\r\n     * @function module:object.isSymbol\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isSymbol = isType(_Symbol),\r\n\r\n    /**\r\n     * Checks if given `x` is set and of one of\r\n     *  [String, Boolean, Number, Symbol] (null and undefined are immutable\r\n     *  but are not \"usable\" (usually not what we want to operate on).\r\n     * @function module:object.isUsableImmutablePrimitive\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isUsableImmutablePrimitive = x => {\r\n        const typeOfX = typeOf(x);\r\n        return isset(x) &&\r\n            [_String, _Number, _Boolean, _Symbol]\r\n                .some(Type => Type === typeOfX);\r\n    },\r\n\r\n    /**\r\n     * Checks if !length.\r\n     * @function module:object.isEmptyList\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyList = x => !length(x),\r\n\r\n    /**\r\n     * Checks if object has own properties/enumerable-props or not.\r\n     * @function module:object.isEmptyObject\r\n     * @param obj {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyObject = obj => isEmptyList(keys(obj)),\r\n\r\n    /**\r\n     * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n     * @function module:object.isEmptyCollection\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyCollection = x => x.size === 0,\r\n\r\n    /**\r\n     * Checks to see if passed in value is empty;  I.e.,\r\n     *  check for one of '', 0, `null`, `undefined`, `NaN`, `false`, empty array, empty object, ~~empty function (zero arity)~~,\r\n     *  or empty collection (es6 collection: Map, Set, WeakMap, or WeakSet etc.) (`!value.size`).\r\n     * @function module:object.isEmpty\r\n     * @param x {*} - Value to check.\r\n     * @returns {Boolean}\r\n     */\r\n    isEmpty = x => {\r\n        if (!x) { // if '', 0, `null`, `undefined`, `NaN`, or `false` then is empty\r\n            return true;\r\n        }\r\n        if (isNumber(x) || isFunction(x)) {\r\n            return false;\r\n        }\r\n        if (isArray(x)) { // takes care of 'instances of Array'\r\n            return !x.length;\r\n        }\r\n        if (x.size !== undefined && !instanceOf(Function, x.size)) {\r\n            return !x.size;\r\n        }\r\n        if (isObject(x)) {\r\n            return !keys(x).length;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Returns whether passed in values is defined and not null or not.\r\n     * @function module:object.isset\r\n     * @param x {*}\r\n     * @returns {Boolean}\r\n     */\r\n    isset = x => x !== null && x !== undefined,\r\n\r\n    /**\r\n     * Checks to see if `x` is of one of the given type refs;  Strict type check (not-instanceof check).\r\n     * @function object.isOneOf\r\n     * @param x {*}\r\n     * @param types {...(TypeRef|*)}\r\n     * @returns {boolean}\r\n     * @deprecated - Instead use @link module:isStrictlyOneOf\r\n     * @todo write tests for this function.\r\n     */\r\n    isOneOf = (x, ...types) => {\r\n        const typeName = typeOf(x);\r\n        return toTypeRefNames(types).some(name => typeName === name);\r\n    },\r\n\r\n    /**\r\n     * Checks if given value is strictly one of given types.\r\n     * @function module:object.isStrictlyOneOf\r\n     * @param x {*}\r\n     * @param types {...TypeRef}\r\n     * @returns {boolean}\r\n     */\r\n    isStrictlyOneOf = isOneOf,\r\n\r\n    /**\r\n     * Checks if given value is either strictly one of given types or is\r\n     * an `instanceof` one of given types.\r\n     * @function module:object.isLooselyOneOf\r\n     * @param x {*}\r\n     * @param types {...TypeRef}\r\n     * @returns {boolean}\r\n     */\r\n    isLooselyOneOf = (x, ...types) =>\r\n        types.some(type => isType(type, x) || instanceOf(x, type)),\r\n\r\n    /**\r\n     * Checks if given value is instance of one of the types given.\r\n     * @function module:object.instanceOfOne\r\n     * @param x {*}\r\n     * @param types {...TypeRef}\r\n     * @returns {boolean}\r\n     */\r\n    instanceOfOne = (x, ...types) => types.some(instanceOf(x)),\r\n\r\n    /**\r\n     * Checks if value qualifies (has `map` method) as a functor.\r\n     * @function module:object.isFunctor\r\n     * @param x {*}\r\n     * @returns {bool}\r\n     */\r\n    isFunctor = x => x && x.map && instanceOf(Function, x.map)\r\n\r\n;\r\n","/**\r\n * @memberOf object\r\n */\r\n\r\nimport {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Looks up property and returns it's value; Else `undefined`.\r\n * Method is null safe (will not throw on `null` or `undefined`).\r\n * @function module:object.lookup\r\n * @param key {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\r\nexport const lookup = curry((key, obj) => isset(obj) ? obj[key] : undefined);\r\n","import {isFunction, isset, isUsableImmutablePrimitive} from './is';\r\nimport {apply} from '../jsPlatform/function';\r\n\r\n/**\r\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n * @example\r\n * // - If exists `(value).constructor.of` uses this.\r\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\r\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n * // - Else if constructor is a function, thus far, then calls constructor using\r\n * //      the `new` keyword (with any passed in args).\r\n\r\n * @function module:object.of\r\n * @param x {*} - Value to derive returned value's type from.\r\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n */\r\nexport const of = (x, ...args) => {\r\n    if (!isset(x)) { return undefined; }\r\n    const constructor = x.constructor;\r\n    if (constructor.hasOwnProperty('of')) {\r\n        return apply(constructor.of, args);\r\n    }\r\n    else if (isUsableImmutablePrimitive(x)) {\r\n        return apply(constructor, args);\r\n    }\r\n    else if (isFunction(constructor)) {\r\n        return new constructor(...args);\r\n    }\r\n    return undefined;\r\n};\r\n","import {typeOf} from './typeOf';\r\nimport {of} from './of';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Make a copy of a value or optionally copy incoming value onto an outgoing value (second parameter).\r\n     * @note If incoming thing is an immmutable primitive (string, number, symbol, null, undefined, boolean)\r\n     *  it is returned as is.\r\n     * @function module:object.copy\r\n     * @param x {*} - Thing to copy.\r\n     * @param [out = undefined] {*} - Optional value to copy on to.  Not required.\r\n     * @returns {*} - Copied thing or optionally outgoing value copied onto.\r\n     */\r\n    copy = (x, out) => {\r\n        // if `null`, `undefined`, `''`, `0`, `false` return\r\n        if (!x) { return x; }\r\n        switch (typeOf(x)) {\r\n            case Array.name:\r\n                return !out ? x.slice(0) : Object.assign(out, x);\r\n\r\n            // If immutable primitive, return it\r\n            case Symbol.name:\r\n            case Boolean.name:\r\n            case String.name:\r\n            case Number.name:\r\n            case Promise.name:\r\n            case Function.name:\r\n            case 'NaN':\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return x;\r\n\r\n            case 'Map':\r\n            case 'Set':\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n                return new x.constructor(Array.from(x));\r\n\r\n            // Else make copy\r\n            default:\r\n                return Object.assign(!out ? of(x) : out, x);\r\n        }\r\n    }\r\n;\r\n\r\nexport default copy;\r\n","import {isset} from './is';\r\nimport {curry} from '../function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Gives you value at key/namespace-key within `obj`;  E.g.,\r\n     * searchObj('all.your.base', {all: {your: {base: 99}}}) === 99 // `true`\r\n     * @note If key is unreachable (undefined) returns `undefined`.\r\n     *  Useful in cases where we do not want to check each key along the way before getting/checking value;  E.g.,\r\n     * @example\r\n     * ```\r\n     * if (obj && obj.all && obj.all.your && obj.all.your.base) {\r\n     *   // Thing we want to do\r\n     * }\r\n     *\r\n     * // So with our function becomes\r\n     * if (searchObj('all.your.base', obj)) {\r\n     *   // Thing we want to do\r\n     * }\r\n     * ```\r\n     * @function module:object.searchObj\r\n     * @param nsString {String}\r\n     * @param obj {*}\r\n     * @returns {*}\r\n     */\r\n    searchObj = curry((nsString, obj) => {\r\n        if (!obj) { return obj; }\r\n        if (nsString.indexOf('.') === -1) {\r\n            return obj[nsString];\r\n        }\r\n        const parts = nsString.split('.'),\r\n            limit = parts.length;\r\n        let ind = 0,\r\n            parent = obj;\r\n        for (; ind < limit; ind += 1) {\r\n            const node = parent[parts[ind]];\r\n            if (!isset(node)) {\r\n                return node;\r\n            }\r\n            parent = node;\r\n        }\r\n        return parent;\r\n    })\r\n;\r\n","/**\r\n * @module errorThrowing\r\n * @description Contains error throwing facilities for when a value doesn't match a type.\r\n */\r\nimport {typeOf} from './object/typeOf';\r\nimport {isArray, toTypeRef, toTypeRefName, isOfType} from './object/is';\r\nimport {curry} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @function module:errorThrowing.typeRefsToStringOrError\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    typeRefsToStringOrError = types => types.length ?\r\n        types.map(type => `\\`${toTypeRefName(type)}\\``).join(', ') : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:errorThrowing.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n                contextName, valueName, value, expectedTypeName,\r\n                foundTypeName, messageSuffix\r\n            } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? typeRefsToStringOrError(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotType}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypeThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (ValueType, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeName = toTypeRef(ValueType),\r\n                foundTypeName = typeOf(value);\r\n            if (typeChecker(ValueType, value)) { return value; } // Value matches type\r\n            throw new Error(errorMessageCall(\r\n                {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n            ));\r\n        },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotTypes}\r\n     * @private\r\n     */\r\n    _getErrorIfNotTypesThrower = (errorMessageCall, typeChecker = isOfType) =>\r\n        (valueTypes, contextName, valueName, value, messageSuffix = null) => {\r\n            const expectedTypeNames = valueTypes.map(toTypeRef),\r\n                matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\r\n                foundTypeName = typeOf(value);\r\n            if (matchFound) { return value; }\r\n            throw new Error(\r\n                errorMessageCall({\r\n                    contextName, valueName, value,\r\n                    expectedTypeName: expectedTypeNames, foundTypeName,\r\n                    messageSuffix\r\n                })\r\n            );\r\n        },\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotType`.\r\n     * @function module:errorThrowing.errorIfNotType$\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotType = _getErrorIfNotTypeThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n     * see `module:errorThrowing.errorIfNotTypes`.\r\n     * @type {Function|module:errorThrowing.errorIfNotTypes}\r\n     * @function module:errorThrowing.errorIfNotTypes$\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @private\r\n     */\r\n    _errorIfNotTypes = _getErrorIfNotTypesThrower(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypeThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n     */\r\n    getErrorIfNotTypeThrower = errorMessageCall => curry(_getErrorIfNotTypeThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:errorThrowing.getErrorIfNotTypesThrower\r\n     * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n     */\r\n    getErrorIfNotTypesThrower = errorMessageCall => curry(_getErrorIfNotTypesThrower(errorMessageCall)),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotType\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotType = curry(_errorIfNotType),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  Curried.\r\n     * @function module:errorThrowing.errorIfNotTypes\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {*} - Given `value` if `value` matches passed in type.\r\n     * @curried\r\n     */\r\n    errorIfNotTypes = curry(_errorIfNotTypes)\r\n;\r\n\r\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\r\n\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\r\n */\r\n\r\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {*}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\r\n\r\n/**\r\n * @typedef {Array<(String|Function)>} TypesArray\r\n */\r\n\r\n/**\r\n * @typedef {Function} TypeChecker\r\n * @description Checks whether a value is of given type.\r\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorMessageCall\r\n * @description Error message template function.\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotType\r\n * @description Used to ensure value matches passed in type.\r\n * @param type {TypeRef} - Constructor name or constructor.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - What ever value is.\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotTypes\r\n * @description Used to ensure a value matches one of one or more types passed in.\r\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - Whatever value is.\r\n */\r\n","/**\r\n * @module object\r\n * @note Custom jsdoc type definitions defined toward end of file.\r\n */\r\nimport {curry} from '../function/curry';\r\nimport {apply} from '../jsPlatform/function';\r\nimport {errorIfNotType} from '../errorThrowing';\r\nimport {isUndefined, isType} from './is';\r\n\r\n/**\r\n * Creates `defineProps` and `defineEnumProps` methods based on `{enumerable}` param.\r\n * @param {{enumerable: Boolean}}\r\n * @returns {function(*, *)|PropsDefinerCall}\r\n * @private\r\n */\r\nfunction createDefinePropsMethod ({enumerable}) {\r\n    const operation = enumerable ? defineEnumProp : defineProp;\r\n    return (argTuples, target) => {\r\n        argTuples.forEach(argTuple => {\r\n            const [TypeRef, propName, defaultValue] = argTuple;\r\n            apply(operation, [TypeRef, target, propName, defaultValue]);\r\n        });\r\n        return target;\r\n    };\r\n}\r\n\r\nexport const\r\n\r\n    /**\r\n     * Creates a descriptor for a property which is settable but throws\r\n     * errors when the `Type` is disobeyed.\r\n     * @function module:object.createTypedDescriptor\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param target {*}\r\n     * @param propName {String}\r\n     * @returns {Descriptor} - Property descriptor with just getter and setter.\r\n     */\r\n    createTypedDescriptor = (Type, target, propName) => {\r\n        let _value;\r\n        return {\r\n            get: function () {\r\n                return _value;\r\n            },\r\n            set: function (value) {\r\n                _value = errorIfNotType(Type, propName, target, value);\r\n            }\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Returns a target-descriptor tuple whose 'descriptor' will be set to\r\n     *  enumerable (`enumerable: true`).\r\n     * @function module:object.toEnumerableDescriptor\r\n     * @param {TargetDescriptorTuple} - [target, descriptor] tuple.\r\n     * @returns {TargetDescriptorTuple} - Array of target and descriptor.\r\n     */\r\n    toEnumerableDescriptor = ([target, descriptor]) => {\r\n        descriptor.enumerable = true;\r\n        return [target, descriptor];\r\n    },\r\n\r\n    /**\r\n     * Returns an target and descriptor tuple from given.\r\n     * @function module:object.toTargetDescriptorTuple\r\n     * @param targetOrTargetDescriptorTuple {(*|Array<*, *>)} - Target object or tuple of target and descriptor.\r\n     * @returns {(Array<*>|Array<*,*>)}\r\n     */\r\n    toTargetDescriptorTuple = targetOrTargetDescriptorTuple =>\r\n        isType('Array', targetOrTargetDescriptorTuple) ? // Strict type check for array\r\n            targetOrTargetDescriptorTuple : [targetOrTargetDescriptorTuple],\r\n\r\n    /**\r\n     * Allows you to define a \"typed\" property on given `target`.\r\n     * @function module:object.defineProp\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\r\n     * @param propName {String}\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     */\r\n    defineProp = (Type, target, propName, defaultValue = undefined) => {\r\n        const [_target, _descriptor] = toTargetDescriptorTuple(target),\r\n            descriptor = _descriptor || createTypedDescriptor(Type, _target, propName);\r\n        Object.defineProperty(_target, propName, descriptor);\r\n        if (!isUndefined(defaultValue)) {\r\n            _target[propName] = defaultValue;\r\n        }\r\n        return [_target, descriptor];\r\n    },\r\n\r\n    /**\r\n     * Allows you to define a \"typed\", enumerated property on `target`.\r\n     * @function module:object.defineEnumProp\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\r\n     * @param propName {String}\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     */\r\n    defineEnumProp = (Type, target, propName, defaultValue = undefined) => {\r\n        const [_target, _descriptor] = toTargetDescriptorTuple(target),\r\n            descriptor = _descriptor || createTypedDescriptor(Type, _target, propName);\r\n        return defineProp(\r\n            Type,\r\n            toEnumerableDescriptor([_target, descriptor]),\r\n            propName,\r\n            defaultValue\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Allows you to define multiple enum props at once on target.\r\n     * @function module:object.defineEnumProps\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineEnumProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineEnumProp`.\r\n     */\r\n    defineEnumProps = curry(createDefinePropsMethod({enumerable: true})),\r\n\r\n    /**\r\n     * Allows you to define multiple props at once on target.\r\n     * @function module:object.defineProps\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineProp`.\r\n     * @curried\r\n     */\r\n    defineProps = curry(createDefinePropsMethod({enumerable: false}))\r\n\r\n;\r\n\r\n/** ============================================================= */\r\n/** Type definitions:                                             */\r\n/** ============================================================= */\r\n\r\n/**\r\n * @typedef {*} Target\r\n */\r\n\r\n/**\r\n * @typedef {Object} Descriptor\r\n */\r\n\r\n/**\r\n * @typedef {Array<Target, Descriptor>} TargetDescriptorTuple\r\n */\r\n\r\n/**\r\n * @typedef {Array.<TypeRef, TargetDescriptorTuple, String, *>}  DefinePropArgsTuple\r\n * @description Arguments list for `defineProp` and/or `defineEnumProp` (note: some\r\n *  parts of array/tuple are options (namely the last two args));  E.g.,\r\n *  ```\r\n *  [String, [someTarget], 'somePropName', 'someDefaultValue] // ...\r\n *  ```\r\n */\r\n\r\n/**\r\n * @typedef {Function} PropsDefinerCall\r\n * @description Same type as `defineProp` and `defineEnumProp`\r\n * @param argsTuple {DefinePropArgsTuple}\r\n * @param target {Target}\r\n * @returns {Array.<TargetDescriptorTuple>}\r\n */\r\n","\r\nimport {isObject} from './is';\r\nimport {keys} from '../jsPlatform/object';\r\nimport {curry2} from '../function/curry';\r\n\r\nexport const\r\n    /**\r\n     * Merges all objects down into one (takes two or more args).\r\n     * @function module:object.assignDeep\r\n     * @param obj0 {Object}\r\n     * @param [objs] {...{Object}} - One or more objects to merge onto `obj0`.\r\n     * @returns {Object}\r\n     */\r\n    assignDeep = curry2((obj0, ...objs) =>\r\n        !obj0 ? obj0 : objs.reduce((topAgg, obj) =>\r\n            !obj ? topAgg : keys(obj).reduce((agg, key) => {\r\n                let propDescription = Object.getOwnPropertyDescriptor(agg, key);\r\n                // If property is not writable move to next item in collection\r\n                if (agg.hasOwnProperty(key) && propDescription &&\r\n                    !(propDescription.get && propDescription.set) &&\r\n                    !propDescription.writable) {\r\n                    return agg;\r\n                }\r\n                if (isObject(agg[key]) && isObject(obj[key])) {\r\n                    assignDeep(agg[key], obj[key]);\r\n                }\r\n                else { agg[key] = obj[key]; }\r\n                return agg;\r\n            }, topAgg)\r\n        , obj0));\r\n","/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n *      on both strings and arrays.\r\n */\r\n\r\nimport {fPureTakesOne, fPureTakes2, fPureTakesOneOrMore} from '../utils';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Concats/appends all functors onto the end of first functor.\r\n     * Note:  functors passed in after the first one must be of the same type.\r\n     * @function module:jsPlatform.concat\r\n     * @param functor {Array|Object|*}\r\n     * @param ...functor {Array|Object|*}\r\n     * @return {*|Array|Object} - The type passed.\r\n     * @throws {Error} - When passed in object doesn't have an `every` method.\r\n     */\r\n    concat = fPureTakesOneOrMore('concat'),\r\n\r\n    /**\r\n     * Same as Array.prototype.slice\r\n     * @function module:list.slice\r\n     * @param separator {String|RegExp}\r\n     * @param arr{Array}\r\n     * @returns {Array}\r\n     */\r\n    slice = fPureTakes2('slice'),\r\n\r\n    /**\r\n     * `Array.prototype.includes` or shim.\r\n     * @function module:list.includes\r\n     * @param value {*}\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    includes = (() => 'includes' in Array.prototype ?\r\n            fPureTakesOne('includes') :\r\n            (value, xs) => xs.indexOf(value) > -1)(),\r\n\r\n    /**\r\n     * Searches list/list-like for given element `x`.\r\n     * @function module:list.indexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    indexOf = fPureTakesOne('indexOf'),\r\n\r\n    /**\r\n     * Last index of (`Array.prototype.lastIndexOf`).\r\n     * @function module:list.lastIndexOf\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array|String|*} - list or list like to look in.\r\n     * @returns {Number} - `-1` if element not found else index at which it is found.\r\n     */\r\n    lastIndexOf = fPureTakesOne('lastIndexOf')\r\n\r\n;\r\n","/**\r\n * @module boolean\r\n * @description Contains functional version of 'always-true', 'always-false', 'is-truthy', and 'is-falsy'.\r\n */\r\nimport {curry, curry2} from './function/curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns whether `value` is 'truthy' or not\r\n     * @function module:boolean.isTruthy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isTruthy = value => !!value,\r\n\r\n    /**\r\n     * Returns whether `value` is 'falsy' or not\r\n     * @function module:boolean.isFalsy\r\n     * @param value\r\n     * @returns {Boolean}\r\n     */\r\n    isFalsy = value => !value,\r\n\r\n    /**\r\n     * Returns `true`.\r\n     * @function module:boolean.alwaysTrue\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysTrue = () => true,\r\n\r\n    /**\r\n     * Returns `false`.\r\n     * @function module:boolean.alwaysFalse\r\n     * @returns {Boolean}\r\n     */\r\n    alwaysFalse = () => false,\r\n\r\n    /**\r\n     * Equality operator.\r\n     * @function module:boolean.equal\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {boolean}\r\n     */\r\n    equal = curry((a, b) => a === b),\r\n\r\n    /**\r\n     * Equality operator for all.\r\n     * @function module:boolean.equalAll\r\n     * @param a {*} - Item `0`.\r\n     * @param args {...*} - Others\r\n     * @returns {boolean}\r\n     */\r\n    equalAll = curry2((a, ...args) => args.every(b => equal(a, b)))\r\n\r\n;\r\n","import {length} from '../jsPlatform/object';\r\nimport {curry} from '../function/curry';\r\nimport {typeOf} from '../object/typeOf';\r\nimport {of} from '../object/of';\r\nimport {isFunctor, isset} from '../object/is';\r\n\r\n/**\r\n * Maps a function onto a List (string or array) or a functor (value containing a map method).\r\n * @function module:list.map\r\n * @param fn {Function} - Function to map on given value.\r\n * @param xs {Array|String|*}\r\n * @returns {Array|String|*}\r\n */\r\nconst map = curry((fn, xs) =>  {\r\n    if (!isset(xs)) { return xs; }\r\n    let out = of(xs),\r\n        limit,\r\n        i = 0;\r\n    switch (typeOf(xs)) {\r\n        case 'Array':\r\n            limit = length(xs);\r\n            if (!limit) { return out; }\r\n            for (; i < limit; i += 1) {\r\n                out.push(fn(xs[i], i, xs));\r\n            }\r\n            return out;\r\n        case 'String':\r\n            limit = length(xs);\r\n            if (!xs) { return out; }\r\n            for (; i < limit; i += 1) {\r\n                out += fn(xs[i], i, xs);\r\n            }\r\n            return out;\r\n        default:\r\n            if (isFunctor(xs)) { return xs.map(fn); }\r\n\r\n            // Other objects\r\n            return Object.keys(xs).reduce((agg, key) => {\r\n                out[key] = fn(xs[key], key, xs);\r\n                return out;\r\n            }, out);\r\n    }\r\n});\r\n\r\nexport default map;\r\n","\r\nexport const\r\n\r\n    /**\r\n     * Pushes incoming `item` onto given array and returns said array.\r\n     * @private\r\n     * @param agg {Array}\r\n     * @param item {*}\r\n     * @returns {Array}\r\n     */\r\n    aggregateArray = (agg, item) => {\r\n        agg.push(item);\r\n        return agg;\r\n    }\r\n\r\n;\r\n","/**\r\n * List operator utils module.\r\n * @module listUtils\r\n */\r\nimport {apply}          from '../jsPlatform/function';  // un-curried version\r\nimport {slice}          from '../jsPlatform/list';      // un-curried version good for both strings and arrays\r\nimport {length}         from '../jsPlatform/object';\r\nimport {alwaysFalse}    from '../boolean';\r\nimport map              from './map';\r\nimport {curry, curry2}  from '../function/curry';\r\n\r\nexport * from './aggregation';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a slice of the given list from `startInd` to the end of the list.\r\n     * @function module:listUtils.sliceFrom\r\n     * @param startInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceFrom = curry((startInd, xs) => slice(startInd, undefined, xs)),\r\n\r\n    /**\r\n     * Slices from index `0` to given index.\r\n     * @function module:listUtils.sliceTo\r\n     * @param toInd {Number}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceTo = curry((toInd, xs) => slice(0, toInd, xs)),\r\n\r\n    /**\r\n     * Slices a copy of list.\r\n     * @function listUtils.sliceCopy\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sliceCopy = sliceFrom(0),\r\n\r\n    /**\r\n     * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n     * @function module:listUtils.genericAscOrdering\r\n     * @param a {*}\r\n     * @param b {*}\r\n     * @returns {number}\r\n     */\r\n    genericAscOrdering = curry((a, b) => {\r\n        if (a > b) { return 1; }\r\n        else if (a < b) { return -1; }\r\n        return 0;\r\n    }),\r\n\r\n    /**\r\n     * Returns length of all passed lists in list.\r\n     * @function module:listUtils.lengths\r\n     * @param lists ...{Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    lengths = curry2((...lists) => map(length, lists)),\r\n\r\n    /**\r\n     * Returns a list of lists trimmed to the shortest length in given list of lists.   @background This method is used by the `zip*` functions to achieve their\r\n     *  'slice to smallest' functionality.\r\n     * @function module:listUtils.toShortest\r\n     * @param lists {...(Array|String|*)}\r\n     * @returns {Array|String|*}\r\n     */\r\n    toShortest = curry2((...lists) => {\r\n        const listLengths = apply(lengths, lists),\r\n            smallLen = Math.min.apply(Math, listLengths);\r\n        return map((list, ind) => listLengths[ind] > smallLen ?\r\n            sliceTo(smallLen, list) : sliceCopy(list), lists);\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate.\r\n     * @function module:listUtils.reduceUntil\r\n     * @param pred {Function} - `(item, index, list) => Boolean(...)`\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceUntil = curry((pred, op, agg, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) { return agg; }\r\n        let ind = 0,\r\n            result = agg;\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { break; }\r\n            result = op(result, xs[ind], ind, xs);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces until predicate (from right to left).\r\n     * @function module:listUtils.reduceUntilRight\r\n     * @param pred {Function} - `(item, index, list) => Boolean(...)`\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceUntilRight = curry((pred, op, agg, arr) => {\r\n        const limit = length(arr);\r\n        if (!limit) { return agg; }\r\n        let ind = limit - 1,\r\n            result = agg;\r\n        for (; ind >= 0; ind--) {\r\n            if (pred(arr[ind], ind, arr)) { break; }\r\n            result = op(result, arr[ind], ind, arr);\r\n        }\r\n        return result;\r\n    }),\r\n\r\n    /**\r\n     * Reduces a list with given operation (`op`) function.\r\n     * @function module:listUtils.reduce\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduce = reduceUntil(alwaysFalse),\r\n\r\n    /**\r\n     * Reduces a list with given operation (`op`) function (from right-to-left).\r\n     * @function module:listUtils.reduceRight\r\n     * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n     * @param agg {*} - Zero value.\r\n     * @param xs {Array|String|*} - List.\r\n     * @returns {*}\r\n     */\r\n    reduceRight = reduceUntilRight(alwaysFalse),\r\n\r\n    /**\r\n     * Gets last index of a list/list-like (Array|String|Function etc.).\r\n     * @function module:listUtils.lastIndex\r\n     * @param x {Array|String|*} - list like or list.\r\n     * @returns {Number} - `-1` if no element found.\r\n     */\r\n    lastIndex = x => { const len = length(x); return len ? len - 1 : 0; },\r\n\r\n    /**\r\n     * Finds index in string or list.\r\n     * @function module:listUtils.findIndexWhere\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhere = curry((pred, arr) => {\r\n        let ind = 0;\r\n        const limit = length(arr);\r\n        for (; ind < limit; ind += 1) {\r\n            const predicateFulfilled = !!pred(arr[ind], ind, arr);\r\n            if (predicateFulfilled) {\r\n                return ind;\r\n            }\r\n        }\r\n        return -1;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in list from right to left.\r\n     * @function module:listUtils.findIndexWhereRight\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndexWhereRight = curry((pred, arr) => {\r\n        let ind = length(arr) - 1;\r\n        for (; ind >= 0; ind -= 1) {\r\n            const predicateFulfilled = !!pred(arr[ind], ind, arr);\r\n            if (predicateFulfilled) {\r\n                return ind;\r\n            }\r\n        }\r\n        return -1;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listUtils.findIndicesWhere\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndicesWhere = curry((pred, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            out = [];\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) { out.push(ind); }\r\n        }\r\n        return out.length ? out : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:listUtils.findWhere\r\n     * @param pred {Function}\r\n     * @param xs {Array|String|*} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    findWhere = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) { return; }\r\n        for (; ind < limit; ind++) {\r\n            let elm = xs[ind];\r\n            if (pred(elm, ind, xs)) { return elm; }\r\n        }\r\n        return undefined;\r\n    })\r\n\r\n;\r\n","import {assignDeep} from './assignDeep';\r\nimport {keys} from '../jsPlatform/object';\r\nimport {reduce} from '../list/utils';\r\nimport {curry, curry2} from '../function/curry';\r\n\r\nexport const\r\n\r\n    objUnion = curry((obj1, obj2) => assignDeep(obj1, obj2)),\r\n\r\n    objIntersect = curry((obj1, obj2) => reduce((agg, key) => {\r\n        if (obj2.hasOwnProperty(key)) {\r\n            agg[key] = obj2[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objDifference = curry((obj1, obj2) => reduce((agg, key) => {\r\n        if (!obj2.hasOwnProperty(key)) {\r\n            agg[key] = obj1[key];\r\n        }\r\n        return agg;\r\n    }, {}, keys(obj1))),\r\n\r\n    objComplement = curry2((obj0, ...objs) => reduce((agg, obj) =>\r\n        assignDeep(agg, objDifference(obj, obj0)), {}, objs));\r\n","/**\r\n * @module console\r\n * @description Console exports.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * `Console.log` method.\r\n     * @function module:console.log\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    log = console.log.bind(console),\r\n\r\n    /**\r\n     * `Console.error` method.\r\n     * @function module:console.error\r\n     * @params args {...*}\r\n     * @returns {void}\r\n     */\r\n    error = console.error.bind(console),\r\n\r\n    /**\r\n     * Peeks (console.log) at incoming value(s) and returns the last value.\r\n     * @function module:console.peek\r\n     * @param args {...*}\r\n     * @returns {*} Last given value (if one or more values) else first value.\r\n     */\r\n    peek = (...args) => (log(...args), args.pop()),\r\n\r\n    /**\r\n     * `Console.warn`.\r\n     * @function module:console.warn\r\n     * @param args {...*}\r\n     * @returns {void}\r\n     */\r\n    warn = console.warn.bind(console)\r\n\r\n;\r\n","export const\r\n\r\n    /**\r\n     * Clones and object or array using `JSON.parse(JSON.stringify(...))` pattern.\r\n     * @function module:object.jsonClone\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    jsonClone = x => JSON.parse(JSON.stringify(x))\r\n\r\n;\r\n","import {isArray, isType} from './is';\r\nimport {keys} from '../jsPlatform/object';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns an associated list from given object.\r\n     * @note Useful for working with plain javascript objects.\r\n     * @function module:object.toAssocList\r\n     * @param obj {(Object|Array|*)}\r\n     * @returns {Array.<*, *>}\r\n     */\r\n    toAssocList = obj => keys(obj).map(key => [key, obj[key]]),\r\n\r\n    /**\r\n     * Returns an associated list from given object (deeply (on incoming object's type)).\r\n     * @note Does deep conversion on all values of passed in type's type.\r\n     * @function module:object.toAssocListDeep\r\n     * @param obj {*}\r\n     * @param [TypeConstraint = Object] {(Constructor|Function)} - Type constraint to convert on.\r\n     * @returns {*}\r\n     */\r\n    toAssocListDeep = (obj, TypeConstraint = Object) => keys(obj).map(key =>\r\n        TypeConstraint && isType(TypeConstraint, obj[key]) ?\r\n            [key, toAssocListDeep(obj[key], TypeConstraint)] :\r\n            [key, obj[key]]\r\n    ),\r\n\r\n    /**\r\n     * From associated list to object.\r\n     * @function module:object.fromAssocList\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocList = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType()),\r\n\r\n    /**\r\n     * From associated list to object (deep conversion on associative lists (array of 2 value arrays)).\r\n     * @note Considers array of arrays associated lists.\r\n     * @function module:object.fromAssocListDeep\r\n     * @param xs {Array.<Array>} - Associated list.\r\n     * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n     * @returns {*} - Default is `Object`\r\n     */\r\n    fromAssocListDeep = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\r\n        if (isArray(value) && isArray(value[0]) && value[0].length === 2) {\r\n            agg[key] = fromAssocListDeep(value, OutType);\r\n            return agg;\r\n        }\r\n        agg[key] = value;\r\n        return agg;\r\n    }, new OutType())\r\n;\r\n","import {typeOf} from './typeOf';\r\nimport {toAssocList} from './assocList';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Converts incoming value to an array.\r\n     * @note For `WeakMap`, `WeakSet`, `Map` and `Set` result is the same as calling `Array.from` on such.\r\n     * @note For `null`, `undefined`, `NaN`, `Number{}`, `Symbol{}`, `Boolean{}` returns an empty array.\r\n     * @note Method does a shallow conversion;\r\n     * @function module:object.toArray\r\n     * @param x {*} - Thing to convert from.\r\n     * @returns {Array}\r\n     */\r\n    toArray = x => {\r\n        switch (typeOf(x)) {\r\n            case 'Null':\r\n            case 'Undefined':\r\n                return [];\r\n            case String.name:\r\n            case Array.name:\r\n            case 'WeakMap':\r\n            case 'WeakSet':\r\n            case 'Map':\r\n            case 'Set':\r\n                return Array.from(x);\r\n            case Object.name:\r\n            default:\r\n                return toAssocList(x);\r\n        }\r\n    }\r\n\r\n;\r\n","/**\r\n * @module object\r\n * @description Object operations/combinators.\r\n */\r\n\r\nexport * from './jsPlatform/object';\r\nexport * from './object/lookup';\r\nexport * from './object/typeOf';\r\nexport * from './object/copy';\r\nexport * from './object/is';\r\nexport * from './object/of';\r\nexport * from './object/searchObj';\r\nexport * from './object/defineProp';\r\nexport * from './object/assignDeep';\r\nexport * from './object/setTheory';\r\nexport * from './object/console';\r\nexport * from './object/jsonClone';\r\nexport * from './object/toArray';\r\nexport * from './object/assocList';\r\n","import {reduceRight} from '../jsPlatform/array';\r\n\r\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the function on the left of itself.\r\n * @function module:function.compose\r\n * @type {Function}\r\n * @param args {...{Function}}\r\n * @returns {Function}\r\n */\r\nexport const compose = (...args) =>\r\n        arg0 => reduceRight((value, fn) => fn(value), arg0, args);\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:function.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\r\nexport const id = x => x;\r\n","/**\r\n * @memberOf function\r\n */\r\n\r\nimport {apply} from '../jsPlatform/function';\r\nimport {curry, curry2} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Negates a function that takes one/no argument.\r\n     * @function module:function.negateF\r\n     * @param fn {Function}\r\n     * @returns {function(*=): boolean}\r\n     */\r\n    negateF = fn => x => !fn(x),\r\n\r\n    /**\r\n     * Takes a function that takes two parameters and returns a negated version of given\r\n     * function.\r\n     * @function module:_negate.negateF2\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF2 = fn => curry((a, b) => !fn(a, b)),\r\n\r\n    /**\r\n     * Takes a function that takes three parameters and returns a\r\n     * negated version of given function.\r\n     * @function module:_negate.negateF3\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateF3 = fn => curry((a, b, c) => !fn(a, b, c)),\r\n\r\n    /**\r\n     * Returns a negated version of given function.\r\n     * Returned function is variadiac (takes one or more arguments).\r\n     * @note function returned is uncurried.\r\n     * @uncurried\r\n     * @function module:function.negateFN\r\n     * @param fn {Function}\r\n     * @returns {Function}\r\n     */\r\n    negateFN = fn => curry2((...args) => !apply(fn, args));\r\n","import {curry} from './curry';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Run `operation` until predicate returns `true` (like a functional\r\n     *  version of a while loop).\r\n     * @function module:function.until\r\n     * @param predicate {Function} :: a -> Boolean\r\n     * @param operation {Function} :: a -> a\r\n     * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n     * @returns {*} - What ever type `typeInstance` is\r\n     */\r\n    until = curry((predicate, operation, typeInstance) => {\r\n        let result = typeInstance;\r\n        while (!predicate(result)) {\r\n            result = operation(result);\r\n        }\r\n        return result;\r\n    });\r\n","import {typeOf} from '../object/typeOf';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a function or throws an error if given `f` is not a function.\r\n     * @function module:function.fnOrError\r\n     * @param symbolName {String} - Error message prefix.\r\n     * @param f {Function|*} - Expected function.\r\n     * @returns {Function}\r\n     * @throws {Error} - Error if `f` is not of `function`\r\n     */\r\n    fnOrError = (symbolName, f) => {\r\n        if (!f || !(f instanceof Function)) {\r\n            throw new Error(`${symbolName} should be a function. ` +\r\n                `Type received: ${typeOf(f)};  Value received: ${f}.`);\r\n        }\r\n        return f;\r\n    }\r\n\r\n;\r\n","/**\r\n * No-op ('op' as in 'operation') - Performs no operation 'always' (good for places where\r\n * a value should always be a function etc.).\r\n * @function module:function.noop\r\n * @returns {undefined}\r\n */\r\nexport const noop = () => undefined;\r\n","/**\r\n * Trampolines function calls in order to avoid stack overflow errors\r\n * on recursive function calls; Tail recursion replacement.\r\n * @example\r\n * // Instead of ... (which is prone to stack-overflow in\r\n * //   non-tail-call optimized environments (es5-es3))\r\n * const factorial = n => n > 1 ? n * factorial(n - 1) : 1;\r\n *\r\n * // We do\r\n * const\r\n *\r\n *  factorialProcess = (n, agg = 1) => {\r\n *      n > 1 ? () => factorialProcess(n - 1, agg * n) : agg,\r\n *  },\r\n *\r\n *  factorial = trampoline(factorialProcess)\r\n *  // will not overflow as we are performing tail call elimination\r\n *  // by returning thunks from factorial process which run in `while` loop\r\n *  // within `trampoline`.\r\n *\r\n *  ;\r\n *\r\n * @note function returned by trampoline is not curried (for convenience)!\r\n * @function module:function.trampoline\r\n * @param fn {Function} - Function to trampoline.\r\n * @param [fnName=undefined] {String} - Optionally restrict trampolining only to function with specific name.\r\n * @returns {*} - Finally returned value.\r\n */\r\nexport const trampoline = (fn, fnName) => {\r\n    return (...args) => {\r\n        let result = fn.apply(null, args);\r\n        while (typeof result === 'function' &&\r\n            (!fnName || (result.name === fnName))) {\r\n            result = result();\r\n        }\r\n        return result;\r\n    };\r\n};\r\n","import {isFunction} from '../object/is';\r\n\r\nexport const\r\n\r\n    /**\r\n     * If given value is not a function, wraps it an 'identity' function (function that returns given value untouched) else returns given value. (useful in\r\n     * functional composition).\r\n     * @function module:function.toFunction\r\n     * @param x {Function|any}\r\n     * @returns {function(): any}\r\n     */\r\n    toFunction = x => isFunction(x) ? x : () => x;\r\n","/**\r\n * @module function\r\n */\r\nexport * from './jsPlatform/function';\r\nexport * from './function/compose';\r\nexport * from './function/curry';\r\nexport * from './function/flip';\r\nexport * from './function/id';\r\nexport * from './function/negate';\r\nexport * from './function/until';\r\nexport * from './function/fnOrError';\r\nexport * from './function/noop';\r\nexport * from './function/trampoline';\r\nexport * from './function/toFunction';\r\n","/**\r\n * @module object\r\n */\r\nimport {curry} from '../function/curry';\r\n\r\n/**\r\n * Normalizes step for `from` and `to` combination.\r\n * @function module:list.normalizeStep\r\n * @param from {Number}\r\n * @param to {Number}\r\n * @param [step = 1] {Number}\r\n * @returns {Number}\r\n * @private\r\n */\r\nconst normalizeStep = (from, to, step) => {\r\n    if (from > to) {\r\n        return step > 0 ? -step : step; // make step negative\r\n    }\r\n    return step < 0 ? -1 * step : step; // make step positive\r\n};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Range function - gives you an array contain numbers in given range.\r\n     * @note normalizes `step` to be valid if range numbers given are invalid\r\n     *  (forces `step` to be negative if range required is in the negative direction\r\n     *  and forces `step` to be positive if range required is in the other direction).\r\n     * @function module:list.range\r\n     * @param from {Number}\r\n     * @param to {Number}\r\n     * @param [step = 1] {Number}\r\n     * @returns {Array.<Number>}\r\n     */\r\n    range = curry((from, to, step = 1) => {\r\n        let i = from;\r\n        const out = [];\r\n        step = normalizeStep(from, to, step);\r\n        if (step === 0 || from === to) { return [from]; }\r\n        for (; (to - i) * step >= 0; i += step) { out.push(i); }\r\n        return out;\r\n    })\r\n;\r\n","/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\r\n\r\nimport {fPureTakesOne} from '../utils';\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:jsPlatform.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\nexport const split = fPureTakesOne('split');\r\n","/**\r\n * @module jsPlatform\r\n */\r\nexport * from './jsPlatform/object';\r\nexport * from './jsPlatform/array';\r\nexport * from './jsPlatform/list';\r\nexport * from './jsPlatform/string';\r\nexport * from './jsPlatform/function';\r\n","/**\r\n * List operations module.\r\n * @module list\r\n */\r\nimport {concat as listAppend, indexOf, slice, includes} from './jsPlatform/list';\r\nimport {apply} from './jsPlatform/function';\r\nimport {length} from './jsPlatform/object';\r\nimport {negateF3, negateF2} from './function/negate';\r\nimport {curry, curry2, curry3} from './function/curry';\r\nimport {isTruthy, isFalsy} from './boolean';\r\nimport {lookup} from './object/lookup';\r\nimport {of} from './object/of';\r\nimport {isset, isString} from './object/is';\r\nimport {typeOf} from './object/typeOf';\r\nimport map from './list/map';\r\n\r\nimport {\r\n    sliceFrom, sliceTo, lengths,\r\n    toShortest, aggregateArray,\r\n    reduceUntil, reduce, reduceRight, lastIndex,\r\n    findIndexWhere, findIndexWhereRight, findIndicesWhere,\r\n    findWhere, sliceCopy, genericAscOrdering\r\n}\r\n    from './list/utils';\r\n\r\nexport * from './list/range';\r\n\r\nexport * from './list/utils';\r\n\r\nexport {map};\r\n\r\nexport {slice, includes, indexOf, lastIndexOf, push} from './jsPlatform';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Append two, or more, lists, i.e.,\r\n     * @example\r\n     * expectEqual(append(take(13, alphabetString), drop(13, alphabetString)), alphabetString); // true\r\n     *\r\n     * // Another example\r\n     * const result = append(\r\n     *   alphabetStr.split(''),\r\n     *   alphabetStr.split('')\r\n     * ),\r\n     * expected = repeat(2, alphabetStr).split('');\r\n     *\r\n     * shallowEquals(result, expected) === true // `true`\r\n     *\r\n     * @function module:list.append\r\n     * @param [args] {...(Array|String|*)} - One or more lists or list likes (strings etc.).\r\n     * @returns {(Array|String|*)} - Same type as list like passed in.\r\n     * @curried - Curried at upto 2 arguments.\r\n     */\r\n    append = curry2((...args) => apply(listAppend, args)),\r\n\r\n    /**\r\n     * Returns head of list (first item of list).\r\n     * @haskellType `head :: [a] -> a`\r\n     * @function module:list.head\r\n     * @param x {Array|String}\r\n     * @returns {*} - First item from list\r\n     */\r\n    head = x => x[0],\r\n\r\n    /**\r\n     * Returns last item of list.\r\n     * @haskellType `last :: [a] -> a`\r\n     * @function module:list.last\r\n     * @param xs {Array|String}\r\n     * @returns {*}\r\n     */\r\n    last = xs => xs[lastIndex(xs)],\r\n\r\n    /**\r\n     * Returns tail part of list (everything after the first item as new list).\r\n     * @haskelType `tail :: [a] -> [a]`\r\n     * @function module:list.tail\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    tail = xs => sliceFrom(1, xs),\r\n\r\n    /**\r\n     * Returns everything except last item of list as new list.\r\n     * @haskellType `init :: [a] -> [a]`\r\n     * @function module:list.init\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    init = xs => sliceTo(lastIndex(xs), xs),\r\n\r\n    /**\r\n     * Returns `head` and `tail` of passed in list/string in a tuple.\r\n     * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n     * @function module:list.uncons\r\n     * @param xs {Array|String}\r\n     * @returns {Array|undefined}\r\n     */\r\n    uncons = xs => !xs || length(xs) === 0 ? undefined : [head(xs), tail(xs)],\r\n\r\n    /**\r\n     * Returns `tail` and `head` of passed in list/string in a tuple.\r\n     * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n     * @function module:list.unconsr\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String|*|undefined}\r\n     */\r\n    unconsr = xs => !xs || length(xs) === 0 ? undefined : [init(xs), last(xs)],\r\n\r\n    /**\r\n     * Concatenates all the elements of a container of lists.\r\n     * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n     * @function module:list.concat\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    concat = xs => {\r\n        switch (length(xs)) {\r\n            case undefined:\r\n            case 0:\r\n                return [];\r\n            case 1:\r\n                const item0 = xs[0];\r\n                return item0 && item0.slice ? sliceCopy(item0) : item0;\r\n            case 2:\r\n            default:\r\n                return apply(append, xs);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Map a function over all the elements of a container and concatenate the resulting lists.\r\n     * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n     * @function module:list.concatMap\r\n     * @param fn {Function}\r\n     * @param foldableOfA {Array}\r\n     * @returns {Array}\r\n     */\r\n    concatMap = curry((fn, foldableOfA) => concat(map(fn, foldableOfA))),\r\n\r\n    /**\r\n     * Returns a copy of the passed in list reverses.\r\n     * @haskellType `reverse :: [a] -> [a]`\r\n     * @function module:list.reverse\r\n     * @param xs {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    reverse = xs => {\r\n        if (!isset(xs) || !xs.length) {\r\n            return xs;\r\n        }\r\n        let out = of(xs),\r\n            i = xs.length - 1;\r\n        switch (typeOf(xs)) {\r\n            case 'String':\r\n                for (; i >= 0; i -= 1) {\r\n                    out += xs[i];\r\n                }\r\n                return out;\r\n            default:\r\n                for (; i >= 0; i -= 1) {\r\n                    out.push(xs[i]);\r\n                }\r\n                return out;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Takes an element and a list and `intersperses' that element between the\r\n     *  elements of the list.\r\n     * @function module:list.intersperse\r\n     * @note In our version of the function javascript is loosely typed so,\r\n     *  so is our function (to much overhead to make it typed) so `between` can be any value.\r\n     * @param between {*} - Should be of the same type of elements contained in list.\r\n     * @param arr {Array|String} - List.\r\n     * @returns {Array|String}\r\n     */\r\n    intersperse = curry((between, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return xs;\r\n        }\r\n        const limit = xs.length,\r\n            lastInd = limit - 1;\r\n        let out = of(xs),\r\n            i = 0;\r\n        if (isString(xs)) {\r\n            for (; i < limit; i += 1) {\r\n                out += i === lastInd ?\r\n                    xs[i] : xs[i] + between;\r\n            }\r\n            return out;\r\n        }\r\n        for (; i < limit; i += 1) {\r\n            if (i === lastInd) {\r\n                out.push(xs[i]);\r\n            } else {\r\n                out.push(xs[i], between);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n     * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n     * @function module:list.intercalate\r\n     * @param xs {Array|String}\r\n     * @param xss {Array|String}\r\n     * @returns {Array|String}\r\n     */\r\n    intercalate = curry((xs, xss) => {\r\n        if (isString(xss)) {\r\n            return intersperse(xs, xss);\r\n        }\r\n        return concat(intersperse(xs, xss));\r\n    }),\r\n\r\n    /**\r\n     * Transposes rows and columns into lists by index;  E.g.,\r\n     * Haskell example:\r\n     * ```\r\n     *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n     *\r\n     *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n     *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n     * ```\r\n     * @note from columns to rows.\r\n     * @note Empty lists are ignored.\r\n     * @haskellType `transpose :: [[a]] -> [[a]]`\r\n     * @function module:list.transpose\r\n     * @param xss {Array}\r\n     * @returns {Array}\r\n     */\r\n    transpose = xss => {\r\n        let numLists = length(xss),\r\n            ind = 0, ind2;\r\n        if (!numLists) {\r\n            return [];\r\n        }\r\n        const listLengths = apply(lengths, xss),\r\n            longestListLen = maximum(listLengths),\r\n            outLists = [];\r\n        for (; ind < longestListLen; ind += 1) {\r\n            const outList = [];\r\n            for (ind2 = 0; ind2 < numLists; ind2 += 1) {\r\n                if (listLengths[ind2] < ind + 1) {\r\n                    continue;\r\n                }\r\n                outList.push(xss[ind2][ind]);\r\n            }\r\n            outLists.push(outList);\r\n        }\r\n        return filter(x => length(x) > 0, outLists);\r\n    },\r\n\r\n    /**\r\n     * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n     * the length of the passed in sequence so: 2^length(xs)).\r\n     * Note: The return value doubles per index/character passed in so use with caution!\r\n     *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n     *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n     *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n     * @function module:list.subsequences\r\n     * @jsperftest https://jsperf.com/subsequences\r\n     * @param xs {Array|String}\r\n     * @returns {Array.<Array>}\r\n     */\r\n    subsequences = xs => {\r\n        const listLen = length(xs),\r\n            len = Math.pow(2, listLen),\r\n            out = [];\r\n        for (let i = 0; i < len; i += 1) {\r\n            let entry = [];\r\n            for (let j = 0; j < listLen; j += 1) {\r\n                if (i & (1 << j)) {\r\n                    entry.push(xs[j]);\r\n                }\r\n            }\r\n            out.push(entry);\r\n        }\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with the given indices swapped.\r\n     * @function module:list.swapped\r\n     * @param ind1 {Number}\r\n     * @param ind2 {Number}\r\n     * @param list {Array}\r\n     * @returns {Array} - Copy of incoming with swapped values at indices.\r\n     */\r\n    swapped = curry((ind1, ind2, list) => {\r\n        const out = sliceCopy(list),\r\n            tmp = out[ind1];\r\n        out[ind1] = out[ind2];\r\n        out[ind2] = tmp;\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Returns a list of permutations for passed in list.\r\n     *  Use caution with lists above a length of 15 (will take long due to nature of\r\n     *  algorithm).\r\n     * @function module:list.permutations\r\n     * @param xs {Array} - List.\r\n     * @returns {Array<Array|String|*>} - Array of permutations.\r\n     */\r\n    permutations = xs => {\r\n        const limit = length(xs);\r\n\r\n        if (!limit || limit === 1) {\r\n            return [xs];\r\n        }\r\n\r\n        let list = sliceCopy(xs),\r\n            c = repeat(limit, 0),\r\n            i = 0;\r\n\r\n        const out = [list];\r\n\r\n        for (; i < limit; i++) {\r\n            if (c[i] < i) {\r\n                list = swapped(i % 2 === 0 ? 0 : c[i], i, list);\r\n                out.push(list);\r\n                c[i] += 1;\r\n                i = 0;\r\n                continue;\r\n            }\r\n            c[i] = 0;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\r\n     * @function module:list.foldl\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldl = reduce,\r\n\r\n    /**\r\n     * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\r\n     * @function module:list.foldr\r\n     * @param fn {Function}\r\n     * @param zero {*} - Aggregator.\r\n     * @param functor {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `fn`.\r\n     */\r\n    foldr = reduceRight,\r\n\r\n    /**\r\n     * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldl1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldl1 = curry((op, xs) => {\r\n        const parts = uncons(xs);\r\n        return !parts ? [] : reduce(op, parts[0], parts[1]);\r\n    }),\r\n\r\n    /**\r\n     * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\r\n     * out from a copy of the container.\r\n     * @function module:list.foldr1\r\n     * @param op {Function}\r\n     * @param xs {Array}\r\n     * @returns {*} - Whatever type is lastly returned from `op`.\r\n     */\r\n    foldr1 = curry((op, xs) => {\r\n        const parts = unconsr(xs);\r\n        return !parts ? [] : reduceRight(op, parts[1], parts[0]);\r\n    }),\r\n\r\n    /**\r\n     * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumL\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregateArray on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumL = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = 0,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind < limit; ind++) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n     * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n     * @function module:list.mapAccumR\r\n     * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n     * @param zero {*} - An instance of the passed in list type used to aggregateArray on.\r\n     * @param xs {Array} - list type.\r\n     * @return {Array} - [aggregated, list]\r\n     */\r\n    mapAccumR = curry((op, zero, xs) => {\r\n        const list = sliceCopy(xs),\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return [zero, list];\r\n        }\r\n        let ind = limit - 1,\r\n            agg = zero,\r\n            mapped = [],\r\n            tuple;\r\n        for (; ind >= 0; ind--) {\r\n            tuple = op(agg, list[ind], ind);\r\n            agg = tuple[0];\r\n            mapped = tuple[1];\r\n        }\r\n        return [agg, mapped];\r\n    }),\r\n\r\n    /**\r\n     * iterate f x returns an infinite list of repeated applications of f to x.\r\n     * @function module:list.iterate\r\n     * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\r\n     * @param limit {Number}\r\n     * @param op {Function} - Operation.\r\n     * @param x {*} - Starting point.\r\n     * @returns {*}\r\n     */\r\n    iterate = curry((limit, op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            lastX = x;\r\n        for (; ind < limit; ind += 1) {\r\n            out.push(lastX);\r\n            lastX = op(lastX, ind);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Repeats `x` `limit` number of times.\r\n     * @function module:list.repeat\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    repeat = curry((limit, x) => iterate(limit, a => a, x)),\r\n\r\n    /**\r\n     * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n     * @function module:list.replicate\r\n     * @param limit {Number}\r\n     * @param x {*}\r\n     * @return {Array}\r\n     */\r\n    replicate = repeat,\r\n\r\n    /**\r\n     * Replicates a list `limit` number of times and appends the results (concat)\r\n     * @function module:list.cycle\r\n     * @param limit {Number}\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    cycle = curry((limit, xs) => concat(replicate(limit, xs))),\r\n\r\n    /**\r\n     * Unfolds a value into a list of somethings.\r\n     * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n     * @function module:list.unfoldr\r\n     * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregateArray and item to unfold in next iteration).\r\n     * @param x {*} - Starting parameter to unfold from.\r\n     * @returns {Array} - An array of whatever you return from `op` yielded.\r\n     */\r\n    unfoldr = curry((op, x) => {\r\n        let ind = 0,\r\n            out = [],\r\n            resultTuple = op(x, ind, out);\r\n        while (resultTuple) {\r\n            out.push(resultTuple[0]);\r\n            resultTuple = op(resultTuple[1], ++ind, out);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Finds index in string or list (alias for `findIndex`).\r\n     * @function module:list.findIndex\r\n     * @param pred {Function} - Predicate<element, index, arr>.\r\n     * @param arr {Array|String}\r\n     * @returns {Number} - `-1` if predicate not matched else `index` found\r\n     */\r\n    findIndex = findIndexWhere,\r\n\r\n    /**\r\n     * @function module:list.findIndices\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array|undefined}\r\n     */\r\n    findIndices = findIndicesWhere,\r\n\r\n    /**\r\n     * @function module:list.elemIndex\r\n     * @param x {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndex = curry((x, xs) => {\r\n        const foundInd = indexOf(x, xs);\r\n        return foundInd !== -1 ? foundInd : undefined;\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.elemIndices\r\n     * @param value {*} - Element to search for.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*}\r\n     */\r\n    elemIndices = curry((value, xs) => findIndices(x => x === value, xs)),\r\n\r\n    /**\r\n     * Takes `n` items from start of list to `limit` (exclusive).\r\n     * @function module:list.take\r\n     * @param list {Array|String}\r\n     * @param limit {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    take = sliceTo,\r\n\r\n    /**\r\n     * Drops `n` items from start of list to `count` (exclusive).\r\n     * @function module:list.drop\r\n     * @param list {Array|String}\r\n     * @param count {Number}\r\n     * @returns {String|Array} - Passed in type's type\r\n     */\r\n    drop = sliceFrom,\r\n\r\n    /**\r\n     * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n     * given index in second part of returned list)).\r\n     * @function module:list.splitAt\r\n     * @param ind {Number} - Index to split at.\r\n     * @param list {Array|String} - functor (list or string) to split.\r\n     * @returns {Array|String} - List like type passed\r\n     */\r\n    splitAt = (ind, list) => [sliceTo(ind, list), sliceFrom(ind, list)],\r\n\r\n    /**\r\n     * Gives an list with passed elements while predicate was true.\r\n     * @function module:list.takeWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @returns {Array}\r\n     */\r\n    takeWhile = curry((pred, list) =>\r\n        reduceUntil(\r\n            negateF3(pred),     // predicate\r\n            isString(list) ?\r\n                (agg, x) => agg + x :\r\n                aggregateArray, // operation\r\n            of(list),           // aggregate\r\n            list\r\n        )),\r\n\r\n    /**\r\n     * Returns an list without elements that match predicate.\r\n     * @function module:list.dropWhile\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhile = curry((pred, list) => {\r\n        const limit = length(list),\r\n            splitPoint =\r\n                findIndexWhere(\r\n                    (x, i, xs) => !pred(x, i, xs),\r\n                    list\r\n                );\r\n\r\n        return splitPoint === -1 ?\r\n            sliceFrom(limit, list) :\r\n            slice(splitPoint, limit, list);\r\n    }),\r\n\r\n    /**\r\n     * @function module:list.dropWhileEnd\r\n     * @param pred {Function} - Predicate<*, index, list|string>\r\n     * @param list {Array|String}\r\n     * @refactor\r\n     * @returns {Array|String}\r\n     */\r\n    dropWhileEnd = curry((pred, list) => {\r\n        const splitPoint =\r\n            findIndexWhereRight(\r\n                (x, i, xs) => !pred(x, i, xs),\r\n                list\r\n            );\r\n        if (splitPoint === -1) {\r\n            return of(list);\r\n        }\r\n        return sliceTo(splitPoint + 1, list);\r\n    }),\r\n\r\n    /**\r\n     * Gives you the `span` of items matching predicate\r\n     * and items not matching predicate;  E.g., Gives an\r\n     * array of arrays;  E.g., [[matching-items], [non-matching-items]]\r\n     * @function list.span\r\n     * @param pred {Function} - List predicate (`(x, i, list) => bool`)\r\n     * @param list {Array|String}\r\n     * @returns {(Array<Array<*>>|Array<String>)}\r\n     * @type {Function}\r\n     */\r\n    span = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(negateF3(pred), list);\r\n        return splitPoint === -1 ?\r\n            [sliceFrom(0, list), of(list)] :\r\n            splitAt(splitPoint, list);\r\n    }),\r\n\r\n    /**\r\n     * breakOnList, applied to a predicate p and a list xs, returns a tuple\r\n     * where first element is longest prefix (possibly empty) of xs of elements\r\n     * that do not satisfy p and second element is the remainder of the list:\r\n     * @haskellExample\r\n     * Replace `break` with `breakOnList` for our version.\r\n     * ```\r\n     * breakOnList (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\r\n     * breakOnList (< 9) [1,2,3] == ([],[1,2,3])\r\n     * breakOnList (> 9) [1,2,3] == ([1,2,3],[])\r\n     * ```\r\n     * @function module:list.breakOnList\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    breakOnList = curry((pred, list) => {\r\n        const splitPoint = findIndexWhere(negateF3(pred), list);\r\n        return splitPoint === -1 ?\r\n            [of(list), sliceFrom(0, list)] : reverse(splitAt(splitPoint, list));\r\n    }),\r\n\r\n    /**\r\n     * Gets item at index.\r\n     * @function module:list.at\r\n     * @param ind {Number} - Index.\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*|undefined} - Item or `undefined`.\r\n     */\r\n    at = lookup,\r\n\r\n    /**\r\n     * Find an item in structure of elements based on given predicate (`pred`).\r\n     * @function module:list.find\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {*} - Found item.\r\n     */\r\n    find = findWhere,\r\n\r\n    /**\r\n     * For each function (same as `[].forEach` except in functional format).\r\n     * @function module:list.forEach\r\n     * @param fn {Function} - Operation (`(element, index, list) => {...}`, etc.)\r\n     * @param xs {(Array|String)}\r\n     * @returns {void}\r\n     */\r\n    forEach = curry((fn, list) => {\r\n        const limit = length(list);\r\n        if (!limit) {\r\n            return;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            fn(list[ind], ind, list);\r\n        }\r\n    }),\r\n\r\n    /**\r\n     * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\r\n     * @function module:list.filter\r\n     * @param pred {Function}\r\n     * @param xs {Array} - list or list like.\r\n     * @returns {Array} - Structure of filtered elements.\r\n     */\r\n    filter = curry((pred, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs),\r\n            out = [];\r\n        if (!limit) {\r\n            return out;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (pred(xs[ind], ind, xs)) {\r\n                out.push(xs[ind]);\r\n            }\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n     * do not match the tuple are in second list in the returned tuple.\r\n     *  Essentially `[filter(p, xs), filter(negateF3(p), xs)]`.\r\n     * @function module:list.partition\r\n     * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n     * @param list {Array}\r\n     * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n     */\r\n    partition = curry((pred, list) =>\r\n        !length(list) ?\r\n            [[], []] :\r\n            [filter(pred, list), filter(negateF3(pred), list)]),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether an element exists in given structure of elements.\r\n     * @function module:list.elem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    elem = includes,\r\n\r\n    /**\r\n     * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\r\n     * @function module:list.notElem\r\n     * @param element {*}\r\n     * @param xs {Array}\r\n     * @returns {Boolean}\r\n     */\r\n    notElem = negateF2(includes),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a prefix of list `xs2`\r\n     * @function module:list.isPrefixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isPrefixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit1; ind++) {\r\n            if (xs1[ind] !== xs2[ind]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a suffix of list `xs2`\r\n     * @function module:list.isSuffixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSuffixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\r\n            return false;\r\n        }\r\n        let ind1 = limit1 - 1,\r\n            ind2 = limit2 - 1;\r\n        for (; ind1 >= 0; ind1--) {\r\n            if (xs1[ind1] !== xs2[ind2]) {\r\n                return false;\r\n            }\r\n            ind2 -= 1;\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is an infix of list `xs2`\r\n     * @function module:list.isInfixOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isInfixOf = curry((xs1, xs2) => {\r\n        const limit1 = length(xs1),\r\n            limit2 = length(xs2);\r\n        if (limit2 < limit1 || !limit1 || !limit2) {\r\n            return false;\r\n        }\r\n        let ind1,\r\n            foundLen,\r\n            ind = 0;\r\n        for (; ind < limit2; ind += 1) {\r\n            foundLen = 0;\r\n            for (ind1 = 0; ind1 < limit1; ind1 += 1) {\r\n                if (xs2[ind1 + ind] === xs1[ind1]) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === limit1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Checks if list `xs1` is a sub-sequence of list `xs2`\r\n     * @function module:list.isSubsequenceOf\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {boolean}\r\n     */\r\n    isSubsequenceOf = curry((xs1, xs2) => {\r\n        const len = Math.pow(2, length(xs2)),\r\n            lenXs1 = length(xs1);\r\n        let foundLen,\r\n            i;\r\n        for (i = 0; i < len; i += 1) {\r\n            foundLen = 0;\r\n            for (let j = 0; j < len; j += 1) {\r\n                if (i & (1 << j) && indexOf(xs2[j], xs1) > -1) {\r\n                    foundLen += 1;\r\n                }\r\n                if (foundLen === lenXs1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * The group function takes a list and returns a list of lists such that\r\n     *  the concatenation of the result is equal to the argument. Moreover, each\r\n     *  sublist in the result contains only equal elements. For example,\r\n     * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n     * It is a special case of groupBy, which allows the programmer to supply\r\n     *  their own equality test.\r\n     * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n     * @function module:list.group\r\n     * @param xs {Array|String}\r\n     * @returns {Array<Array|String|*>|*}\r\n     */\r\n    group = xs => groupBy((a, b) => a === b, xs),\r\n\r\n    /**\r\n     * Allows you to group items in a list based on your supplied equality check.\r\n     * @note Sames `group` but allows you to specify equality operation.\r\n     * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n     * @function module:list.groupBy\r\n     * @param equalityOp {Function}\r\n     * @param xs {Array}\r\n     * @returns {*}\r\n     */\r\n    groupBy = curry((equalityOp, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return sliceCopy(xs);\r\n        }\r\n        let ind = 0,\r\n            prevItem,\r\n            item,\r\n            predOp = x => {\r\n                if (equalityOp(x, prevItem)) {\r\n                    ind++;\r\n                }\r\n                if (equalityOp(x, item)) {\r\n                    prevItem = x;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            agg = [];\r\n        for (; ind < limit; ind += 1) {\r\n            item = xs[ind];\r\n            agg.push(takeWhile(predOp, slice(ind, limit, xs)));\r\n        }\r\n        return agg;\r\n    }),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(inits('abc'), ['','a','ab','abc'])\r\n     * ```\r\n     * @function module:list.inits\r\n     * @haskellType `inits :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    inits = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(sliceTo(ind, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => init(list), xs),\r\n\r\n    /**\r\n     * The inits function returns all initial segments of the argument, shortest first. For example,\r\n     * ```\r\n     * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\r\n     * ```\r\n     * @function module:list.tails\r\n     * @haskellType `tails :: [a] -> [[a]]`\r\n     * @param xs {Array}\r\n     * @returns {Array}\r\n     */\r\n    tails = xs => {\r\n        let limit = length(xs),\r\n            ind = 0,\r\n            agg = [];\r\n        if (!limit) {\r\n            return [];\r\n        }\r\n        for (; ind <= limit; ind += 1) {\r\n            agg.push(slice(ind, limit, xs));\r\n        }\r\n        return agg;\r\n    }, //map(list => tail(list), xs),\r\n\r\n    /**\r\n     * Strips prefix list from given list\r\n     * @function module:list.stripPrefix\r\n     * @param prefix {Array|String|*}\r\n     * @param list {Array|string|*}\r\n     * @returns {Array|*}\r\n     */\r\n    stripPrefix = curry((prefix, list) =>\r\n        isPrefixOf(prefix, list) ?\r\n            splitAt(length(prefix), list)[1] :\r\n            sliceCopy(list)),\r\n\r\n    /**\r\n     * zip takes two lists and returns a list of corresponding pairs.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n     * @function module:list.zip\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip = curry((arr1, arr2) => {\r\n        if (!length(arr1) || !length(arr2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = toShortest(arr1, arr2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, [item, a2[ind]]),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * zipN takes one or more lists and returns a list containing lists of all indices\r\n     * at a given index, index by index.\r\n     * If one input list is short, excess elements of the longer list are discarded.\r\n     * @function module:list.zipN\r\n     * @param lists {Array|String} - One ore more lists of the same type.\r\n     * @returns {Array}\r\n     */\r\n    zipN = curry2((...lists) => {\r\n        const trimmedLists = apply(toShortest, lists);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, map(xs => xs[ind], trimmedLists)),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n     * @function module:list.zip3\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip3 = curry((arr1, arr2, arr3) => zipN(arr1, arr2, arr3)),\r\n\r\n    /**\r\n     * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n     * @function module:list.zip4\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip4 = curry((arr1, arr2, arr3, arr4) => zipN(arr1, arr2, arr3, arr4)),\r\n\r\n    /**\r\n     * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n     * @function module:list.zip5\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @param arr3 {Array}\r\n     * @param arr4 {Array}\r\n     * @param arr5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zip5 = curry((arr1, arr2, arr3, arr4, arr5) => zipN(arr1, arr2, arr3, arr4, arr5)),\r\n\r\n    /**\r\n     * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n     * zipWith generalises zip by zipping with the function given as the\r\n     * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n     * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n     * @note `_|_` means bottom or perpetual (@see\r\n     *  - https://wiki.haskell.org/Bottom\r\n     *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n     *  )\r\n     * @example\r\n     * ```\r\n     * zipWith f [] _|_ = []\r\n     * ```\r\n     * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n     * @function module:list.zipWith\r\n     * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n     *  E.g., ` op :: a -> b -> (a, b)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith = curry((op, xs1, xs2) => {\r\n        if (!length(xs1) || !length(xs2)) {\r\n            return [];\r\n        }\r\n        const [a1, a2] = toShortest(xs1, xs2);\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, op(item, a2[ind])),\r\n            [], a1);\r\n    }),\r\n\r\n    /**\r\n     * Zips all given lists with tupling function. Note: Haskell types do not have\r\n     *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n     *  is left there for general purpose not for exactness as is told by aforementioned.\r\n     * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n     *  of lists to zip.\r\n     * @function module:list.zipWithN\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param lists ...{Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWithN = curry3((op, ...lists) => {\r\n        const trimmedLists = apply(toShortest, lists),\r\n            lenOfTrimmed = length(trimmedLists);\r\n        if (!lenOfTrimmed) {\r\n            return [];\r\n        }\r\n        else if (lenOfTrimmed === 1) {\r\n            return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\r\n        }\r\n        return reduce((agg, item, ind) =>\r\n                aggregateArray(agg, apply(op, map(xs => xs[ind], trimmedLists))),\r\n            [], trimmedLists[0]);\r\n    }),\r\n\r\n    /**\r\n     * Zips 3 lists with tupling function.\r\n     * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n     * @function module:list.zipWith3\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith3 = curry((op, xs1, xs2, xs3) => zipWithN(op, xs1, xs2, xs3)),\r\n\r\n    /**\r\n     * Zips 4 lists with tupling function.\r\n     * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n     * @function module:list.zipWith4\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith4 = curry((op, xs1, xs2, xs3, xs4) => zipWithN(op, xs1, xs2, xs3, xs4)),\r\n\r\n    /**\r\n     * Zips 5 lists.\r\n     * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n     * @function module:list.zipWith5\r\n     * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n     *  of said parts:\r\n     *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n     * @param xs1 {Array}\r\n     * @param xs2 {Array}\r\n     * @param xs3 {Array}\r\n     * @param xs4 {Array}\r\n     * @param xs5 {Array}\r\n     * @returns {Array<Array<*,*>>}\r\n     */\r\n    zipWith5 = curry((op, xs1, xs2, xs3, xs4, xs5) => zipWithN(op, xs1, xs2, xs3, xs4, xs5)),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n     * @function module:list.unzip\r\n     * @param arr {Array|*}\r\n     * @returns {Array|*}\r\n     */\r\n    unzip = foldl((agg, item) => {\r\n        agg[0].push(item[0]);\r\n        agg[1].push(item[1]);\r\n        return agg;\r\n    }, [[], []]),\r\n\r\n    /**\r\n     * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n     * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n     * @function module:list.unzipN\r\n     * @param list {Array|*} - List of tuples (lists).\r\n     * @returns {Array|*}\r\n     */\r\n    unzipN = list => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const lenItem0 = length(list[0]);\r\n        let zero = lenItem0 ?\r\n            unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) :\r\n            [];\r\n        return foldl((agg, item) => {\r\n            agg.forEach((outList, ind) => outList.push(item[ind]));\r\n            return agg;\r\n        }, zero, list);\r\n    },\r\n\r\n    /**\r\n     * Returns true if any item in container passes predicate `p`.\r\n     * @function module:list.any\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    any = curry((p, xs) => {\r\n        let ind = 0,\r\n            limit = length(xs);\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind += 1) {\r\n            if (p(xs[ind])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }),\r\n\r\n    /**\r\n     * Returns true if all items in container pass predicate `p`.\r\n     * @function module:list.all\r\n     * @param p {Function} - Predicate.\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    all = curry((p, xs) => {\r\n        const limit = length(xs);\r\n        let ind = 0;\r\n        if (!limit) {\r\n            return false;\r\n        }\r\n        for (; ind < limit; ind++) {\r\n            if (!p(xs[ind], ind, xs)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }),\r\n\r\n    /**\r\n     * Conjuction of container of bools (or truthy and/or falsy values);  Returns\r\n     * `true` if all in container are 'truthy' else returns `false`\r\n     * @function module:list.and\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    and = xs => all(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether any item in container is 'truthy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.or\r\n     * @haskellType `or :: Bool -> Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    or = xs => any(isTruthy, xs),\r\n\r\n    /**\r\n     * Returns a boolean indicating whether all items in container are 'falsy' or not.\r\n     * **Note** The haskell type for this function only takes two items, but here\r\n     * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n     * @function module:list.not\r\n     * @haskellType `not :: Bool -> Bool`\r\n     * @param xs {Array|String}\r\n     * @returns {Boolean}\r\n     */\r\n    not = xs => all(isFalsy, xs),\r\n\r\n    /**\r\n     * Computes the sum of the numbers of a structure.\r\n     * @function module:list.sum\r\n     * @haskellType `sum :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    sum = list => foldl((agg, x) => agg + x, 0, list),\r\n\r\n    /**\r\n     * Computes the product of the numbers of a structure.\r\n     * @function module:list.product\r\n     * @haskellType `product :: (List t, Num a) => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {Number}\r\n     */\r\n    product = list => foldl((agg, x) => agg * x, 1, list),\r\n\r\n    /**\r\n     * Returns the largest element in a non-empty structure of elements.\r\n     * @function module:list.maximum\r\n     * @haskellType `maximum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    maximum = list => last(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * Returns the smallest element in a non-empty structure of elements.\r\n     * @function module:list.minimum\r\n     * @haskellType `minimum :: forall a . Ord a => t a -> a`\r\n     * @param list {Array|String}\r\n     * @returns {*} - Whatever type the array is made of (if any).\r\n     */\r\n    minimum = list => head(sortBy(genericAscOrdering, list)),\r\n\r\n    /**\r\n     * scanl is similar to foldl, but returns a list of successive reduced values from the left:\r\n     * ```\r\n     * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\r\n     * ```\r\n     * Also note that:\r\n     * ```\r\n     * last (scanl f z xs) == foldl f z xs.\r\n     * ```\r\n     * @function module:list.scanl\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = 0,\r\n            result = zero,\r\n            out = [];\r\n        while (ind < limit) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind++;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * `scanl1` is a variant of `scanl` that has no starting value argument:\r\n     * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\r\n     * @function module:list.scanl1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanl1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return [];\r\n        }\r\n        return scanl(fn, head(xs), tail(xs));\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanl` but from the right (similiar to `foldr`'s relationship to 'foldl').\r\n     * Note also `scanr`'s relationship ot `foldr`:\r\n     * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\r\n     * @function module:list.scanr\r\n     * @param fn {Function}\r\n     * @param zero {*}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr = curry((fn, zero, xs) => {\r\n        if (!xs || !length(xs)) {\r\n            return [];\r\n        }\r\n        const limit = length(xs);\r\n        let ind = limit - 1,\r\n            result = xs[0],\r\n            out = [];\r\n        while (ind > -1) {\r\n            result = fn(result, xs[ind], ind, xs);\r\n            out.push(result);\r\n            ind--;\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Same as `scanr` but takes no zero/accumulator value.\r\n     * @function module:list.scanr1\r\n     * @param fn {Function}\r\n     * @param xs {Array}\r\n     * @returns {Array|*}\r\n     */\r\n    scanr1 = curry((fn, xs) => {\r\n        if (!xs || !xs.length) {\r\n            return [];\r\n        }\r\n        return scanr(fn, last(xs), init(xs));\r\n    }),\r\n\r\n    /**\r\n     * The nub function removes duplicate elements from a list.\r\n     * In particular, it keeps only the first occurrence of each element.\r\n     * (The name nub means `essence'.) It is a special case of nubBy, which\r\n     * allows the programmer to supply their own equality test.\r\n     * ```shallowCompare( nub ([1,2,3,4,3,2,1,2,4,3,5]), [1,2,3,4,5] )```\r\n     * @function module:list.nub\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nub = list => nubBy((a, b) => a === b, list),\r\n\r\n    /**\r\n     * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\r\n     * For example, `remove('a', 'banana') === 'bnana';`\r\n     * @function module:list.remove\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    remove = curry((x, list) => removeBy((a, b) => a === b, x, list)),\r\n\r\n    /**\r\n     * The sort function implements a stable sorting algorithm.\r\n     * It is a special case of sortBy, which allows the programmer\r\n     * to supply their own comparison function.\r\n     * ```shallowCompare(sort ([1,6,4,3,2,5]), [1,2,3,4,5,6]) // true```\r\n     * @function module:list.sort\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sort = xs => sortBy(genericAscOrdering, xs),\r\n\r\n    /**\r\n     * Sort a list by comparing the results of a key function applied to each\r\n     * element. sortOn f is equivalent to sortBy (comparing f), but has the\r\n     * performance advantage of only evaluating f once for each element in the\r\n     * input list. This is called the decorate-sort-undecorate paradigm, or\r\n     * Schwartzian transform.\r\n     *\r\n     * Elements are arranged from from lowest to highest, keeping duplicates\r\n     * in the order they appeared in the input.\r\n     *\r\n     * Ex:\r\n     * ```\r\n     * shallowEquals(\r\n     *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\r\n     *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\r\n     * ) // true\r\n     * ```\r\n     * @function module:list.sortOn\r\n     * @param valueFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    sortOn = curry((valueFn, xs) =>\r\n\r\n        // Un-decorate\r\n        map(decorated => decorated[1],\r\n\r\n            // Decorate and sort\r\n            sortBy(\r\n                // Ordering\r\n                ([a0], [b0]) => genericAscOrdering(a0, b0),\r\n\r\n                // Decorate\r\n                map(item => [valueFn(item), item], xs)\r\n            )\r\n        )\r\n    ),\r\n\r\n    /**\r\n     * The sortBy function is the non-overloaded (in haskell terms) version of sort.\r\n     * @haskellExample ```\r\n     *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\r\n     *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\r\n     * ```\r\n     * @function module:list.sortBy\r\n     * @param orderingFn {Function}\r\n     * @param xs {Array|String|*}\r\n     * @returns {Array|String|*}\r\n     */\r\n    sortBy = curry((orderingFn, xs) => sliceCopy(xs).sort(orderingFn || genericAscOrdering)),\r\n\r\n    /**\r\n     * The insert function takes an element and a list and inserts the element\r\n     * into the list at the first position where it is less than or equal to the\r\n     * next element. In particular, if the list is sorted before the call, the\r\n     * result will also be sorted. It is a special case of insertBy, which allows\r\n     * the programmer to supply their own comparison function.\r\n     * @function module:list.insert\r\n     * @param x {*}\r\n     * @param xs {Array|*}\r\n     * @returns {Array}\r\n     */\r\n    insert = curry((x, xs) => {\r\n        if (!xs.length) {\r\n            return of(xs, x);\r\n        }\r\n        const foundIndex = findIndex(item => x <= item, xs);\r\n        return foundIndex === -1 ? concat([xs, of(xs, x)]) :\r\n            concat(intersperse(of(xs, x), splitAt(foundIndex, xs)));\r\n    }),\r\n\r\n    /**\r\n     * A version of `insert` that allows you to specify the ordering of the inserted\r\n     * item;  Before/at, or after\r\n     * @function module:list.insertBy\r\n     * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n     * @note `Ordering` means 'something that is order-able'\r\n     *  operated on by this functions logic.\r\n     * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n     * @param x {*} - Value to insert.\r\n     * @param xs {Array} - List to insert into (note new list is returned)\r\n     * @returns {Array} - New list.\r\n     */\r\n    insertBy = curry((orderingFn, x, xs) => {\r\n        const limit = length(xs);\r\n        if (!limit) {\r\n            return [x];\r\n        }\r\n        let ind = 0;\r\n        for (; ind < limit; ind += 1) {\r\n            if (orderingFn(x, xs[ind]) <= 0) {\r\n                const parts = splitAt(ind, xs);\r\n                return concat([parts[0], [x], parts[1]]);\r\n            }\r\n        }\r\n        return aggregateArray(sliceCopy(xs), x);\r\n    }),\r\n\r\n    /**\r\n     * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\r\n     * @function module:list.nubBy\r\n     * @param pred {Function}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    nubBy = curry((pred, list) => {\r\n        if (!length(list)) {\r\n            return [];\r\n        }\r\n        const limit = length(list);\r\n        let ind = 0,\r\n            currItem,\r\n            out = [],\r\n            anyOp = storedItem => pred(currItem, storedItem);\r\n        for (; ind < limit; ind += 1) {\r\n            currItem = list[ind];\r\n            if (any(anyOp, out)) {\r\n                continue;\r\n            }\r\n            out.push(currItem);\r\n        }\r\n        return out;\r\n    }),\r\n\r\n    /**\r\n     * Behaves the same as `remove`, but takes a user-supplied equality predicate.\r\n     * @function module:list.removeBy\r\n     * @param pred {Function} - Equality predicate `(a, b) => bool`\r\n     * @param x {*}\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeBy = curry((pred, x, list) => {\r\n        const foundIndex = findIndex(item => pred(x, item), list);\r\n        if (foundIndex > -1) {\r\n            const parts = splitAt(foundIndex, list);\r\n            return append(parts[0], tail(parts[1]));\r\n        }\r\n        return sliceCopy(list);\r\n    }),\r\n\r\n    /**\r\n     * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\r\n     * occurrence of each element of the second list removed.\r\n     * @function module:list.removeFirstBy\r\n     * @param pred {Function}\r\n     * @param xs1 {Array|String|*}\r\n     * @param xs2 {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    removeFirstsBy = curry((pred, xs1, xs2) =>\r\n        foldl((agg, x) => removeBy(pred, x, agg), xs1, xs2)),\r\n\r\n    /**\r\n     * Returns the union on elements matching boolean check passed in.\r\n     * @function module:list.unionBy\r\n     * @param pred {Function} - `pred :: a -> a -> Bool`\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    unionBy = curry((pred, arr1, arr2) =>\r\n        foldl((agg, b) => {\r\n                const alreadyAdded = any(a => pred(a, b), agg);\r\n                return !alreadyAdded ? (agg.push(b), agg) : agg;\r\n            }, sliceCopy(arr1), arr2\r\n        )),\r\n\r\n    /**\r\n     * Creates a union on matching elements from array1.\r\n     * @function module:list.union\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    union = curry((arr1, arr2) =>\r\n        append(arr1,\r\n            filter(elm => !includes(elm, arr1), arr2))),\r\n\r\n    /**\r\n     * Performs an intersection on list 1 with  elements from list 2.\r\n     * @function module:list.intersect\r\n     * @param arr1 {Array}\r\n     * @param arr2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    intersect = curry((arr1, arr2) =>\r\n        !arr1 || !arr2 || (!arr1 && !arr2) ? [] :\r\n            filter(elm => includes(elm, arr2), arr1)),\r\n\r\n    /**\r\n     * Returns an intersection by predicate.\r\n     * @function module:list.intersectBy\r\n     * @param pred {Function} - `pred :: a -> b -> Bool`\r\n     * @param list1 {Array}\r\n     * @param list2 {Array}\r\n     * @return {Array}\r\n     */\r\n    intersectBy = curry((pred, list1, list2) =>\r\n        foldl((agg, a) =>\r\n                any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg\r\n            , [], list1)),\r\n\r\n    /**\r\n     * Returns the difference of list 1 from list 2.\r\n     * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n     * @function module:list.difference\r\n     * @param array1 {Array}\r\n     * @param array2 {Array}\r\n     * @returns {Array}\r\n     */\r\n    difference = curry((array1, array2) => { // augment this with max length and min length ordering on op\r\n        if (array1 && !array2) {\r\n            return sliceCopy(array1);\r\n        }\r\n        else if (!array1 && array2 || (!array1 && !array2)) {\r\n            return [];\r\n        }\r\n        return reduce((agg, elm) =>\r\n                !includes(elm, array2) ? (agg.push(elm), agg) : agg\r\n            , [], array1);\r\n    }),\r\n\r\n    /**\r\n     * Returns the complement of list 0 and the reset of the passed in arrays.\r\n     * @function module:list.complement\r\n     * @param arr0 {Array}\r\n     * @param arrays {...Array}\r\n     * @returns {Array}\r\n     */\r\n    complement = curry2((arr0, ...arrays) =>\r\n        reduce((agg, arr) => append(agg, difference(arr, arr0)), [], arrays));\r\n","/**\r\n * @module string\r\n * @description Contains functions for strings.\r\n */\r\nimport {intercalate, map, filter} from './list';\r\nimport {split} from './jsPlatform/string';\r\nimport {compose} from './function/compose';\r\nimport {join} from './jsPlatform/array';\r\nimport {_errorIfNotType} from './errorThrowing';\r\n\r\nexport {split};\r\n\r\nexport const\r\n\r\n    /**\r\n     * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n     * @function module:string.lines\r\n     * @param str {String}\r\n     * @returns {Array}\r\n     */\r\n    lines = split(/[\\n\\r]/gm),\r\n\r\n    /**\r\n     * Splits a string on all '\\s' and/or all '\\t' characters.\r\n     * @function module:string.words\r\n     * @param str{String}\r\n     * @returns {Array}\r\n     */\r\n    words = split(/[\\s\\t]/gm),\r\n\r\n    /**\r\n     * Intersperse an array of strings with '\\s' and then concats them.\r\n     * @function module:string.unwords\r\n     * @param arr {String}\r\n     * @returns {Array}\r\n     */\r\n    unwords = intercalate(' '),\r\n\r\n    /**\r\n     * Intersperses a '\\n' character into a list of strings and then concats it.\r\n     * @function module:string.unlines\r\n     * @param list {Array|String|*}\r\n     * @returns {Array}\r\n     */\r\n    unlines = intercalate('\\n'),\r\n\r\n    /**\r\n     * Lower cases first character of a non-empty string.\r\n     * @function module:string.lcaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    lcaseFirst = xs => {\r\n        _errorIfNotType(String, 'lcaseFirst', 'xs', xs);\r\n        return xs[0].toLowerCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Upper cases first character of a non-empty string.\r\n     * @function module:string.ucaseFirst\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if receiving anything that is not a string.\r\n     */\r\n    ucaseFirst = xs => {\r\n        _errorIfNotType(String, 'ucaseFirst', 'xs', xs);\r\n        return xs[0].toUpperCase() + xs.substring(1);\r\n    },\r\n\r\n    /**\r\n     * Camel cases (class case) a string.\r\n     * @function module:string.camelCase\r\n     * @param xs {String}\r\n     * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Pattern to split on.  Optional.\r\n     * @throws {Error} - Throws error if param `xs` is not a string.\r\n     * @returns {string}\r\n     * @curried\r\n     */\r\n    camelCase = (xs, pattern = /[^a-z\\d]/i) => compose(\r\n            join(''),\r\n            map(str => ucaseFirst(str.toLowerCase())),\r\n            filter(x => !!x),\r\n            split(pattern)\r\n        )(_errorIfNotType(String, 'camelCase', 'xs', xs)),\r\n\r\n    /**\r\n     * Class cases a string.  Uses pattern /[^a-z\\d/i]/ to split on.\r\n     * If you require a different pattern use `string.camelCase(str, pattern)`\r\n     * and then upper case first character (`ucaseFirst`).\r\n     * @function module:string.classCase\r\n     * @param xs {String}\r\n     * @returns {string}\r\n     * @throws {Error} - Throws error if `xs` is not a string (via `camelCase` call).\r\n     */\r\n    classCase = compose(ucaseFirst, camelCase)\r\n\r\n;\r\n\r\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\r\n","/**\r\n * @module fjl\r\n * @description Exports all module methods (object, list, string modules etc.).\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n */\r\nexport * from './object';\r\nexport * from './boolean';\r\nexport * from './function';\r\nexport * from './list';\r\nexport * from './string';\r\nexport * from './utils';\r\nexport * from './errorThrowing';\r\n\r\nimport * as _jsPlatform from './jsPlatform';\r\n\r\nexport const jsPlatform = _jsPlatform;\r\n\r\n/**\r\n * @typedef {String|Function|ArrayBufferConstructor|ArrayConstructor|BooleanConstructor|MapConstructor|NumberConstructor|SetConstructor|WeakMapConstructor|WeakSetConstructor} TypeRef\r\n * @description Type reference.  Either actual type or type's name;  E.g., `Type.name`\r\n * Also note: Class cased names are use for values that do not have `name` properties;  Namely: 'Null', 'NaN' and 'Undefined' (for their respective values respectively).\r\n */\r\n"],"names":["returnCurried","executeArity","unmetArityNum","fn","argsToCurry","func","x","executeAsCurriedFunc","Array","from","arguments","a","b","c","d","e","args","unmetArity","concatedArgs","concat","canBeCalled","length","newExpectedArity","curryN","Function","Error","curry","curry2","curry3","curry4","curry5","fPureTakesOne","name","arg","f","fPureTakes2","arg1","arg2","fPureTakes3","arg3","fPureTakes4","arg4","fPureTakes5","arg5","fPureTakesOneOrMore","defineReverse","prototype","reverse","reduceRight","agg","item","push","map","filter","reduce","forEach","some","every","join","apply","call","flipN","flip","flip3","flip4","flip5","instanceOf","instanceConstructor","instance","hasOwnProperty","native","Object","getOwnPropertyNames","key","operation","keys","assign","obj0","objs","topAgg","obj","_Number","Number","_NaN","_Null","_Undefined","typeOf","value","retVal","undefined","constructorName","constructor","isNaN","_String","String","_Object","_Boolean","Boolean","_Symbol","_Map","_Set","_WeakMap","_WeakSet","toTypeRef","type","toTypeRefs","types","toTypeRefName","Type","ref","toTypeRefNames","isFunction","isType","isStrictly","isOfType","isLoosely","isClass","test","substr","isCallable","isArray","isObject","isBoolean","isNumber","isString","isMap","isSet","isWeakMap","isWeakSet","isUndefined","isNull","isSymbol","isUsableImmutablePrimitive","typeOfX","isset","isEmptyList","isEmptyObject","isEmptyCollection","size","isEmpty","isOneOf","typeName","isStrictlyOneOf","isLooselyOneOf","instanceOfOne","isFunctor","lookup","of","copy","out","slice","Symbol","Promise","searchObj","nsString","indexOf","parts","split","limit","ind","parent","node","typeRefsToStringOrError","defaultErrorMessageCall","tmplContext","contextName","valueName","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","typesCopy","typesToMatchCopy","_getErrorIfNotTypeThrower","errorMessageCall","typeChecker","ValueType","_getErrorIfNotTypesThrower","valueTypes","expectedTypeNames","matchFound","_errorIfNotType","_errorIfNotTypes","getErrorIfNotTypeThrower","getErrorIfNotTypesThrower","errorIfNotType","errorIfNotTypes","createDefinePropsMethod","enumerable","defineEnumProp","defineProp","argTuples","target","argTuple","TypeRef","propName","defaultValue","createTypedDescriptor","_value","get","set","toEnumerableDescriptor","descriptor","toTargetDescriptorTuple","targetOrTargetDescriptorTuple","_target","_descriptor","defineProperty","defineEnumProps","defineProps","assignDeep","propDescription","getOwnPropertyDescriptor","writable","includes","xs","lastIndexOf","isTruthy","isFalsy","alwaysTrue","alwaysFalse","equal","equalAll","i","aggregateArray","sliceFrom","startInd","sliceTo","toInd","sliceCopy","genericAscOrdering","lengths","lists","toShortest","listLengths","smallLen","Math","min","list","reduceUntil","pred","op","result","reduceUntilRight","arr","lastIndex","len","findIndexWhere","predicateFulfilled","findIndexWhereRight","findIndicesWhere","findWhere","elm","objUnion","obj1","obj2","objIntersect","objDifference","objComplement","log","console","bind","error","peek","pop","warn","jsonClone","JSON","parse","stringify","toAssocList","toAssocListDeep","TypeConstraint","fromAssocList","OutType","fromAssocListDeep","toArray","compose","arg0","id","negateF","negateF2","negateF3","negateFN","until","predicate","typeInstance","fnOrError","symbolName","noop","trampoline","fnName","toFunction","normalizeStep","to","step","range","append","listAppend","head","last","tail","init","uncons","unconsr","item0","concatMap","foldableOfA","intersperse","between","lastInd","intercalate","xss","transpose","numLists","ind2","longestListLen","maximum","outLists","outList","subsequences","listLen","pow","entry","j","swapped","ind1","tmp","permutations","repeat","foldl","foldr","foldl1","foldr1","mapAccumL","zero","mapped","tuple","mapAccumR","iterate","lastX","replicate","cycle","unfoldr","resultTuple","findIndex","findIndices","elemIndex","foundInd","elemIndices","take","drop","splitAt","takeWhile","dropWhile","splitPoint","dropWhileEnd","span","breakOnList","at","find","partition","elem","notElem","isPrefixOf","xs1","xs2","limit1","limit2","isSuffixOf","isInfixOf","foundLen","isSubsequenceOf","lenXs1","group","groupBy","equalityOp","prevItem","predOp","inits","tails","stripPrefix","prefix","zip","arr1","arr2","a1","a2","zipN","trimmedLists","zip3","arr3","zip4","arr4","zip5","arr5","zipWith","zipWithN","lenOfTrimmed","zipWith3","xs3","zipWith4","xs4","zipWith5","xs5","unzip","unzipN","lenItem0","any","p","all","and","or","not","sum","product","sortBy","minimum","scanl","scanl1","scanr","scanr1","nub","nubBy","remove","removeBy","sort","sortOn","valueFn","decorated","a0","b0","orderingFn","insert","foundIndex","insertBy","currItem","anyOp","storedItem","removeFirstsBy","unionBy","alreadyAdded","union","intersect","intersectBy","list1","list2","difference","array1","array2","complement","arr0","arrays","lines","words","unwords","unlines","lcaseFirst","toLowerCase","substring","ucaseFirst","toUpperCase","camelCase","pattern","str","classCase","jsPlatform","_jsPlatform"],"mappings":"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"}